<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Splitscreen_Scrollback"
   author="Fiendish"
   id="74524d1272786aaf04e9487d"
   language="Lua"
   purpose="Split-screen view of the main output when backscrolling"
   date_written="2019-04-07 23:05:53"
   requires="5.05"
   version="1.0"
   sequence="10000"
   save_state="y"
   >

</plugin>

<script>
<![CDATA[

require "mw_theme_base"
require "text_rect"
require "color_copy"

if not utils.getfontfamilies().Dina then
    AddFont(GetInfo(66).."Dina.fon")
end

function at_bottom()
   cur_scroll_position = GetInfo(296)
   total_output_lines = GetInfo(224)
   text_rectangle_height = GetInfo(293) - GetInfo(291)
   font_height = GetInfo(212)
   max_scroll_position = ((total_output_lines-1) * font_height) - text_rectangle_height

   return (not GetInfo(114)) or (cur_scroll_position >= max_scroll_position)
end

win = GetPluginID()

function move_amount()
   return font_height * (
      math.floor(text_rectangle_height / font_height) - (desired_lines or base_desired_lines) - 1
   )
end

function pageUp()
   SetScroll(math.max(0, GetInfo(296) - move_amount()), GetInfo(120))
end

function pageDown()
   SetScroll(math.min(max_scroll_position, GetInfo(296) + move_amount()), GetInfo(120))
end

function OnPluginEnable()
   original_unpause_on_send = GetOption("unpause_on_send")
   original_auto_pause = GetOption("auto_pause")
   SetOption("auto_pause", 1)

   WindowCreate(win, 0, 0, 0, 0, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots, 0)
   WindowAddHotspot(win, 'bar', 0, 0, 0, 0, "", "", "BarDown", "", "", "", miniwin.cursor_ns_arrow, 0)
   WindowDragHandler(win, 'bar', "BarDrag", "BarDragRelease")
   WindowScrollwheelHandler(win, 'bar', 'ScrollMain')
   title_height = 6
   WindowShow(win, false)
   check_display()
   
   AcceleratorTo("PageUp", "pageUp()", sendto.script)
   AcceleratorTo("PageDown", "pageDown()", sendto.script)
end

base_desired_lines = tonumber(GetVariable("base_desired_lines")) or 17
new_desired_lines = 0

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginTick()
   if rect_draw_needed then
      if rect then
         rect:draw()
         CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
      end
      rect_draw_needed = false
   end
end

-- when something is added to output
function OnPluginScreendraw(type, log, line)
   if rect then
      local new_num_lines = GetLinesInBufferCount()
      if new_num_lines < num_lines then -- the output buffer filled up
         num_lines = new_num_lines
      end
      for i=num_lines,new_num_lines do
         rect:addText(GetStyleInfo(i))
      end
      rect_draw_needed = true
      num_lines = new_num_lines+1
   else
      check_display()
   end
end

-- when output area moves
function OnPluginDrawOutputWindow(a, b, c)
   if cur_scroll_position ~= GetInfo(296) then  -- current position different from previous
      check_display()
   end
end

function OnPluginSelectionChanged()
   local new_csl = GetSelectionStartLine()
   local new_cel = GetSelectionEndLine()
   local new_csp = GetSelectionStartColumn()
   local new_cep = GetSelectionEndColumn()

   if rect then
      if csl == new_csl and cel == new_cel and csp == new_csp and cep == new_cep then
         return
      end
      csl, cel, csp, cep = new_csl, new_cel, new_csp, new_cep
      if (csl ~= cel) or (csp ~= cep) then
         rect:set_selection(
            rect.rect_lines - (num_lines - 1 - csl),
            rect.rect_lines - (num_lines - 1 - cel),
            csp-1, cep-1
         )
         rect:draw()
         CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
      elseif ((csl == 0) and (cel == 0) and (csp == 0) and (cep == 0)) then
         rect:set_selection(nil, nil, nil, nil)
         rect:draw()
         CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
      end
   else
      if (new_csl == 0) and (new_cel == 0) and (new_csp == 0) and (new_cep == 0) then
         Pause(false)
      end
   end
end

function is_rect()
   return (GetInfo(272) ~= 0) or (GetInfo(273) ~= 0) or (GetInfo(274) ~= 0) or (GetInfo(275) ~= 0)
end

function select_in_main(start_line, end_line, start_pos, end_pos, start_x, end_x)
   if start_line and end_line and start_pos and end_pos then
      start_line = start_line - rect.rect_lines + num_lines - 1
      end_line = end_line - rect.rect_lines + num_lines - 1
   else
      start_line, end_line, start_pos, end_pos = 1, 1, 1, 1
   end
   SetSelection(start_line, end_line, start_pos+1, end_pos+1)
end

function check_display()
   if at_bottom() then
      if rect then
         WindowShow(win, false)
         rect:unInit()
         rect = nil
         SetOption("unpause_on_send", original_unpause_on_send)
         just_cached_original_unpause_on_send = false
      end
   else
      if WindowInfo(win, 1) == nil then
         -- If we're here then we've manually printed to the screen after deleting the window during plugin
         -- disable/close/reload. We don't care about that scenario, so just return.
         return
      end
      local text_rectangle_lines = text_rectangle_height / font_height
      desired_lines = math.max(
         5,
         math.min(
            base_desired_lines + new_desired_lines,
            text_rectangle_lines - 5
         )
      )
      if text_rectangle_lines > (desired_lines+2) then
         desired_lines = math.floor(desired_lines)  -- round here because text_rectangle_lines isn't an int
         local text_offset = GetOption("pixel_offset")
         local border_width = GetInfo(277)
         local border_offset = GetInfo(276)
         local bgcolor = Theme.PRIMARY_BODY
         if not is_rect() then
            border_width = 1
            border_offset = 0
            bgcolor = GetNormalColour(1)
         end
         local left = GetInfo(290) - border_offset - border_width
         local right = GetInfo(292) + border_offset + border_width
         local bottom = GetInfo(293) + border_offset + border_width
         local width = right - left
         local output_font = GetAlphaOption("output_font_name")
         local output_font_size = GetOption("output_font_height")  -- output_font_height is actually the pt size
         local height = (font_height * desired_lines) + border_offset + (2*border_width) + text_offset + title_height + 1
         local top = bottom - height
         -- build the window if it isn't where we want it to be
         if (
            (not WindowInfo(win, 5))
            or (WindowInfo(win, 1) ~= left)
            or (WindowInfo(win, 2) ~= top)
            or (WindowInfo(win, 3) ~= width)
            or (WindowInfo(win, 4) ~= height)
            or (
               rect and (
                  (output_font ~= rect.font_name)
                  or (output_font_size ~= rect.font_size)
               )
            )
         ) then
            num_lines = GetLinesInBufferCount()
            WindowPosition(win, left, top, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots)
            WindowResize(win, width, height, bgcolor)
            WindowRectOp(win, miniwin.rect_fill, 0, 0, 0, 0, bgcolor, nil)  -- clear
            local l, t, r, b = Theme.DrawBorder(win)
            Theme.Draw3DRect(win, -1, 1, 0, title_height)
            t = title_height
            if rect then
               rect:unInit()
               rect = nil
            end
            rect = TextRect.new(
               win, "rect",
               l + text_offset + border_offset - border_width,
               t + border_width,
               r - border_offset + border_width,
               b - text_offset - border_offset + border_width,
               desired_lines, false, Theme.PRIMARY_BODY, 0,
               output_font, output_font_size,
               'ScrollMain',
               select_in_main
            )
            for i=math.min(num_lines-1, rect.rect_lines),1,-1 do
               rect:addText(GetStyleInfo(num_lines - i))
            end
            local wsl = GetSelectionStartLine()
            if wsl ~= 0 then
               csl = wsl
               cel = GetSelectionEndLine()
               csp = GetSelectionStartColumn()
               cep = GetSelectionEndColumn()
               rect:set_selection(
                  rect.rect_lines - (num_lines - 1 - csl),
                  rect.rect_lines - (num_lines - 1 - cel),
                  csp-1, cep-1
               )
            end
            rect:draw()
            WindowMoveHotspot(win, 'bar', 0, 0, 0, t)
            WindowShow(win, true)
            CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")

            if not just_cached_original_unpause_on_send then -- we need to not do this twice in a row because we'll lose our original value
               original_unpause_on_send = GetOption("unpause_on_send")
               SetOption("unpause_on_send", 0)
               just_cached_original_unpause_on_send = true
            end

            SetOption("auto_pause", 1)
         end
      end
   end
end

function BarDown(flags, hotspot_id)
   starty = WindowInfo(win, 18)
end

function BarDrag(flags, hotspot_id)
   local prev_new_desired_lines = new_desired_lines
   local posy = WindowInfo(win, 18)
   new_desired_lines, _ = math.modf((starty - posy) / font_height)
   if new_desired_lines ~= prev_new_desired_lines then
      check_display()
   end
end

function BarDragRelease(flags, hotspot_id)
   base_desired_lines = desired_lines
   SetVariable("base_desired_lines", base_desired_lines)
   new_desired_lines = 0
   check_display()
end

function OnPluginClose()
   OnPluginDisable()
end

function OnPluginDisable()
   if rect then
      rect:unInit()
      rect = nil
   end
   WindowDelete(win)
   SetOption("auto_pause", original_auto_pause)
   SetOption("unpause_on_send", original_unpause_on_send)

   Accelerator("PageUp", "")
   Accelerator("PageDown", "")
   SaveState()
end

function ScrollMain(flags, hotspot_id)
   local delta = math.ceil(bit.shr(flags, 16) / 3)
   if delta == 0 then
      return
   end
   if bit.band (flags, miniwin.wheel_scroll_back) ~= 0 then
      direction = 1   -- wheel scrolled down
   else
      direction = -1  -- wheel scrolled up
   end
   SetScroll(GetInfo(296) + delta*direction, GetInfo(120))
end

function OnPluginTrace (line)
   if not line:find("OnPluginScreendraw") then
      print("TRACE:", line)
   end
end

]]>
</script>
</muclient>
