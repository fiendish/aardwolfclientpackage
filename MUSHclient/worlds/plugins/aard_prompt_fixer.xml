<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Prompt_Fixer"
   author="Fiendish"
   id="1b55534e1fa021cf093aaa6d"
   language="Lua"
   purpose="Fixes prompt at startup so triggers work consistently"
   date_written="2011-12-07"
   requires="4.73"
   version="1.0"
   save_state="y"
   sequence="-10000"
>
<description trim="y">
If your prompt does not end in %c then anchored triggers will not fire consistently,
as some lines will get stuck on the end of your prompt. That is bad. This plugin
tries to add %c to the end of your prompts if you do not already have one so that all
triggers work correctly. The idea for this plugin is based on other plugins by
Bast and WinkleWinkle.
</description>
</plugin>

<triggers>
<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="{prompt fixer begin}$"
   sequence="100"
   name="begin"
   send_to="14"
>
<send>
   EnableTriggerGroup("prompts", true)
   EnableTrigger("end", true)
   EnableTrigger("begin", false)
</send>
</trigger>

<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^{prompt fixer end}$"
   sequence="100"
   name="end"
   send_to="14"
>
<send>
   EnableTriggerGroup("prompts", false)
   EnableTrigger("end", false)
</send>
</trigger>

<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^Regular Game Prompt    : (.*)$"
   sequence="100"
   name="prompt"
   script="prompt_rec"
   group="prompts"
>
</trigger>

<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^Regular Battle Prompt  : (.*)$"
   sequence="100"
   name="battleprompt"
   script="prompt_rec"
   group="prompts"
>
</trigger>

<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^.*$"
   sequence="110"
   group="prompts"
>
</trigger>

<trigger
   enabled="y"
   regexp="y"
   match="^(Battle p|P)rompt set to:? (.*)$"
   sequence="100"
   send_to="12"
>
<send>
   p = Trim("%2")
   if p:sub(-2) ~= "%%c" then -- send box has funny % replacements
      do_prompt_check()
   end
</send>
</trigger>

</triggers>

<script>
<![CDATA[
require "aard_lua_extras"

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

adjusted = {}
-- received a prompt line in the config output
function prompt_rec (name, line, wildcards, styles)
   prompt = wildcards[1]
   if prompt:sub(-2) ~= "%c" then
      while styles[#styles].length == 0 do
         styles[#styles] = nil
      end
      prompt = StylesToColours(styles)
      prompt = Trim(string.split(prompt, ":%s+", false, 1)[2])

      if prompt:sub(-2) ~= "%c" then
         prompt = prompt.."%c"
      end
      if #strip_colours(prompt) > 80 then
         print()
         ColourNote("white", "red", "The Aardwolf MUSHclient Package wants to adjust your "..name.." to end in '%c', but it is too long.")
         ColourNote("white", "red", "Please adjust your "..name.." manually to end in '%c'. (help prompt)")
         ColourNote("white", "red", "This is necessary for Aardwolf scripts to work consistently.")
         ColourNote()
         ColourNote("white", "red", "Afterwards, you might want to restart MUSHclient to let scripts reinitialize.")
      else
         print()
         print("The Aardwolf MUSHclient Package is adjusting your "..name.." to end in '%c'.")
         print("This is necessary for Aardwolf scripts to work consistently.")
         print()
         print("You might want to restart MUSHclient now to let scripts reinitialize.")
         table.insert(adjusted, name)
         Send((name == "battleprompt" and "bprompt" or "prompt").." "..prompt)
      end
   end
end

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function do_connect_init()
   EnableTrigger("begin", true)
   SendNoEcho("echo {prompt fixer begin}")
   SendNoEcho("prompt data")
   SendNoEcho("echo {prompt fixer end}")
end

doinit = true
function OnPluginTelnetOption(data)
   if doinit then
      local hexcodes = {
         ['6403'] = true,
         ['6409'] = true,
         ['640B'] = true
      }
      if hexcodes[utils.tohex(data)] then
         doinit = false
         do_connect_init()
      end
   end
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end

]]>
</script>
</muclient>
