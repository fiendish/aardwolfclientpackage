<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Prompt_Fixer"
   author="Fiendish"
   id="1b55534e1fa021cf093aaa6d"
   language="Lua"
   purpose="Fixes prompt at startup so triggers work consistently"
   date_written="2011-12-07"
   requires="4.73"
   version="1.0"
   save_state="y"
   sequence="-10000"
>
<description trim="y">
If your prompt does not end in %c then anchored triggers will not fire consistently,
as some lines will get stuck on the end of your prompt. That is bad. This plugin
tries to add %c to the end of your prompts if you do not already have one so that all
triggers work correctly. The idea for this plugin is based on other plugins by
Bast and WinkleWinkle.
</description>
</plugin>

<triggers>

<trigger
   enabled="y"
   regexp="y"
   match="^(Battle p|P)rompt set to:? (.*)$"
   sequence="100"
   send_to="12"
>
<send>
   request_prompt()
</send>
</trigger>

</triggers>

<script>
<![CDATA[
require "gmcphelper"

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

function strip_right(s)
   return s:gsub("%s+$", "")
end

function check_prompt(prompt, name)
   if prompt:sub(-4) ~= "%c@w" then
      started_white = (prompt:sub(1,2) == "@w")

      -- strip trailing color codes
      styles = ColoursToStyles(prompt)
      while styles[#styles].length == 0 do
         styles[#styles] = nil
         prompt = strip_right(StylesToColours(styles))
         styles = ColoursToStyles(prompt)
      end
      prompt = strip_right(prompt)

      -- remove leading @w added by StylesToColours
      if prompt:sub(1,2) == "@w" and not started_white then
         prompt = prompt:sub(3)
      end

      local has_newline = false
      if prompt:sub(-2) == "%c" then
         has_newline = true
         -- strip trailing space before newline
         while prompt:sub(-2) == "%c" do
            prompt = strip_right(prompt:sub(1, -3))
         end
      end

      -- newline at end
      if prompt:sub(-2) ~= "%c" then
         prompt = prompt.."%c"
      end

      if #strip_colours(prompt) > 80 then
         print()
         ColourNote("white", "red", "The Aardwolf MUSHclient Package wants to adjust your game "..name.." to end in '%c', but it is too long.")
         ColourNote("white", "red", "Please adjust your game "..name.." manually to end in '%c'. (help prompt)")
         ColourNote("white", "red", "This is necessary for triggers to work properly.")
         ColourNote("white", "red", "If you've encountered script errors, try restarting MUSHclient afterwards to let scripts reinitialize.")
      elseif #Trim(prompt) > 0 then
         print()
         if not has_newline then
            print("The Aardwolf MUSHclient Package is adjusting your game "..name.." to end in '%c'.")
            print("This is necessary for triggers to work properly.")
            print("If you've encountered script errors, try restarting MUSHclient now to let scripts reinitialize.")
         else
            print("The Aardwolf MUSHclient Package is adjusting your game "..name.." to not have extra space or color codes at the end (Aardwolf adds @w automatically).")
         end
         Send((name == "battleprompt" and "bprompt" or "prompt").." "..prompt)
      end
   end
end

function prompt_rec(main, battle)
   check_prompt(main, "prompt")
   check_prompt(battle, "battleprompt")
end

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

requesting = false
function request_prompt()
   if not requesting then
      requesting = true
      Send_GMCP_Packet("request prompt")
   end
end

doinit = true
function state_check(state)
   if doinit and ((state == "3") or (state == "8")) then -- standing or resting
      doinit = false
      request_prompt()
   end
end

function OnPluginBroadcast(msg, id, name, text)
   if (id == '3e7dedbe37e44942dd46d264') then -- GMCP handler
      if (text == "char.status") and doinit then
         state_check(gmcp("char.status.state"))
      end
      if text == "char.prompts" then
         prompt_rec(gmcp("char.prompts.main"), gmcp("char.prompts.battle"))
         requesting = false
      end
   end
end

function OnPluginInstall()
   if IsConnected() and doinit then
      state_check(gmcp("char.status.state"))
   end
end

]]>
</script>
</muclient>
