<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Aardwolf_Chat_Echo"
   author="Fiendish"
   id="55616ea13339bc68e963e1f8"
   language="Lua"
   purpose="Control whether certain channels get hidden from main output"
   date_written="2011-07-27 01:00:00"
   requires="4.75"
   version="1.0"
   save_state="y"
   sequence="-5000"
>

<description trim="y">
USAGE:

   chats echo on      : show all chats in main window
   chats echo off     : do not show any chats in main window
   chats echo custom  : select a custom list of chats to show in the main window
</description>

</plugin>

<triggers>
<trigger
   enabled="y"
   match="^{say}(?<msg>.*)"
   regexp="y"
   script="chats"
   omit_from_output="y"
   sequence="100"
   send_to="12"
   name="say"
><send>StopEvaluatingTriggers(true)</send></trigger>
   
<trigger
   enabled="y"
   match="^{chan ch=(?<channel>\w+)}(?<msg>.*)"
   regexp="y"
   script="chats"
   omit_from_output="y"
   sequence="100"
   send_to="12"
   name="chan"
><send>StopEvaluatingTriggers(true)</send></trigger>
    
<trigger
   enabled="y"
   match="^{tell}(?<msg>.*)"
   script="chats"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="12"
   name="tell"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="pray"
   match="^\[ \*\* \(Pray\) \*\* \].+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>
   
<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="donations"
   match="^CLAN ANNOUNCEMENT: \a+ has donated "
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   match="^$"
   regexp="y"
   name="end_gag_omit"
   group="end_gag"
   omit_from_output="y"
   sequence="100"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>
    
<trigger
   enabled="n"
   match=".*"
   regexp="y"
   name="end_gag_keep"
   group="end_gag"
   omit_from_output="n"
   sequence="101"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>

</triggers>

<aliases>
<alias
   script="chat_echo_wrap"
   match="^chats? echo( on| off| custom)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "pairsbykeys"

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

function hideEchos(info, global_quest, remort_auction, donations, pray, warfare)
   if info ~= nil then
      EnableTrigger("info", info)
      EnableTrigger("raidinfo", info)
      EnableTrigger("claninfo", info)
   end
   if global_quest ~= nil then
      EnableTrigger("global_quest", global_quest)
   end
   if remort_auction ~= nil then
      EnableTrigger("remort_auction", remort_auction)
   end
   if donations ~= nil then
      EnableTrigger("donations", donations)
   end
   if pray ~= nil then
      EnableTrigger("pray", pray)
   end
   if warfare ~= nil then
      EnableTrigger("warfare", warfare)
   end
end

local echo_info = GetVariable("echo_info") == "1"
local echo_global_quest = GetVariable("echo_global_quest") == "1"
local echo_remort_auction = GetVariable("echo_remort_auction") == "1"
local echo_donations = GetVariable("echo_donations") == "1"
local echo_pray = GetVariable("echo_pray") == "1"
local echo_warfare = GetVariable("echo_warfare") == "1"
hideEchos(echo_info, echo_global_quest, echo_remort_auction, echo_donations, echo_pray, echo_warfare)

local init_channel_names = {"advice","answer","auction","barter","clantalk","curse","debate","dtell","ftalk","gametalk","gclan","gossip","gratz","gsocial","gtell","helper","immtalk","lasertag","ltalk","market","mobsay","music","mxit","newbie","nobletalk","pchat","pokerinfo","ptell","question","quote","racetalk","rauction","rp","say","sports","spouse","tech","tell","tiertalk","trivia","wangrp","wardrums"}
channels_table = {}
loadstring(GetVariable("channels_table") or "")()

function addNewChannel(name)
   if not channels_table[name] then
      channels_table[name] = {echo=true}
   end
end

function constructDefaultChannels()
   for i,v in ipairs(init_channel_names) do
      addNewChannel(v)
   end
end

constructDefaultChannels()

function echoStyles(styles)
   Simulate(stylesToANSI(styles).."\r\n")
--   for _, v in ipairs(styles) do
--      ColourTell(RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), v.text)
--   end -- for each style run
--   Note ("")  -- wrap up line
end

function chats (name, line, wildcards, styles)
   local tag = name
   if name == "chan" then
      tag = string.match(line, "^{chan ch=(%a+)}")
   end
   if not tag then
      return
   end

   tag_length = string.find(line,"}")
   addNewChannel(tag)

   -- echo in this world only if the user wants
   if channels_table[tag]["echo"] then
      -- Mahony reported that tags would sometimes come through with a color change injected by...something. 
      -- That *SHOULD* never happen, but apparently has multiple times now. May as well take care of the possibility. Can't hurt right?
      while tag_length > styles[1].length and styles[2] ~= nil do
         -- merge all dangling styles up to the end of the tag
         styles[1].text = styles[1].text .. styles[2].text
         styles[1].length = styles[1].length + styles[2].length
         table.remove(styles, 2)
      end

      -- strip out the tag
      styles[1].text = string.sub(styles[1].text, tag_length+1)
      styles[1].length = styles[1].length-tag_length
      
      -- display
      echoStyles(styles)
   else
      EnableTriggerGroup("end_gag", true) -- gags the trailing blank line if compact is off
   end -- echo wanted
end -- chats

function untagged_info (name, line, wildcards, styles)
   EnableTriggerGroup("end_gag", true) -- gags the trailing blank line if compact is off
end

function chat_echo (toggle)
   if toggle == "" then
      ColourNote("yellow", "", "Current channel echo status: ")
      for k,v in pairsByKeys(channels_table) do
         ColourTell("yellow", "", tostring(k).." ")
         ColourNote((v["echo"] and "lime") or "red", "", tostring(v["echo"] or "false"))
      end
      Note("")
   elseif toggle == "on" then
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = true
      end
      ColourNote ("yellow", "", "All chats are now SHOWN in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled manually.")
      Note("")
   elseif toggle == "off" then
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = nil
      end
      ColourNote ("yellow", "", "All chats are now HIDDEN in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled manually.")
      Note("")
   elseif toggle == "custom" then
      local tbl = {}
      local defaults = {}
      local i = 1
      for k,v in pairsByKeys(channels_table) do
         tbl[i] = k
         defaults[i] = v["echo"]
         i = i+1
      end
      local echo_result = utils.multilistbox ("Choose which channels to show in the main window.", "Main Output Echo Channel Selection", tbl, defaults)
      if echo_result then
         for i,v in ipairs(tbl) do
            channels_table[v]["echo"] = echo_result[i]
         end
      end
   end -- if
   
   OnPluginSaveState()
end

function chat_echo_wrap (name, line, wildcards)
   chat_echo(Trim(wildcards[1]):lower())
end -- chat_echo

require "serialize"
function OnPluginSaveState()
   SetVariable("echo_info", GetTriggerOption("info", "enabled"))
   SetVariable("echo_global_quest", GetTriggerOption("global_quest", "enabled"))
   SetVariable("echo_remort_auction", GetTriggerOption("remort_auction", "enabled"))
   SetVariable("echo_donations", GetTriggerOption("donations", "enabled"))
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("echo_pray", GetTriggerOption("pray", "enabled"))
   SetVariable("echo_warfare", GetTriggerOption("warfare", "enabled"))
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginEnable ()
   -- if we are connected when the plugin loads, it must have been reloaded while playing
   if IsConnected() then
      OnPluginConnect()
   end -- if already connected
end -- OnPluginEnable

function OnPluginClose()
   OnPluginDisable()
end

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

function OnPluginDisable()
   if IsConnected() then
      TelnetOptionOff(TELOPT_CHANNELS)
      TelnetOptionOff(TELOPT_TELLS)
      TelnetOptionOff(TELOPT_SAYS)
   end
end

function OnPluginConnect()
   TelnetOptionOff(TELOPT_QUIET)
   TelnetOptionOn(TELOPT_CHANNELS)
   TelnetOptionOn(TELOPT_TELLS)
   TelnetOptionOn(TELOPT_SAYS)
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
