<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Aardwolf_Chat_Echo"
   author="Fiendish"
   id="55616ea13339bc68e963e1f8"
   language="Lua"
   purpose="Control whether certain channels get hidden from main output"
   date_written="2011-07-27 01:00:00"
   requires="4.75"
   version="1.0"
   save_state="y"
   sequence="-8999"
>
<!-- sequence must be before 0 to not double trigger world triggers -->
<!-- sequence must be after channels plugin to capture unechoed info -->
<description trim="y">
USAGE:

   chats echo on      : show all chats in main window
   chats echo off     : do not show any chats in main window
   chats echo custom  : select a custom list of chats to show in the main window
</description>

</plugin>

<triggers>
<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   match="^$"
   regexp="y"
   name="end_gag_omit"
   group="end_gag"
   omit_from_output="y"
   sequence="100"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>

<trigger
   enabled="n"
   match=".+"
   regexp="y"
   name="end_gag_keep"
   group="end_gag"
   omit_from_output="n"
   sequence="101"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>

</triggers>

<aliases>
<alias
   script="chat_echo_wrap"
   match="^chats? echo( on| off| custom)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "pairsbykeys"
require "gmcphelper"

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

echo_info = GetVariable("echo_info_2") ~= "0"
echo_global_quest = GetVariable("echo_global_quest_2") ~= "0"
echo_remort_auction = GetVariable("echo_remort_auction_2") ~= "0"
echo_donations = GetVariable("echo_donations_2") ~= "0"
echo_warfare = GetVariable("echo_warfare_2") ~= "0"

-- only hide echoes if at least one capture window is active
-- use CallPlugin ("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())
never_hide = true
list_of_filter_enablers = {}
function enable_hiding(true_false, enabler_id)
   list_of_filter_enablers[enabler_id] = true_false or nil
   num_enablers = 0
   for k,v in pairs(list_of_filter_enablers) do
      num_enablers = num_enablers + 1
   end
   if num_enablers > 0 then
      never_hide = false
      if not aard_req_novisuals_mode then
         EnableTrigger("info", not echo_info)
         EnableTrigger("raidinfo", not echo_info)
         EnableTrigger("claninfo", not echo_info)
         EnableTrigger("global_quest", not echo_global_quest)
         EnableTrigger("remort_auction", not echo_remort_auction)
         EnableTrigger("donations", not echo_donations)
         EnableTrigger("warfare", not echo_warfare)
      end
   else
      never_hide = true
      for i,v in ipairs(GetTriggerList()) do
         EnableTrigger(v, false)
      end
   end
end

enable_hiding(false, GetPluginID())

function hideEchos(info, global_quest, remort_auction, donations, warfare)
   if info ~= nil then
      EnableTrigger("info", info)
      EnableTrigger("raidinfo", info)
      EnableTrigger("claninfo", info)
      echo_info = not info
      if echo_info then
         ColourNote ("yellow", "", "Info echoing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Info echoing is now DISABLED.")
      end
   end
   if global_quest ~= nil then
      EnableTrigger("global_quest", global_quest)
      echo_global_quest = not global_quest
      if echo_global_quest then
         ColourNote ("yellow", "", "Global Quest echoing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Global Quest echoing is now DISABLED.")
      end
   end
   if remort_auction ~= nil then
      EnableTrigger("remort_auction", remort_auction)
      echo_remort_auction = not remort_auction
      if echo_remort_auction then
         ColourNote ("yellow", "", "Remort Auction echoing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Remort Auction echoing is now DISABLED.")
      end
   end
   if donations ~= nil then
      EnableTrigger("donations", donations)
      echo_donations = not donations
      if echo_donations then
         ColourNote ("yellow", "", "Donations echoing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Donations echoing is now DISABLED.")
      end
   end
   if warfare ~= nil then
      EnableTrigger("warfare", warfare)
      echo_warfare = not warfare
      if echo_warfare then
         ColourNote ("yellow", "", "Warfare echoing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Warfare echoing is now DISABLED.")
      end
   end
end

function getEchos()
   return echo_info, echo_global_quest, echo_remort_auction, echo_donations, echo_warfare
end

local init_channel_names = {"advice","answer","auction","barter","clantalk","curse","debate","dtell","ftalk","gametalk","gclan","gossip","gratz","gsocial","gtell","helper","immtalk","lasertag","ltalk","market","mobsay","music","mxit","newbie","nobletalk","pchat","pokerinfo","ptell","question","quote","racetalk","rauction","rp","say","sports","spouse","tech","tell","tiertalk","trivia","wangrp","wardrums"}
channels_table = {}
loadstring(GetVariable("channels_table") or "")()

function addNewChannel(name)
   if not channels_table[name] then
      channels_table[name] = {echo=true}
   end
end

function constructDefaultChannels()
   for i,v in ipairs(init_channel_names) do
      addNewChannel(v)
   end
end

constructDefaultChannels()

function echo_msg(msg)
   Simulate(ColoursToANSI(msg).."\r\n")
   if compact_mode ~= "set" then
      Simulate("\r\n")
   end
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
   for k,v in pairs(list_of_filter_enablers) do
      enable_hiding(GetPluginInfo(k, 17), k)
   end
end

safe_char_state_hexcodes = {
   ['6403'] = 3,
   ['6409'] = 9,
   ['640B'] = 11
}
function OnPluginTelnetOption(data)
   local hexdata = utils.tohex(data)
   -- after MOTD
   if (not done_init) and safe_char_state_hexcodes[hexdata] then
      done_init = true
      Send_GMCP_Packet("config compact")
   end
end

msg_buffer = {}
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "config") then
         compact_mode = gmcp("config.compact")
      elseif (text == "comm.channel") then
         gmcp_comm = gmcp("comm.channel")
         msg = gmcp_comm.msg or ""
         chan = gmcp_comm.chan or ""
         if msg:find("\a") and (GetOption("enable_beeps") == 1) then
            Sound(GetInfo(50))
         end

         if (never_hide or echo_donations or (string.match(strip_colours(msg), "^CLAN ANNOUNCEMENT: %a+ has donated") == nil)) then
            if not channels_table[chan] then
               addNewChannel(chan)
            end
            if never_hide or channels_table[chan]["echo"] then
               if gmcp("char.status.state") ~= "5" then
                  echo_msg(msg)
               else
                  table.insert(msg_buffer, msg)
               end
            end
         end
      elseif (text == "char.status") then
         if gmcp("char.status.state") ~= "5" then -- show messages that were buffered while in note mode
            if #msg_buffer > 0 then
               Note("Replaying all channel messages received while in note writing mode...")
               for i,v in ipairs(msg_buffer) do
                  echo_msg(v)
               end
               msg_buffer = {}
            end
         end
      end
   end
end

function untagged_info (name, line, wildcards, styles)
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function rejection_message()
  Note()
  ColourNote ("yellow", "", "You can't hide messages with \"chats echo on\" or \"chats echo custom\" unless you have at least one secondary capture plugin active.")
  ColourNote ("yellow", "", "If you want to disable certain channels, do it with the available in-game commands.")
  ColourNote ("yellow", "", [[Otherwise you must have at least one plugin which uses the following line of code before disabling chat display in the client is allowed:   CallPlugin("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())]])
  Note()
end

function chat_echo (toggle)
   if toggle == "" then
      ColourNote("yellow", "", "Current channel echo status: ")
      for k,v in pairsByKeys(channels_table) do
         ColourTell("yellow", "", tostring(k).." ")
         ColourNote((v["echo"] and "lime") or "red", "", tostring(v["echo"] or "false"))
      end
      Note("")
   elseif toggle == "on" then
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = true
      end
      ColourNote ("yellow", "", "All chats are now", "lime", "", " shown ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled manually.")
      Note("")
   elseif toggle == "off" then
      if never_hide then
         return rejection_message()
      end
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = nil
      end
      ColourNote ("yellow", "", "All chats are now", "red", "", " hidden ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled manually.")
      Note("")
   elseif toggle == "custom" then
      if never_hide then
         return rejection_message()
      end
      local tbl = {}
      local defaults = {}
      local i = 1
      for k,v in pairsByKeys(channels_table) do
         tbl[i] = k
         defaults[i] = v["echo"]
         i = i+1
      end
      local echo_result = utils.multilistbox("Choose which channels to show in the main window.", "Main Output Echo Channel Selection", tbl, defaults)
      if echo_result then
         for i,v in ipairs(tbl) do
            channels_table[v]["echo"] = echo_result[i]
         end
      end
   end -- if

   SaveState()
end

function chat_echo_wrap (name, line, wildcards)
   chat_echo(Trim(wildcards[1]):lower())
end -- chat_echo

require "serialize"
function OnPluginSaveState()
   SetVariable("echo_info_2", echo_info and "1" or "0")
   SetVariable("echo_global_quest_2", echo_global_quest and "1" or "0")
   SetVariable("echo_remort_auction_2", echo_remort_auction and "1" or "0")
   SetVariable("echo_donations_2", echo_donations and "1" or "0")
   SetVariable("echo_warfare_2", echo_warfare and "1" or "0")
   SetVariable("channels_table", serialize.save("channels_table"))
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginEnable ()
   -- if we are connected when the plugin loads, it must have been reloaded while playing
   if IsConnected() then
      OnPluginConnect()
   end -- if already connected
end -- OnPluginEnable

function OnPluginClose()
   OnPluginDisable()
end

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

function OnPluginDisable()
   if IsConnected() then
      Send_GMCP_Packet("gmcpchannels off")
   end
end

function OnPluginConnect()
   Send_GMCP_Packet("gmcpchannels on")
   Send_GMCP_Packet("request char")
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
