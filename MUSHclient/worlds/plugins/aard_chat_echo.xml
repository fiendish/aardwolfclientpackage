<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Aardwolf_Chat_Echo"
   author="Fiendish"
   id="55616ea13339bc68e963e1f8"
   language="Lua"
   purpose="Control whether certain channels get hidden from main output"
   date_written="2011-07-27 01:00:00"
   requires="4.75"
   version="1.0"
   save_state="y"
   sequence="-8999"
>
<!-- sequence must be before 0 to not double trigger world triggers -->
<!-- sequence must be after channels plugin to capture unechoed info -->
<description trim="y">
<![CDATA[
USAGE:

 chats echo on              : show all channels in main window
 chats echo off             : do not show any channels in main window
 chats echo custom          : select which channels to show in the main window
 chats mute <who> [minutes] : mutes a player's chat messages (not ignore)
 chats unmute <who>         : stops muting a player's chat messages
 chats mute                 : displays the current mute list
 chats clear mute           : clears the mute list
]]>
</description>

</plugin>

<triggers>
<trigger
   enabled="y"
   name="ignoreLimit"
   match="^You are already ignoring 10 people\.$"
   regexp="y"
   script="metIgnoreLimit"
   omit_from_output="n"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="ignoreStart"
   match="^You are (?:not ignoring anyone\.|ignoring:)$"
   regexp="y"
   script="startIgnoreList"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="ignoreEnd"
   match="^$"
   regexp="y"
   script="endIgnoreList"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>

<trigger
   enabled="n"
   match="^$"
   regexp="y"
   name="end_gag_omit"
   group="end_gag"
   omit_from_output="y"
   sequence="100"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>

<trigger
   enabled="n"
   match="."
   regexp="y"
   name="end_gag_keep"
   group="end_gag"
   omit_from_output="n"
   sequence="101"
   send_to="12"
>
<send>
   EnableTriggerGroup("end_gag", false)
</send>
</trigger>

</triggers>

<aliases>
<alias
   match="^ig(n|no|nor|nore)?( +\w+)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="clientIgnore"
   echo_alias="y"
></alias>
<alias
   match="^chats (un)?mute( +(\w+)( (\d+))?)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="muteNameAlias"
   echo_alias="y"
></alias>
<alias
   match="^chats mute clear$"
   enabled="y"
   regexp="y"
   sequence="99"
   ignore_case="y"
   script="clearIgnoreList"
   echo_alias="y"
></alias>

<alias
   script="chat_echo_wrap"
   match="^chats? echo( on| off| channels| nonchannels)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   echo_alias="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "pairsbykeys"
require "gmcphelper"
require "serialize"

mute_lookup = {}
loadstring(GetVariable("mute_lookup") or "")()


function muteNameAlias(name, line, wildcards)
   muteName(wildcards[3], wildcards[1] ~= "un", wildcards[5])
end

function muteName(playerName, mute, minutes)
   Note("")
   local minutes = tonumber(minutes)

   if playerName ~= "" then
      local currently_muted = checkIfMuted(playerName)
      if mute == nil then
         mute = not currently_muted
      end
      if mute then
         mute_lookup[playerName:lower()] = minutes and os.time()+(minutes*60) or true
         local duration = " until removed."
         if minutes then
            duration = " for "..minutes.." minutes."
         end
         Note("Muting "..playerName..duration)
      else
         if currently_muted then
            mute_lookup[playerName:lower()] = nil
            Note("Removing " .. playerName .. " from your muted list.")
         else
            Note(playerName.." is not currently muted.")
         end
      end
      SaveState()
   end

   displayIgnoreList()
end


function startIgnoreList()
   EnableTrigger("ignoreStart", false)
   EnableTrigger("ignoreLimit", false)
   EnableTrigger("ignoreEnd")
end

function sortedMuteList()
   local sorted = {}
   local cloned_mute_lookup = {}
   for k,v in pairs(mute_lookup) do
      cloned_mute_lookup[k] = v
   end
   for k,_ in pairs(cloned_mute_lookup) do
      if checkIfMuted(k) then
         table.insert(sorted, k:sub(1,1):upper()..k:sub(2,-1))
      end
   end
   table.sort(sorted)
   return sorted
end

require "commas"
function displayIgnoreList()
   local sorted_mute_list = sortedMuteList()
   if #sorted_mute_list > 0 then
      Note("You are muting:")
      for i,v in ipairs(sorted_mute_list) do
         local duration = "forever"
         local until_when = mute_lookup[v:lower()]
         if type(until_when) == "number" then
            duration = "about "..convert_time(until_when - os.time())
         end
         Note(string.format("%3d) - %s (%s)", i, v, duration))
      end
      Note("")
   else
      Note("You are not currently muting anyone.")
   end
   Note("(Muted players are not ignored in game, only removed from your channel output.)")
end

function endIgnoreList()
   EnableTrigger("ignoreEnd", false)
   Note("")
   displayIgnoreList()
end

function metIgnoreLimit()
   EnableTrigger("ignoreLimit", false)
   if not checkIfMuted(playerCapture) then
      Note("Maybe you'd like to just mute channel messages from them instead with `chats mute "..playerCapture.."`?")
   end
   playerCapture = nil
end

function clientIgnore(name, line, wildcards)
   playerCapture = Trim(wildcards[2])
   EnableTrigger("ignoreLimit")
   EnableTrigger("ignoreStart")
   SendNoEcho(line)
end

function clearIgnoreList()
   mute_lookup = {}
   Note("Mute list cleared.")
   SaveState()
end

local init_nonchannel_keys = {"info", "raidinfo", "claninfo", "clan_donations", "global_quest", "warfare", "remort_auction"}
local init_nonchannel_pairs = {["warfare"]="WARFARE:", ["info"]="INFO:", ["raidinfo"]="RAIDINFO:", ["claninfo"]="CLANINFO:", ["global_quest"]="Global Quest:", ["remort_auction"]="Remort Auction:", ["clan_donations"]="Clan Donations"}
local init_channel_keys = {"answer","auction","barter","cant","chant","claninfo","clantalk","commune","curse","dtell","ftalk","gametalk","gclan","gossip","grapevine","gratz","gtell","helper","immtalk","inform","lasertag","ltalk","mafiainfo","market","mchat","mobsay","music","newbie","pchat","pokerinfo","ptell","question","racetalk","rauction","restores","rp","say","snewbie","spouse","tech","telepathy","tell","tiertalk","trivia","wangrp","wardrums","yell"}

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

-- legacy variables
echo_info = GetVariable("echo_info_2") ~= "0"
echo_global_quest = GetVariable("echo_global_quest_2") ~= "0"
echo_remort_auction = GetVariable("echo_remort_auction_2") ~= "0"
echo_donations = GetVariable("echo_donations_2") ~= "0"
echo_warfare = GetVariable("echo_warfare_2") ~= "0"

-- only hide echoes if at least one capture window is active
-- use CallPlugin ("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())
never_hide = true
list_of_filter_enablers = {}
function enable_hiding(true_false, enabler_id)
   list_of_filter_enablers[enabler_id] = true_false or nil
   num_enablers = 0
   for k,v in pairs(list_of_filter_enablers) do
      num_enablers = num_enablers + 1
   end
   if (not aard_req_novisuals_mode) and (num_enablers > 0) then
      never_hide = false
      addDefaultNonChannels()
   else
      never_hide = true
      for i,v in ipairs(init_nonchannel_keys) do
         EnableTrigger(v, false)
      end
   end
end

enable_hiding(false, GetPluginID())


channels_table = {}
nonchannels_table = {}
loadstring(GetVariable("channels_table") or "")()
loadstring(GetVariable("nonchannels_table") or "")()

function addNewChannel(name)
   if not channels_table[name] then
      channels_table[name] = {["echo"]=true}
   end
end

function other_should_echo(name)
   if never_hide or nonchannels_table[name]["echo"] then
      return true
   end
   return false
end

function addDefaultNonChannels()
   for i,v in ipairs(init_nonchannel_keys) do
      nonchannels_table[v] = nonchannels_table[v] or {["echo"]=true}
      EnableTrigger(v, not other_should_echo(v))
   end
end

function addDefaultChannels()
   for i,v in ipairs(init_channel_keys) do
      addNewChannel(v)
   end
   addDefaultNonChannels()
end

addDefaultChannels()

function echo_msg(msg)
   Simulate(ColoursToANSI(msg).."\r\n")
   if gmcp("config.compact") ~= "YES" then
      Simulate("\r\n")
   end
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
   for k,v in pairs(list_of_filter_enablers) do
      enable_hiding(GetPluginInfo(k, 17), k)
   end
end

function checkIfMuted(player)
   local should_mute = mute_lookup[player:lower()]
   if type(should_mute) == "number" then
      should_mute = should_mute > os.time()
      if not should_mute then
         mute_lookup[player:lower()] = nil
         SaveState()
      end
   end
   return should_mute
end

msg_buffer = {}
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "comm.channel") then
         local gmcp_comm = gmcp("comm.channel")
         local msg = gmcp_comm.msg or ""
         local chan = gmcp_comm.chan or ""
         local player = gmcp_comm.player or ""
         if msg:find("\a") and (GetOption("enable_beeps") == 1) then
            Sound(GetInfo(50))
         end

         if (never_hide or other_should_echo("clan_donations") or string.match(strip_colours(msg), "^CLAN ANNOUNCEMENT: %a+ has donated") == nil) then
            if not channels_table[chan] then
               addNewChannel(chan)
            end
            if never_hide or channels_table[chan]["echo"] and not checkIfMuted(player) then
               if gmcp("char.status.state") ~= "5" then
                  echo_msg(msg)
               else
                  table.insert(msg_buffer, msg)
               end
            end
         end
      elseif (text == "char.status") then
         if gmcp("char.status.state") ~= "5" then -- show messages that were buffered while in note mode
            if #msg_buffer > 0 then
               Note("Replaying all channel messages received while in note writing mode...")
               for i,v in ipairs(msg_buffer) do
                  echo_msg(v)
               end
               msg_buffer = {}
            end
         end
      end
   end
end

function untagged_info (name, line, wildcards, styles)
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function rejection_message()
  Note()
  ColourNote ("yellow", "", "You can't hide messages with \"chats echo on\" or \"chats echo custom\" unless you have at least one secondary capture plugin active.")
  ColourNote ("yellow", "", "If you want to disable certain channels, do it with the available in-game commands.")
  ColourNote ("yellow", "", [[Otherwise you must have at least one plugin which uses the following line of code before disabling chat display in the client is allowed:   CallPlugin("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())]])
  Note()
end

function chat_echo (toggle)
   if toggle == "" then
      ColourNote("yellow", "", "Current channel echo status: ")
      for k,v in pairsByKeys(channels_table) do
         ColourTell("yellow", "", tostring(k).." ")
         ColourNote((v["echo"] and "lime") or "red", "", tostring(v["echo"] or "false"))
      end
      Note("")
   elseif toggle == "on" then
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = true
      end
      ColourNote ("yellow", "", "All chats are now", "lime", "", " shown ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled separately.")
      Note("")
   elseif toggle == "off" then
      if never_hide then
         return rejection_message()
      end
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = nil
      end
      ColourNote ("yellow", "", "All chats are now", "red", "", " hidden ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled separately.")
      Note("")
   elseif toggle == "channels" then
      local tbl = {}
      local defaults = {}
      local i = 1
      for k,v in pairsByKeys(channels_table) do
         tbl[i] = k
         defaults[i] = v["echo"]
         i = i+1
      end
      local echo_result = utils.multilistbox("Choose which channels to show in the main window.", "Channel Echo Selection", tbl, defaults)
      if echo_result then
         for i,v in ipairs(tbl) do
            channels_table[v]["echo"] = echo_result[i]
         end
      end
   elseif toggle == "nonchannels" then
      local defaults = {}
      for k,v in pairs(nonchannels_table) do
         defaults[k] = v["echo"]
      end
      local echo_result = utils.multilistbox("Choose which non-channel info to show in the main window.", "Non-Channel Info Echo Selection", init_nonchannel_pairs, defaults)
      if echo_result then
         for k,v in pairs(nonchannels_table) do
            v["echo"] = echo_result[k]
            EnableTrigger(k, not other_should_echo(k))
         end
      end
   end -- if

   SaveState()
end

function chat_echo_wrap (name, line, wildcards)
   chat_echo(Trim(wildcards[1]):lower())
end -- chat_echo

function OnPluginSaveState()
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("nonchannels_table", serialize.save("nonchannels_table"))
   if #sortedMuteList() > 0 then
      SetVariable("mute_lookup", serialize.save("mute_lookup"))
   else
      DeleteVariable("mute_lookup")
   end
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginEnable ()
   -- if we are connected when the plugin loads, it must have been reloaded while playing
   if IsConnected() then
      OnPluginConnect()
   end -- if already connected
end -- OnPluginEnable

function OnPluginClose()
   OnPluginDisable()
end

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

function OnPluginDisable()
   if IsConnected() then
      Send_GMCP_Packet("gmcpchannels off")
   end
end

function OnPluginConnect()
   Send_GMCP_Packet("gmcpchannels on")
   Send_GMCP_Packet("request char")
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
