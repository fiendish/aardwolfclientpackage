<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, June 30, 2007, 10:48  -->
<!-- MuClient version 4.13 -->

<muclient>
<plugin
   name="Aardwolf_BigMap_Graphical"
   author="Fiendish and Nick Gammon"
   id="60840c9013c7cc57777ae0ac"
   language="Lua"
   purpose="Redirects Aardwolf bigmap messages to a miniwindow"
   date_written="2009-07-26"
   requires="4.73"
   version="3.0"
   save_state="y"
>
<description trim="y">
<![CDATA[

Graphical Continent Bigmap Display
Originally a zMUD script by Fiendish
First MUSHclient port by Nick Gammon
GMCP update by Bast
Made way more awesome by Fiendish

===== COMMANDS ========>

bigmap reset         --> removes the entire cache of maps,
                       > forcing all maps to require updating again

bigmap update        --> update the current continent map

bigmap on            --> show the bigmap
bigmap off           --> hide the bigmap

bigmap merge         --> merge bigmap into the gmcp mapper
bigmap unmerge       --> split off bigmap from the gmcp mapper

]]>
</description>

</plugin>

<!--  Triggers  -->

<triggers>

<trigger
   enabled="n"
   match="^\{bigmap\}(?<zone>\d+)\,(?<zonename>.+)$"
   script="map_redirect"
   omit_from_output="y"
   name="map_start"
   sequence="100"
   regexp="y"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   match="*"
   script="map_redirect"
   name="multi_line_map"
   omit_from_output="y"
   sequence="10"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="y"
   match="^\{bigmap\}(?<zone>\d+)\,(?<zonename>.+)$"
   omit_from_output="y"
   sequence="101"
   regexp="y"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="y"
   match="^\{\/bigmap\}$"
   omit_from_output="y"
   sequence="101"
   regexp="y"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="y"
   match="^\{coords\}(?<zone>\d+)\,(?<x>\d+)\,(?<y>\d+)$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="y"
   match="^\{coords\}-1$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="12"
>
<send>StopEvaluatingTriggers(true)</send>
</trigger>

</triggers>

<aliases>
<alias
   script="OnHelp"
   match="bigmap help"
   enabled="y"
></alias>

<alias
   name="remove_alias"
   script="remove_cache"
   match="bigmap reset"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="update_map"
   match="bigmap update"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="map_on_off_alias"
   match="^bigmap( on| off| merge| unmerge)$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>

</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "mw_theme_base"
require "serialize"  -- needed to serialize table to string
require "movewindow"
require "gmcphelper"

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID (), 20) .. "telnet_options.lua")

use_exact_sizes = true
map = {}
continents = {}
xref = {}
show_map = tonumber(GetVariable("show_map")) or 1
background_colour = theme.PRIMARY_BODY
zone_name_colour = theme.BODY_TEXT
square_brush_pixels = 8
continent_dimensions = {
[0]={["w"]=60, ["h"]=40},
[1]={["w"]=60, ["h"]=15},
[2]={["w"]=60, ["h"]=40},
[3]={["w"]=30, ["h"]=40},
[4]={["w"]=30, ["h"]=50},
[5]={["w"]=60, ["h"]=55},
[6]={["w"]=30, ["h"]=30}
}
in_continent = false
use_gmcp_mapper = tonumber(GetVariable("use_gmcp_mapper")) or 1

function getCurrentState()
   return in_continent, use_gmcp_mapper, show_map
end

function OnHelp ()
   Note (GetPluginInfo (GetPluginID (), 3))
   Note("")
end

function remove_cache ()
   map = {}
   continents = {}
   xref = {}

   SetVariable ("continents", "continents = " .. serialize.save_simple (continents))
   SetVariable ("xref", "xref = " .. serialize.save_simple (xref))

   ColourNote ("white", "blue", "All bigmap cache has been cleared.")

   force_update = true
   updatelocation()
end -- remove_cache

function update_map()
   if (show_map == 1) then
      EnableTrigger("multi_line_map",false)
      EnableTrigger("map_start",true)
      SendNoEcho "bigmap noself" -- grab map
   end
end

function map_on_off_alias (name, line, wildcards)
   if (wildcards[1]:lower() == " on") then
      if (show_map == 1) then
         ColourNote("yellow", "", "Bigmap already enabled.")
      else
         show_map = 1
         ColourNote ("yellow", "", "Bigmap enabled.")
         if (mapwin == GetPluginID().."_mapper") then
            WindowShow (mapwin, true)
         else
            CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "true")
         end
         force_update = true
      end
   elseif (wildcards[1]:lower() == " off") then
      if (show_map == 0) then
         ColourNote("yellow", "", "Bigmap already disabled.")
      else
         show_map = 0
         ColourNote ("yellow", "", "Bigmap DISABLED - type 'bigmap on' to re-enable.")
         if (mapwin == GetPluginID().."_mapper") then
            WindowShow (mapwin, false)
         else
            CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "false")
         end
      end
   elseif (wildcards[1]:lower() == " merge") then
      if show_map == 0 then
         ColourNote ("yellow", "", "Bigmap is currently disabled. You will have to type 'bigmap on' for any change to occur.")
      end
      if use_gmcp_mapper == 1 then
         ColourNote ("yellow", "", "Bigmap is already merged into the mapper display.")
      else
         use_gmcp_mapper = 1
         WindowShow (mapwin, false)
         CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "true")
         ColourNote ("yellow", "", "Bigmap MERGED into the mapper display.")
      end
   elseif (wildcards[1]:lower() == " unmerge") then
      if show_map == 0 then
         ColourNote ("yellow", "", "Bigmap is currently disabled. You will have to type 'bigmap on' for any change to occur.")
      end
      if use_gmcp_mapper == 0 then
         ColourNote ("yellow", "", "Bigmap is already unmerged from the mapper display.")
      else
         use_gmcp_mapper = 0
         CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "false")
         ColourNote("yellow", "", "Bigmap UNMERGED from the mapper into its own window.")
      end
   end -- if
   SaveState()
   OnPluginInstall()
end -- map_on_off_alias

brushes = {
   ["~"] = miniwin.brush_waves_horizontal,
   ["?"] = miniwin.brush_null,
   ["^"] = miniwin.brush_waves_vertical,
   ["."] = miniwin.brush_hatch_backwards_diagonal,
}

local entrances = {
   [0] = {},
   [1] = {},
   [2] = {},
   [3] = {},
   [4] = {},
   [5] = {},
   [6] = {}
}

function Display_Styled_Line (line, styles, id)

   local left = 0
   local top = (line - 1) * (square_brush_pixels-1)
   local zone_entrances = entrances[zone]
   for j, v in ipairs (styles) do
      for i = 1, #v.text do
         local char = string.sub (v.text, i, i)
         local brush = brushes [char] or 0
         local forecolour = v.textcolour
         local backcolour = background_colour
         if brush == 0 then
            backcolour = v.textcolour
         end -- if
         if char ~= " " then
            WindowCircleOp(win, miniwin.circle_rectangle, left, top, left + square_brush_pixels, top + square_brush_pixels,
               forecolour, miniwin.pen_null, 0,   -- pen colour, null pen, pen width
               backcolour, brush)  -- brush colour, style

            -- remember locations of zone entrances
            if char == "?" then
               zone_entrances[#zone_entrances+1] = {left, top}
            end -- if
         end
         left = left + square_brush_pixels-1
      end -- for each character
   end -- for each style run
end -- Display_Styled_Line


function ConstructMap()
   if not map or #map == 0 then
      return
   end -- no map

   local lines = #map
   local columns = 0
   for _, v in ipairs (map [1]) do
      columns = columns + v.length
   end -- for
   local window_width = columns * (square_brush_pixels-1)
   local window_height =  lines * (square_brush_pixels-1)

   -- recreate the window the correct size
   WindowCreate (win,
      0,
      0,
      window_width,     -- width
      window_height,  -- height
      0,
      0,
      0x00)

   entrances[zone] = {}
   for i, v in ipairs (map) do
      Display_Styled_Line (i, v, font_id)
   end -- for
   overlay_area_entrances_on_buffer()
   WindowImageFromWindow(mapwin, "bigmap_continent_"..zone, win)

   loadCustomImage()

   WindowDelete(win)
end

function overlay_area_entrances_on_buffer()
   for _,v in ipairs(entrances[zone]) do
      WindowCircleOp(win, miniwin.circle_rectangle, v[1], v[2], v[1] + square_brush_pixels, v[2] + square_brush_pixels,
      ColourNameToRGB("cyan"),
      miniwin.pen_solid,
      2, -- line width
      0, -- backcolour
      miniwin.brush_null)
   end
end

function loadCustomImage()
   local dir = GetInfo(66)
   local imgpath = dir.."worlds\\plugins\\images\\bigmap_continent_"..zone..".png"
   local res = WindowLoadImage(win, "bigmap_continent_"..zone, imgpath)
   if (res ~= error_code.eFileNotFound and res ~= error_code.eUnableToLoadImage) then
      WindowDrawImage (win, "bigmap_continent_"..zone, 0, 0, 0, 0, 2)  -- stretch to fill
      overlay_area_entrances_on_buffer()
      WindowImageFromWindow(mapwin, "bigmap_continent_"..zone, win)
      return true
   end
   return false
end


function NoMap(messages)
   if not messages then
      messages = {"The continent bigmap will appear", "when play begins."}
   end
   if show_map ~= 1 then
      return
   end
   WindowRectOp (mapwin, 2, 0, 0, 0, 0, theme.PRIMARY_BODY)  -- blank
   for i,v in ipairs(messages) do
      local messagewidth = WindowTextWidth (mapwin, font_id, v)
      WindowText (mapwin, font_id, v, (WindowInfo(mapwin,3) - messagewidth) / 2, (WindowInfo(mapwin,4) - (3*font_height*(#messages-i))) / 2, 0, 0, zone_name_colour)
   end
   DressWindow(mapwin, font_id, "\n", "left")
   if (mapwin ~= GetPluginID().."_mapper") or not use_exact_sizes then
      AddResizeTag(mapwin, 1, nil, nil, "resize_mouse_down", "resize_move_callback", "resize_release_callback")
   end
   BroadcastPlugin(999, "repaint")
end

function DrawMap(clearHotspotsFirst)
   if show_map ~= 1 then
      return
   end
   if not zone then
      NoMap()
      return
   end
   if clearHotspotsFirst then
      WindowDeleteAllHotspots(mapwin)
   end
   local startx = 4
   local starty = (2*theme.TITLE_PADDING) + (TextHeight(mapwin, font_id) * 2) + 2
   local image_name = "bigmap_continent_"..zone
   if (mapwin == GetPluginID().."_mapper") then
      local window_width, window_height
      if not use_exact_sizes and unmerged_width ~= nil and unmerged_width ~= 0 and unmerged_height ~= nil and unmerged_height ~= 0 then
         window_width = unmerged_width
         window_height = unmerged_height
      else
         window_width = WindowImageInfo(mapwin,image_name,2) + (startx*2)
         window_height = WindowImageInfo(mapwin,image_name,3) + starty + startx
      end
      WindowResize(mapwin, window_width, window_height, background_colour)
      WindowShow (mapwin, true)
   end

   local x_correction = (WindowInfo(mapwin,3) - startx - startx) / WindowImageInfo(mapwin,image_name,2) -- stretch to x
   local y_correction = (WindowInfo(mapwin,4) - starty - startx) / WindowImageInfo(mapwin,image_name,3) -- stretch to y
   local correction = 1

   if x_correction < y_correction then
      correction = x_correction
   else
      correction = y_correction
   end

   WindowRectOp (mapwin, 2, 0, starty-2, 0, 0, background_colour)  -- blank
   WindowDrawImage (mapwin, image_name, startx, starty, startx+(correction*WindowImageInfo(mapwin,image_name,2)), starty + (correction*WindowImageInfo(mapwin,image_name,3)), 2)

   local tile_pixels_x = 1 + WindowImageInfo(mapwin,image_name,2)/continent_dimensions[zone].w
   local tile_pixels_y = 1 + WindowImageInfo(mapwin,image_name,3)/continent_dimensions[zone].h

   local our_location_x = ((x - 1) * (tile_pixels_x-1) + (tile_pixels_x / 2) )
   local our_location_y = ((y - 1) * (tile_pixels_y-1) + (tile_pixels_y / 2) )

   -- rounded rects around the player's position
   WindowCircleOp (mapwin, miniwin.circle_round_rectangle,
      startx+(correction*(our_location_x - (3*tile_pixels_x))), starty+(correction*(our_location_y - (3*tile_pixels_y)-1)),
      startx+(correction*(our_location_x + (3*tile_pixels_x)))-1, starty+(correction*(our_location_y + (3*tile_pixels_y))),
      ColourNameToRGB "cornflowerblue",  -- pen colour
      miniwin.pen_solid, -- solid pen
      3, -- pen width
      0, -- brush colour
      miniwin.brush_null, 25, 25 ) -- null brush
   WindowCircleOp (mapwin, miniwin.circle_round_rectangle,
      startx+(correction*(our_location_x - (3*tile_pixels_x))), starty+(correction*(our_location_y - (3*tile_pixels_y)-1)),
      startx+(correction*(our_location_x + (3*tile_pixels_x)))-1, starty+(correction*(our_location_y + (3*tile_pixels_y))),
      ColourNameToRGB "cyan",  -- pen colour
      miniwin.pen_solid, -- solid pen
      1, -- pen width
      0, -- brush colour
      miniwin.brush_null, 25, 25 ) -- null brush
   WindowCircleOp (mapwin, miniwin.circle_rectangle,
      startx+(correction*(our_location_x - tile_pixels_x/2)), starty+(correction*(our_location_y - tile_pixels_y/2)),
      startx+(correction*(our_location_x + tile_pixels_x/2))-1, starty+(correction*(our_location_y + tile_pixels_y/2)) - 1,
      ColourNameToRGB "cyan",  -- pen colour
      miniwin.pen_solid, -- solid pen
      2, -- pen width
      0, -- brush colour
      miniwin.brush_null ) -- null brush


   local name = continent or ""
   local coords = string.format ("Location: %2i, %2i", origx, origy)
   DressWindow(mapwin, font_id, name.."\n"..coords)
   WindowAddHotspot(mapwin, "right-click", 0, starty, 0, 0, nil, nil, nil, nil, "MouseUp", "", miniwin.cursor_hand, 0)

   if (mapwin ~= GetPluginID().."_mapper") or not use_exact_sizes then
      AddResizeTag(mapwin, 1, nil, nil, "resize_mouse_down", "resize_move_callback", "resize_release_callback")
   end
   BroadcastPlugin (999, "repaint")
end -- DrawMap

function resize_mouse_down(flags, hotspot_id)
   width, height = WindowInfo(mapwin, 3), WindowInfo(mapwin, 4)
   startx, starty = WindowInfo(mapwin, 17), WindowInfo(mapwin, 18)
end

unmerged_width = nil
unmerged_height = nil
function resize_release_callback()
   SetVariable("unmerged_width", tostring(unmerged_width))
   SetVariable("unmerged_height", tostring(unmerged_height))
   DrawMap(true)
   SaveState()
end

function resize_move_callback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo(mapwin, 17), WindowInfo(mapwin, 18)
   width = width+posx-startx
   startx = posx
   if (50 > width) then
      width = 50
      startx = WindowInfo(mapwin, 10) + width
   elseif (WindowInfo(mapwin, 10) + width > GetInfo(281)) then
      width = GetInfo(281) - WindowInfo(mapwin, 10)
      startx = GetInfo(281)
   end
   height = height + posy - starty
   starty=posy
   if (50 > height) then
      height = 50
      starty = WindowInfo(mapwin, 11) + height
   elseif (WindowInfo(mapwin, 11) + height > GetInfo(280)) then
      height = GetInfo(280) - WindowInfo(mapwin, 11)
      starty = GetInfo(280)
   end

   if (utils.timer() - lastRefresh > 0.0333) then
      WindowResize(mapwin, width, height, background_colour)
      if mapwin == GetPluginID().."_mapper" then
         unmerged_width = width
         unmerged_height = height
      end
      DrawMap()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0


function table.contains(table, element)
   for _, value in pairs(table) do
      if value == element then
         return true
      end
   end
   return false
end


function updatelocation()
   -- changed continent?
   if force_update or (old_zone ~= zone) or (in_continent ~= (oncont == 1)) then
      force_update = false
      -- grab cached map
      map = continents [zone]
      continent = xref [zone]

      -- no cached map? better get it
      if not map then
         update_map()
      end -- don't know this one
      old_zone = zone
   end -- need big map

   -- draw our location
   if continents[zone] then
      -- just in case, check again for construction
      if zone and ((WindowImageList(mapwin) == nil) or (table.contains(WindowImageList(mapwin),"bigmap_continent_"..zone) == false)) then
         ConstructMap()
      end
      DrawMap(true)
   else
      NoMap({"If the continent map doesn't show,","type: 'bigmap update'"})
   end -- if
end -- updatelocation


-- map redirector
function map_redirect (name, line, wildcards, styles)
   EnableTrigger("map_start", false)
   EnableTrigger("multi_line_map", true)  -- capture subsequent lines

   if name == "map_start" then
      map = {}  -- start new map
      continent = wildcards.zonename
      zone = tonumber (wildcards.zone)
      xref [zone] = wildcards.zonename
   elseif line == "{/bigmap}" then
      EnableTrigger ("multi_line_map", false)  -- no more lines to go

      table.remove (map, 1)  -- remove first line (the border)
      map [#map] = nil  -- remove last line (the other border)

      for _, v in ipairs (map) do
         if v [1].text == "|" then
            table.remove (v, 1)
         elseif string.match (v [1].text, "^|") then
            v [1].text = string.sub (v [1].text, 2)
            v [1].length = #v [1].text
         end -- remove first border

         if v [#v].text == "" then
            v [#v] = nil
         end

         if v [#v].text == "|" then
            v [#v] = nil
         elseif string.match (v [#v].text, "|$") then
            v [#v].text = string.sub (v [#v].text, 1, -2)
            v [#v].length = #v [#v].text
         end -- remove last border
      end -- for

      if zone then
         continents [zone] = map  -- cache it
         ConstructMap()
         ColourNote ("yellow", "", string.format("BIGMAP INFO: Constructed new continent bigmap for %s.", continent))
         SetVariable ("continents", "continents = " .. serialize.save_simple (continents))
         SetVariable ("xref", "xref = " .. serialize.save_simple (xref))
      end -- we know the continent
      if in_continent then
         DrawMap(true)
      end
   else
      table.insert (map, styles)
   end -- if
end -- function map_redirect


function right_click_menu ()
   menustring = "Bring To Front|Send To Back"
   if use_gmcp_mapper == 1 then
      menustring = menustring.."|-|Hide Continent Bigmap|Unmerge Continent Bigmap From GMCP Mapper|-|"
   else
      menustring = menustring.."|-|Hide Continent Bigmap|Merge Continent Bigmap Into GMCP Mapper|-|"
   end
   menustring = menustring..(use_exact_sizes and "+" or "").."Use Exact Image Sizes When Unmerged"
   result = WindowMenu (mapwin,
      WindowInfo (mapwin, 14), -- x position
      WindowInfo (mapwin, 15), -- y position
      menustring) -- content

   if result == "Bring To Front" then
      CallPlugin("462b665ecb569efbf261422f","boostMe", mapwin)
   elseif result == "Send To Back" then
      CallPlugin("462b665ecb569efbf261422f","dropMe", mapwin)
   elseif result == "Hide Continent Bigmap" then
      Execute("bigmap off")
   elseif result == "Merge Continent Bigmap Into GMCP Mapper" then
      Execute("bigmap merge")
   elseif result == "Unmerge Continent Bigmap From GMCP Mapper" then
      Execute("bigmap unmerge")
   elseif result == "Use Exact Image Sizes When Unmerged" then
      use_exact_sizes = not use_exact_sizes
      SetVariable("use_exact_sizes", use_exact_sizes and "1" or "0")
      DrawMap(true)
   end -- if
end -- right_click_menu

function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

require "checkplugin"
function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
   if IsPluginInstalled("b6eae87ccedd84f510b74714") then
      if not mapper_is_loaded then
         OnPluginInstall()
      end
   else
      mapper_is_loaded = false
   end
end

function OnPluginInstall ()
   if IsPluginInstalled("b6eae87ccedd84f510b74714") then
      mapper_is_loaded = true
   end

   do_init()

   if GetPluginInfo (GetPluginID (), 17) then
      OnPluginEnable ()  -- do initialization stuff
   end
end -- OnPluginInstall


function do_init()
   if show_map == 0 then
      return
   end
   bigmap_enabled = false

   assert (loadstring (GetVariable ("continents") or "")) ()
   assert (loadstring (GetVariable ("xref") or "")) ()
   use_exact_sizes = ( GetVariable("use_exact_sizes") == "1" )
   unmerged_width = tonumber(GetVariable("unmerged_width"))
   unmerged_height = tonumber(GetVariable("unmerged_height"))
   win = GetPluginID ().."_offscreen_buffer"
   mapwin = (((use_gmcp_mapper == 1 and IsPluginInstalled("b6eae87ccedd84f510b74714") and GetPluginInfo("b6eae87ccedd84f510b74714", 17)) and "b6eae87ccedd84f510b74714_mapper") or GetPluginID().."_mapper")

   windowinfo = movewindow.install(mapwin, miniwin.pos_top_left, miniwin.create_absolute_location, mapwin ~= GetPluginID().."_mapper", nil, {mouseup=MouseUp,
      mousedown=LeftClickOnly, dragmove=LeftClickOnly,
      dragrelease=LeftClickOnly},{x=0, y=0})

   if mapwin == GetPluginID().."_mapper" then
      WindowCreate (mapwin,
         windowinfo.window_left,
         windowinfo.window_top,
         not use_exact_sizes and unmerged_width or 0,     -- width
         not use_exact_sizes and unmerged_height or 0,  -- height
         windowinfo.window_mode,
         windowinfo.window_flags,
         theme.PRIMARY_BODY)
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", mapwin)
   end

   local fonts = utils.getfontfamilies ()
   if fonts.Dina then
      font_size = 8
      font_name = "Dina"    -- the actual font
   else
      font_size = 10
      font_name = "Courier"
   end -- if

   font_id = "bigmap_font"  -- our internal name
   font_id_bold = "bigmap_font_bold"  -- our internal name

   check (WindowFont (mapwin, font_id, font_name, font_size, false, false, false, false, 0, 49))  -- normal

   font_height = WindowFontInfo (mapwin, font_id, 1) -  WindowFontInfo (mapwin, font_id, 4) + 1 -- height
   font_width = WindowFontInfo (mapwin, font_id, 6)  -- avg width
   if mapwin == GetPluginID().."_mapper" then
      NoMap()
   end
end

function OnPluginSaveState ()
   SetVariable("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   SetVariable ("continents", "continents = " .. serialize.save_simple (continents))
   SetVariable ("xref", "xref = " .. serialize.save_simple (xref))
   SetVariable("use_gmcp_mapper", tostring(use_gmcp_mapper))
   SetVariable("show_map", show_map)
   if (mapwin == GetPluginID().."_mapper") and WindowInfo(mapwin, 3) then
      movewindow.save_state(mapwin)
      unmerged_width = WindowInfo(mapwin, 3)
      unmerged_height = WindowInfo(mapwin, 4)
      SetVariable("unmerged_width", unmerged_width)
      SetVariable("unmerged_height", unmerged_height)
   end
end -- function OnPluginSaveState

function OnPluginBroadcast (msg, id, name, text)
   if id == '3e7dedbe37e44942dd46d264' then
      if not bigmap_enabled then
         TelnetOptionOn(TELOPT_BIGMAP)
         bigmap_enabled = true
         if show_map == 1 and use_gmcp_mapper == 1 then
            CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "true")
         end
      end
      if text == "room.info" then
         room_info = gmcp("room.info")
         -- where we are
         origx = tonumber(room_info.coord.x)
         origy = tonumber(room_info.coord.y)
         zone = tonumber(room_info.coord.id)
         oncont = tonumber(room_info.coord.cont)
         x = origx + 1  -- make 1-relative
         y = origy + 1  -- ditto

         if zone ~= -1 and ((mapwin == GetPluginID().."_mapper") or (oncont == 1)) then
            updatelocation()
            in_continent = true
         else
            in_continent = false
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", mapwin)
   end
end

function OnPluginClose ()
   -- if enabled
   if GetPluginInfo (GetPluginID (), 17) then
      OnPluginDisable()
   end -- currently enabled
   if mapwin == GetPluginID().."_mapper" then
      WindowDelete(mapwin)
   end
end -- OnPluginClose

function OnPluginEnable ()
   if (mapwin == GetPluginID().."_mapper") then
      WindowShow (mapwin, show_map == 1)
   else
      CallPlugin("b6eae87ccedd84f510b74714", "override_continents", ((show_map == 1) and "true") or "false");
   end
   if IsConnected() then
      Send_GMCP_Packet("request room")
   end -- currently enabled
end -- OnPluginEnable

function OnPluginDisable ()
   SaveState()
   bigmap_enabled = false
   if (mapwin == GetPluginID().."_mapper") then
      WindowShow (mapwin, false)
   else
      CallPlugin("b6eae87ccedd84f510b74714", "override_continents", "false");
   end
   if IsConnected() then
      TelnetOptionOff(TELOPT_BIGMAP)
      Send_GMCP_Packet("request room")
   end -- currently enabled
end -- OnPluginDisable

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
