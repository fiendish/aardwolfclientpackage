<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, August 15, 2010, 9:25 PM -->
<!-- MuClient version 4.69 -->

<!-- Plugin "aard_health_bars_gmcp" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Health_Bars"
   author="Fiendish and Lasher"
   id="ef4a86dbc9cd4dd6f4c69385"
   language="Lua"
   purpose="GMCP Version of health bars"
   date_written="2010-08-15 21:25:03"
   requires="4.73"
   version="2.0"
   save_state="y"
>
<description trim="y">

Aardwolf GCMP based health bars

</description>
</plugin>

<aliases>
<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "mw_theme_base"

require "movewindow"
require "gauge"
require "gmcphelper"
require "serialize"
require "colors"

default_width         = 1137
default_x             = 0
default_y             = 552

local MIN_WIDTH        = 40
local LEFT_MARGIN     = 10
local TOP_MARGIN      = 6
local stacked = 0
local showLabels = 1
local reverseTNL = 1
graphicalMode = tonumber(GetVariable("graphicalMode") or 1)
local defaultShowBar = {Health={"Health:",true,"Health:",0x00ff00,0x004400}, Mana={"Mana  :",true,"Mana:",0xff5500,0x442200}, Moves={"Moves :",true,"Moves:",0x00ffff,0x004444}, TNL={"TNL   :",true,"TNL:",0xffffff,0x444444}, Enemy={"Enemy :",true,"Enemy:",0x0000ff,0x000044}, Align={"Align :",true, "Alignment:",0x0000ff,0x00ffff}}
showBar = defaultShowBar
local barIndex = {"Health", "Mana", "Moves", "TNL", "Enemy", "Align"}

thresh1active = tonumber (GetVariable("thresh1active")) or 0
thresh2active = tonumber (GetVariable("thresh2active")) or 0
thresh1percent = tonumber (GetVariable("thresh1percent")) or 40
thresh2percent = tonumber (GetVariable("thresh2percent")) or 20
thresh1color = tonumber (GetVariable("thresh1color")) or 0x00ffff
thresh2color = tonumber (GetVariable("thresh2color")) or 0x0000ff

startx     = ""
starty     = ""
posx       = ""
posy       = ""
hotspot_id = ""
page_built = false
gmcp_char = {}

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

string.lpad = function(str, len, char)
   str = tostring(str)
   if char == nil then char = ' ' end
   return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
   str = tostring(str)
   if char == nil then char = ' ' end
   return str .. string.rep(char, len - #str)
end

function reset_aard()
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, WindowInfo(win, 4), theme.PRIMARY_BODY)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   stacked = 0
   SaveState()
   OnPluginInstall()
end

function validate_percent(input)
   if string.sub(input, -1) == "%" then
      input = string.sub(input, 1,-2)
   end
   local inputNum = tonumber(input)
   if not inputNum or inputNum < 1 or inputNum > 100 or inputNum % 1 ~= 0 then
      ColourNote("white","red","'"..input.."' is not a whole number between 1 and 100. Try again.")
      return false
   end
   return true
end

function DoNextSimpleBar(bar, val, maxval, flip, stacked_label, unstacked_label)
   txt = ""
   if (showBar[bar][2] == true) then
      local num_val = tonumber(val)
      local num_maxval = tonumber(maxval)
      if showLabels == 1 then
         if stacked == 1 then
            WindowText(win, font_id, stacked_label or showBar[bar][1], xpos,  ypos, 0, 0, showBar[bar][4], false)
         else
            xpos = xpos + WindowText(win, font_id, unstacked_label or showBar[bar][3], xpos,  ypos, 0, 0, showBar[bar][4], false)
         end
      end

      if num_maxval and num_val then
         if flip then
            val = tostring(num_maxval-num_val)
            num_val = tonumber(val)
         end
         if overlay_numbers == 1 or overlay_numbers == 3 or (graphicalMode == 0 and overlay_numbers ~= 2) then
            maxlen = math.max(#maxval, #val)
            txt = string.lpad(val, maxlen, ' ').."/"..string.rpad(maxval,maxlen,' ')
         end
         if overlay_numbers == 2 or overlay_numbers == 3 then
            txt = txt..((overlay_numbers == 3 and " (") or "")..string.lpad(string.format('%u',100*num_val/num_maxval).."%",4,' ')..((overlay_numbers == 3 and ")") or "")
         end
      end

      if graphicalMode == 1 then
         local color1 = showBar[bar][4]
         local color2 = showBar[bar][5]
         if bar == "Health" then
            local hpPercent = 100
            if num_val and num_maxval then
               hpPercent = 100* (num_val / num_maxval)
            end
            if thresh1active == 1 then
               if hpPercent < thresh1percent then
                  color1 = thresh1color
                  color2 = thresh1color
               end
            end
            if thresh2active == 1 then
               if hpPercent < thresh2percent then
                  color1 = thresh2color
                  color2 = thresh2color
               end
            end
         end
         gauge(win,showBar[bar][3],num_val,num_maxval,xpos+label_width,ypos,bar_width,line_height,color1,0x000000,num_ticks,0x000000,color2,nil,flat_gauges==1)
         if overlay_numbers ~= 0 then
            txtlen = WindowTextWidth(win,font_id,txt)
            outlined_text(win, font_id, txt, xpos+label_width+((bar_width-txtlen)/2), ypos, 0, 0, 0xeeeeee, utf8)
         end
      else
         xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " ["..txt.."]", xpos+label_width, ypos, 0, 0, showBar[bar][4], false)
      end

      if stacked == 1 then
         ypos = ypos + line_height + 1
      else
         xpos = xpos+(graphicalMode*bar_width)+LEFT_MARGIN
      end
   end
end

function DisplayStatsPage()

   WindowRectOp(win, 2, 0, 0, 0, 0, theme.PRIMARY_BODY) -- blank

   if not page_built then
      if stacked == 1 then
         local txt = "Status bars will appear"
         local txtlen = WindowTextWidth(win,font_id,txt)
         WindowText (win, font_id, txt, (effectiveWidth-txtlen)/2, (height/2)-line_height, 0, 0, theme.BODY_TEXT, false)
         txt = "when play begins."
         txtlen = WindowTextWidth(win,font_id,txt)
         WindowText (win, font_id, txt, (effectiveWidth-txtlen)/2, height/2, 0, 0, theme.BODY_TEXT, false)
      else
         local txt = "Status bars will appear when play begins."
         local txtlen = WindowTextWidth(win,font_id,txt)
         WindowText (win, font_id, txt, (effectiveWidth-txtlen)/2, (height-line_height)/2, 0, 0, theme.BODY_TEXT, false)
      end
   else -- Only draw bars if we have data.

      local barTexts = ""
      ypos = TOP_MARGIN
      xpos = LEFT_MARGIN
      label_width = 0
      bar_width = 0
      num_ticks = 3
      if overlay_numbers ~= 0 then
         num_ticks = 0
      end

      -- count up the bars we're going to use

      if stacked == 1 then
         if showLabels == 1 then
            label_width = WindowTextWidth(win, font_id, "WWWWWW:")
         end
         bar_width = math.max(1, effectiveWidth-label_width-LEFT_MARGIN*2)
      else
         for i,v in pairs(showBar) do
            if (v[2] == true) then
               barTexts = barTexts..v[3]
            end
         end
         if showLabels == 1 then
            bar_width = math.max(1, (effectiveWidth-WindowTextWidth(win, font_id, barTexts)-LEFT_MARGIN)/numBars-LEFT_MARGIN)
         else
            bar_width = math.max(1, (effectiveWidth-LEFT_MARGIN)/numBars-LEFT_MARGIN)
         end
      end

      DoNextSimpleBar("Health", gmcp_char.vitals.hp, gmcp_char.maxstats.maxhp)
      DoNextSimpleBar("Mana", gmcp_char.vitals.mana, gmcp_char.maxstats.maxmana)
      DoNextSimpleBar("Moves", gmcp_char.vitals.moves, gmcp_char.maxstats.maxmoves)

      local tnl = gmcp_char.status.tnl
      local perlevel = gmcp_char.base.perlevel
      -- switch from "to next level" to "current level experience"
      if (reverseTNL == 0) then
         DoNextSimpleBar("TNL", tnl, perlevel)
      else
         DoNextSimpleBar("TNL", tnl, perlevel, true, "Exp   :", "Exp:")
      end

      bar = "Enemy"
      if (showBar[bar][2] == true) then
         fighting = gmcp_char.status.enemy
         if fighting ~= "" then
            enemypct = gmcp_char.status.enemypct
            if enemypct ~= "" then
               if showLabels == 1 then
                  if stacked == 1 then
                     WindowText(win, font_id, showBar[bar][1], xpos,  ypos, 0, 0, showBar[bar][4], false)
                  else
                     xpos = xpos + WindowText(win, font_id, showBar[bar][3], xpos,  ypos, 0, 0, showBar[bar][4], false)
                  end
               end
            end
            if graphicalMode == 1 then
               gauge(win,showBar[bar][3],tonumber(enemypct),100,xpos+label_width,ypos,bar_width,line_height,showBar[bar][4],0x000000,num_ticks,0x000000,showBar[bar][5],nil,flat_gauges==1)
               if overlay_numbers ~= 0 then
                  txt = string.lpad(enemypct.."%", 4, ' ')
                  txtlen = WindowTextWidth(win,font_id,txt)
                  outlined_text(win, font_id, txt, xpos+label_width+((bar_width-txtlen)/2), ypos, 0, 0, 0xeeeeee, utf8)
               end
            else
               xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " ["..string.format("%3d",enemypct).."%]", xpos+label_width, ypos, 0, 0, showBar[bar][4], false)
            end
         else
            if showLabels == 1 then
               if stacked == 1 then
                  WindowText(win, font_id, showBar[bar][1], xpos, ypos, 0, 0, 0x444444, false)
               else
                  xpos = xpos + WindowText(win, font_id, showBar[bar][3], xpos, ypos, 0, 0, 0x444444, false)
               end
            end
            if graphicalMode == 1 then
               gauge(win,showBar[bar][3],tonumber(0),100,xpos+label_width,ypos,bar_width,line_height,0x444444,0x000000,num_ticks,0x000000,0x222222,nil,flat_gauges==1)
            else
               xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " [    ]", xpos+label_width, ypos, 0, 0, 0x444444, false)
            end
         end
         if stacked == 1 then
            ypos = ypos + line_height + 1
         else
            xpos = xpos+(graphicalMode*bar_width)+LEFT_MARGIN
         end
      end

      bar = "Align"
      if (showBar[bar][2] == true) then
         alignment = tonumber(gmcp_char.status.align)
         if alignment ~= nil then
            zeroed_alignment = alignment+2500
            bar_colour = ((zeroed_alignment<=1625 and showBar[bar][4]) or ((zeroed_alignment>=3375 and showBar[bar][5]) or 0xcccccc))
            if bar_colour ~= prev_bar_colour then
               local bch = string.format("%06X", bar_colour)
               local reverse = "#"..bch:sub(5,6)..bch:sub(3,4)..bch:sub(1,2)
               local c = colors.new(reverse):hue_offset(-15):lighten_by(0.60):to_rgb()
               dark_bar_colour = ColourNameToRGB(c)
            end
            prev_bar_colour = bar_colour
            if showLabels == 1 then
               if stacked == 1 then
                  WindowText(win, font_id, showBar[bar][1], xpos,  ypos, 0, 0, bar_colour, false)
               else
                  xpos = xpos + WindowText(win, font_id, showBar[bar][3], xpos,  ypos, 0, 0, bar_colour, false)
               end
            end
            if graphicalMode == 1 then
               WindowLine (win, xpos+label_width+math.max(0,line_height/2), math.ceil(ypos+line_height/2), xpos+label_width+math.max(0,bar_width-line_height/2), math.ceil(ypos+line_height/2), bar_colour, 0+0x0200, 2)
               WindowCircleOp (win, 1, xpos+label_width+(zeroed_alignment/5000)*(bar_width-line_height), ypos, xpos+label_width+(zeroed_alignment/5000)*(bar_width-line_height)+line_height, ypos+line_height, dark_bar_colour, 0, 2, bar_colour, 0)

               -- add ticks at alignment change boundaries
               local tick_1 = xpos + label_width + (-874 + 2500) / 5000 * (bar_width);
               local tick_2 = xpos + label_width + (874 + 2500) / 5000 * (bar_width);
               WindowLine (win, tick_1, ypos, tick_1, ypos+line_height, bar_colour, 0+0x0200, 2)
               WindowLine (win, tick_2, ypos, tick_2, ypos+line_height, bar_colour, 0+0x0200, 2)
            else
               xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " ["..string.format("%5s",alignment).."]", xpos+label_width, ypos, 0, 0, bar_colour, false)
            end
            if stacked == 1 then
               ypos = ypos + line_height + 1
            else
               xpos = xpos+(graphicalMode*bar_width)+LEFT_MARGIN
            end
         end
      end
   end

   DressWindow(win, nil, nil)
   AddResizeTag(win, 1, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")

   BroadcastPlugin(999, "repaint")
end -- DisplayStatsPage

-- right click menu
function right_click_menu ()
   menustring ="!Change Font|"
   if showLabels == 1 then
      menustring = menustring.."Hide Labels|"
   else
      menustring = menustring.."Show Labels|"
   end
   if stacked == 1 then
      menustring = menustring.."Un-stack Bars|"
   else
      menustring = menustring.."Stack Bars|"
   end
   local activeBars = ""
   for i,v in ipairs(barIndex) do
      if (showBar[v][2] == true) then
         activeBars = activeBars.."+"..v.."|"
      else
         activeBars = activeBars..""..v.."|"
      end
   end
   menustring = menustring .. ">Activate/De-activate|"..activeBars.."<|"
   menustring = menustring .. ">Configure Colors|>Health|Main|Border|<|>Mana|Main|Border|<|>Moves|Main|Border|<|>TNL|Main|Border|<|>Enemy|Main|Border|<|>Align|Evil|Good|<|<|"
   menustring = menustring .. ">HP Thresholds|>First|"..(((thresh1active == 1) and "+") or "").."Activate|Set Percent ("..thresh1percent.."%)|Set Color ("..RGBColourToName(thresh1color)..")|<|>Second|"..(((thresh2active == 1) and "+") or "").."Activate|Set Percent ("..thresh2percent.."%)|Set Color ("..RGBColourToName(thresh2color)..")|<|<|"
   menustring = menustring .. ((reverseTNL==1 and "+") or "").."Reverse TNL|-|"..((graphicalMode==0 and "+") or "").."Text Mode|"..((flat_gauges==1 and "+") or "").."Use Flat Gauges|>Overlay Numbers|"..((overlay_numbers==0 and "+") or "").."None"..(((graphicalMode==0) and " (Same as \"Standard\" in Text Mode)") or "").."|"..((overlay_numbers==1 and "+") or "").."Standard|"..((overlay_numbers==2 and "+") or "").."Percentages|"..((overlay_numbers==3 and "+") or "").."Standard+Percentages|<|-|Bring To Front|Send To Back|-|>(In case of emergency)|Reduce Size|<|"

   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content
   if result ~= "" then
      numResult = tonumber(result)
      if numResult == 1 then
         -- change font
         wanted_font = utils.fontpicker (font_name, font_size) --font dialog
         if wanted_font then
            font_name = wanted_font.name
            font_size = wanted_font.size
         end
      elseif numResult == 2 then
         -- show/hide labels
         showLabels = (((showLabels == 0) and 1) or 0)
      elseif numResult == 3 then
         -- stack/unstack bars
         if stacked == 1 then
            stacked = 0
            height = line_height+(TOP_MARGIN*2)
         else
            stacked = 1
            height = ((line_height+1)*numBars)+(TOP_MARGIN*2)
         end
      elseif numResult >= 4 and numResult <= 9 then
         -- activate/de-activate
         showBar[barIndex[numResult-3]][2] = not showBar[barIndex[numResult-3]][2]
      elseif numResult >= 10 and numResult <= 21 then
         -- change colors
         local colourIndex = 4
         if (numResult % 2 == 1) then
            colourIndex = 5
         end
         local newcolour = PickColour (showBar[barIndex[math.ceil((numResult-9)/2)]][colourIndex])
         if newcolour ~= -1 then
            showBar[barIndex[math.ceil((numResult-9)/2)]][colourIndex] = newcolour
         end
      elseif numResult == 22 then
         thresh1active = (((thresh1active == 0) and 1) or 0)
      elseif numResult == 23 then
         local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #1", thresh1percent, nil, nil, {validate=validate_percent})
         if perc then
            if string.sub(perc, -1) == "%" then
               perc = string.sub(perc, 1,-2)
            end
            thresh1percent = tonumber(perc)
         end
      elseif numResult == 24 then
         local newColor = PickColour (thresh1color)
         if newcolor ~= -1 then
            thresh1color = newColor
         end
      elseif numResult == 25 then
         thresh2active = (((thresh2active == 0) and 1) or 0)
      elseif numResult == 26 then
         local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #2", thresh2percent, nil, nil, {validate=validate_percent})
         if perc then
            if string.sub(perc, -1) == "%" then
               perc = string.sub(perc, 1,-2)
            end
            thresh2percent = tonumber(perc)
         end
      elseif numResult == 27 then
         local newColor = PickColour (thresh2color)
         if newcolor ~= -1 then
            thresh2color = newColor
         end
      elseif numResult == 28 then
         -- reverse tnl
         reverseTNL = (((reverseTNL == 0) and 1) or 0)
      elseif numResult == 29 then
         -- text mode
         graphicalMode = (((graphicalMode == 0) and 1) or 0)
      elseif numResult == 30 then
         flat_gauges = (((flat_gauges == 0) and 1) or 0)
      elseif numResult == 31 then
         overlay_numbers = 0
      elseif numResult == 32 then
         overlay_numbers = 1
      elseif numResult == 33 then
         overlay_numbers = 2
      elseif numResult == 34 then
         overlay_numbers = 3
      elseif numResult == 35 then
         -- bring to front
         CallPlugin("462b665ecb569efbf261422f","boostMe", win)
      elseif numResult == 36 then
         -- send to back
         CallPlugin("462b665ecb569efbf261422f","dropMe", win)
      elseif numResult == 37 then
         -- reduce size
         font_name = default_font_name
         font_size = default_font_size
         width = MIN_WIDTH
      end -- if

      SaveState()
      OnPluginInstall()
   end
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)

   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         page_built = false
         return
      end

      if (text == "char.base" or text == "char.vitals" or text == "char.status" or text == "char.maxstats") then
         if text == "char.base" then
            gmcp_char.base = gmcp("char.base")
         elseif text == "char.vitals" then
            gmcp_char.vitals = gmcp("char.vitals")
         elseif text == "char.status" then
            gmcp_char.status = gmcp("char.status")
         else
            gmcp_char.maxstats = gmcp("char.maxstats")
         end

         if gmcp_char.base and gmcp_char.vitals and gmcp_char.status and gmcp_char.maxstats then
            page_built = true
            DisplayStatsPage()
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end


---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_WIDTH) then
      width = MIN_WIDTH
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end

   if (utils.timer() - lastRefresh > 0.0333) then
      resize_window()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
   resize_window()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo(win, 17), WindowInfo(win, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   -- save window current location for next time
   movewindow.save_state(win)
   barTexts = ""
   SetVariable("stacked", stacked)
   SetVariable("showLabels", showLabels)
   SetVariable("reverseTNL", reverseTNL)
   SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable("width", width)
   SetVariable("font_name", font_name)
   SetVariable("font_size", font_size)
   SetVariable("showBar", serialize.save ("showBar"))
   SetVariable("graphicalMode", graphicalMode)
   SetVariable("flat_gauges", flat_gauges)
   SetVariable("overlay_numbers", overlay_numbers)
   SetVariable("thresh1active", thresh1active)
   SetVariable("thresh2active", thresh2active)
   SetVariable("thresh1percent", thresh1percent)
   SetVariable("thresh2percent", thresh2percent)
   SetVariable("thresh1color", thresh1color)
   SetVariable("thresh2color", thresh2color)
end -- OnPluginSaveState

function OnPluginClose()
   WindowDelete(win)
end

function OnPluginDisable()
   SaveState()
   WindowShow(win, false)
end --  OnPluginDisable

function OnPluginEnable()
   WindowShow(win, true)
   SaveState()
end -- OnPluginEnable


win = GetPluginID()

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function OnPluginWorldOutputResized()
   if (installed == true) and (((GetInfo(281)-windowinfo.window_left) > effectiveWidth) or ((GetInfo(281)-windowinfo.window_left) < width)) then
      resize_window()
   end
end

function OnPluginInstall()
   width      = tonumber(GetVariable("width")) or default_width
   stacked    = tonumber(GetVariable("stacked")) or stacked
   showLabels = tonumber(GetVariable("showLabels")) or showLabels
   reverseTNL = tonumber(GetVariable("reverseTNL")) or reverseTNL
   flat_gauges = tonumber(GetVariable("flat_gauges")) or 0
   overlay_numbers = tonumber (GetVariable("overlay_numbers")) or 1
   showBar = defaultShowBar
   assert (loadstring (GetVariable ("showBar") or "")) ()

   barTexts = ""
   numBars = 0
   for i,v in pairs(showBar) do
      if (v[2] == true) then
         barTexts = barTexts..v[3]
         numBars = numBars + 1
      end
   end

   local fonts = utils.getfontfamilies()

   -- if Dina not there already, add it
   if not fonts.Dina then
      AddFont(GetInfo(66) .. "\\Dina.fon")
      fonts = utils.getfontfamilies()
   end

   if fonts["Dina"] then
      default_font_size = 8
      default_font_name = "Dina"
   elseif fonts["Courier New"] then
      default_font_size = 9
      default_font_name = "Courier New"
   else
      default_font_size = 9
      default_font_name = "Lucida Console"
   end

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   windowinfo = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, 60, windowinfo.window_mode, windowinfo.window_flags, theme.SECONDARY_BODY)

   font_id = "statmon_font"
   WindowFont(win, font_id, font_name, font_size, false, false, false, false, 0) -- normal font
   line_height = WindowFontInfo(win, font_id, 1) -  WindowFontInfo(win, font_id, 4) + 2

   MIN_WIDTH = math.max(40, WindowTextWidth(win, font_id, "WWWWWW:")+(LEFT_MARGIN*2))

   if stacked == 1 then
      height = (TOP_MARGIN*2) + (numBars*(line_height+1))
   else
      if showLabels == 1 then
         MIN_WIDTH = math.max(40, WindowTextWidth(win, font_id, barTexts)+(LEFT_MARGIN*(numBars+2)))
      end
      height = (TOP_MARGIN*2) + line_height
   end

   width = math.max(width, MIN_WIDTH)

   resize_window()

   if IsConnected() then
      Send_GMCP_Packet("request char")
   end

   installed = true
   WindowShow(win, true)
end

function resize_window()
   effectiveWidth = math.max(MIN_WIDTH, math.min(width, GetInfo(281)-windowinfo.window_left))

   WindowResize(win, effectiveWidth, height, theme.SECONDARY_BODY)
   movewindow.add_drag_handler(win, 0, 0, 0, 0)

   DisplayStatsPage()
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
