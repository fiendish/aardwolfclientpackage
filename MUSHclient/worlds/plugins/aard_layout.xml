<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 27, 2010, 6:32 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "aard_layout" generated by Plugin Wizard -->

<muclient>

<plugin
   name="Aardwolf_Main_Layout"
   author="Fiendish"
   id="c293f9e7f04dde889f65cb90"
   language="Lua"
   purpose="Layout Aardwolf Main Screen"
   date_written="2010-08-27 18:32:06"
   requires="4.56"
   version="1.0"
   save_state="y"
>
</plugin>

<aliases>

<alias
   script="LayoutCommand"
   match="^aard layout( lock| unlock| save| forget| restore| list| help| reset)?( .*)?"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="reset_main"
   match="resetmain"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   name="resetaard"
   script="reset_aard"
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "mw_theme_base"
require "scrollbar"

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

default_top = 139
default_bottom = 545
default_left = 7
default_right = 650

-- Variables not saved.
startx           = ""
starty           = ""
posx             = ""
posy             = ""
hotspot_id       = ""
orig_height      = 400  -- saves old height when we collapse window.

require "serialize"

function LayoutHelp()
   print("")
   print("Aardwolf MUSHclient Layout Command Help")
   print("--------------------------------------------------------------------------------")
   print("aard layout lock               :  prevent dragging miniwindows")
   print("aard layout unlock             :  allow dragging miniwindows")
   print("aard layout save <keyword>     :  store the current layout as the given keyword")
   print("aard layout restore <keyword>  :  restore the layout for the given keyword")
   print("aard layout forget <keyword>   :  forget the layout for the given keyword")
   print("aard layout list               :  list all stored layout keywords")
   print("aard layout help               :  show this command help")
   print("aard layout reset              :  like resetaard, but better")
   print("")
   LockStatus()
   print("")
end

function LockStatus()
   print("Current layout lock status:", ((GetVariable("lock_down_miniwindows") == "1") and "LOCKED") or "UNLOCKED")
end

function LayoutCommand(name, line, wildcards)
   if wildcards[1] == " lock" then
      SetVariable("lock_down_miniwindows", "1")
      LockStatus()
   elseif wildcards[1] == " unlock" then
      SetVariable("lock_down_miniwindows", "0")
      LockStatus()
   elseif wildcards[1] == " save" then
      key = Trim(wildcards[2])
      if key ~= "" then
         LayoutStore(key)
      else
         LayoutHelp()
      end
   elseif wildcards[1] == " restore" then
      key = Trim(wildcards[2])
      if key ~= "" then
         LayoutRestore(key)
      else
         LayoutHelp()
      end
   elseif wildcards[1] == " list" then
      LayoutList()
   elseif wildcards[1] == " forget" then
      key = Trim(wildcards[2])
      if key ~= "" then
         LayoutForget(key)
      else
         LayoutHelp()
      end
   elseif wildcards[1] == " reset" then
      reset_main()
      EnableAlias("resetaard", false)
      Execute("resetaard")
      EnableAlias("resetaard", true)
   elseif wildcards[1] == "" or wildcards[1] == " help" then
      LayoutHelp()
   end
end

function FetchLayouts()
   loadstring("_layouts = "..(GetVariable("all_layouts") or "{}"))()
   return _layouts
end

function LayoutList()
   all_layouts = FetchLayouts()

   numlayouts = 0
   for k,v in pairs(all_layouts) do
      numlayouts = numlayouts + 1
   end

   print("")
   if numlayouts > 0 then
      print("Available layout keys are:")
      print("--------------------------")
      for key,layout in pairs(all_layouts) do
         print(key)
      end
   else
      print("No layouts have been saved yet.")
   end
   print("")
end

function LayoutForget(key)
   all_layouts = FetchLayouts()
   if all_layouts[key] then
      all_layouts[key] = nil
      SetVariable("all_layouts", serialize.save_simple(all_layouts))
      print("Layout with key '"..key.."' has been forgotten.")
   else
      print("No layout found for key '"..key.."'.")
   end
end

function LayoutStore(key)
   all_layouts = FetchLayouts()
   miniwindows = WindowList()
   if miniwindows then
      current_layout = {
         ["aard_layout_trect"] = {
               ["trleft"] = textrect_left,
               ["trright"] = textrect_right,
               ["trtop"] = textrect_top,
               ["trbottom"] = textrect_bottom
         }
      }
      for _,mwid in ipairs(miniwindows) do
         current_layout[mwid] = {
            ["left"] = WindowInfo(mwid, 10),
            ["top"] = WindowInfo(mwid, 11),
            ["width"] = WindowInfo(mwid, 3),
            ["height"] = WindowInfo(mwid, 4)
         }
      end
      all_layouts[key] = current_layout
      SetVariable("all_layouts", serialize.save_simple(all_layouts))
      print("Current layout stored as key '"..key.."'.")
   else
      print("No miniwindows found. Not saving layout '"..key.."'.")
   end -- if any
end

function LayoutRestore(key)
   all_layouts = FetchLayouts()
   layout = all_layouts[key]
   if layout then
      -- do the main output rect
      trect = layout["aard_layout_trect"]
      textrect_left = trect["trleft"]
      textrect_right = trect["trright"]
      textrect_top = trect["trtop"]
      textrect_bottom = trect["trbottom"]
      SaveLayout()
      check_geometry()
      draw_main_window()
      -- do the other plugins
      CallPlugin("abc1a0944ae4af7586ce88dc", "pause") -- repaint buffer plugin
      local plugins_to_reload = {}
      for mwid,rect in pairs(layout) do
         if mwid ~= "aard_layout_trect" then
            local pid = WindowInfo(mwid, 23)
            if pid and (pid ~= GetPluginID()) then
               if rect["left"] ~= WindowInfo(mwid, 10) or rect["top"] ~= WindowInfo(mwid, 11) or rect["width"] ~= WindowInfo(mwid, 3) or rect["height"] ~= WindowInfo(mwid, 4) then
                  WindowResize(mwid, rect["width"], rect["height"], WindowInfo(mwid, 9))
                  WindowPosition(mwid, rect["left"], rect["top"], WindowInfo(mwid, 7), WindowInfo(mwid, 8))
                  plugins_to_reload[pid] = true
               end
            end
         end
      end
      Repaint() -- hack because WindowPosition doesn't immediately update coordinates
      for pid,_ in pairs(plugins_to_reload) do
         CallPlugin(pid, "SaveState")
         local a, b = CallPlugin(pid, "OnPluginThemeChange")
         CallPlugin(pid, "SaveState")
         if not ((a == error_code.eOK) and b) then
            CallPlugin(pid, "Theme.just_reloading")
            ReloadPlugin(pid)
         end
      end
      CallPlugin("abc1a0944ae4af7586ce88dc", "resume") -- repaint buffer plugin
      print("Layout for key '"..key.."' has been restored.")
   else
      print("No layout found for key '"..key.."'.")
   end
end

function ResizeMainCallback(flags)
   if (bit.band(flags, 0x20) ~= 0) or (GetVariable("lock_down_miniwindows") == "1") then
      return
   end
   end_startup_check()

   local font_height = GetInfo(212)
   local MIN_SIZE = (12 * font_height) + 1

   posx, posy = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   textrect_right = textrect_right + posx - startx
   startx = posx
   if ( textrect_right-textrect_left < MIN_SIZE) then
      textrect_right = textrect_left+MIN_SIZE
      startx = textrect_right
   elseif (textrect_right > GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      startx = textrect_right
   end

   textrect_bottom = textrect_bottom + posy - starty
   starty = posy
   if ( textrect_bottom-textrect_top < MIN_SIZE) then
      textrect_bottom = textrect_top+MIN_SIZE
      starty = textrect_bottom
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      starty = textrect_bottom
   end

   if (utils.timer() - lastRefresh > 0.0333) then
      draw_main_window()
      lastRefresh = utils.timer()
   end
end
lastRefresh = 0

function DragMainCallback()
   if GetVariable("lock_down_miniwindows") == "1" then
      return
   end
   end_startup_check()
   posx, posy = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   local height = GetInfo(293) - GetInfo(291)
   local width = GetInfo(292) - GetInfo(290)

   textrect_left = textrect_left + posx - startx
   textrect_right = textrect_left + width
   if (textrect_left <= 7) then
      textrect_left = 7
      textrect_right = textrect_left + width
   elseif (textrect_right >= GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      textrect_left = textrect_right - width
   else
      startx = posx
   end

   textrect_top = textrect_top + posy - starty
   textrect_bottom = textrect_top+height
   starty = posy
   if (textrect_top < 7) then
      textrect_top = 7
      starty = textrect_top
      textrect_bottom = textrect_top+height
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      textrect_top = textrect_bottom-height
      starty = textrect_top
   end

   draw_main_window()
end


---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseMainCallback(flags)
   if bit.band(flags, 0x20) == 0 then
      SaveLayout()
   end
   draw_main_window()
end

function DragReleaseMainCallback()
   SaveLayout()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == textResizer.."_resize") then
      startx, starty = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
      if bit.band(flags, 0x20) ~= 0 then
         local result = WindowMenu(textResizer, WindowInfo(textResizer, 14), WindowInfo(textResizer, 15), "!"..(GetInfo(120) and "+" or "").."Show exterior scrollbar -->")
         if result == "1" then
            SetVariable("hide_main_scroll", tostring(GetInfo(120)))
            SetScroll(-2, not GetInfo(120))
         end
      end
   elseif (hotspot_id == "dragmain") then
      startx, starty = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function SaveLayout()
   SetVariable("trleft", textrect_left)
   SetVariable("trright", textrect_right)
   SetVariable("trtop", textrect_top)
   SetVariable("trbottom", textrect_bottom)
end

function SaveEnabled()
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
end

function reset_aard()
   reset_main()
   LayoutHelp()
end

function reset_main()
   textrect_left = default_left
   textrect_right = default_right
   textrect_top = default_top
   textrect_bottom = default_bottom
   SaveLayout()
   check_geometry()
   draw_main_window()
end

function OnPluginClose()
   TextRectangle(0,0,0,0,
      5,  -- BorderOffset,
      ColourNameToRGB ("darkgray"),    -- BorderColour,
      2,  -- BorderWidth,
      ColourNameToRGB ("darkslategray"),  -- OutsideFillColour,
      0) -- OutsideFillStyle (solid)
   SetBackgroundImage("",0)
   WindowDelete(textDragger)
   WindowDelete(textResizer)
   WindowDelete(bgwin)
end

function OnPluginDisable ()
   OnPluginClose()
   SaveEnabled()
end --  OnPluginDisable

function OnPluginEnable ()
   SaveEnabled()
   OnPluginInstall()
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall()
   --- Get a unique name for main window and resizer window.
   win = "      "..GetPluginID()  -- get a unique name
   textDragger = win.."txtdragger"
   textResizer = win.."txtresize"
   bgwin = win.."text_background"
   bgoffscreen = win.."text_background_offscreen"
   image_ratio, prev_l, prev_t, prev_b, sb = nil, nil, nil, nil, nil

   local dir = GetInfo(66)
   local imgpath = "-"

   if type(Theme.bg_texture_function) == "function" then
      imgpath = Theme.bg_texture_function()
   end

   if 0 ~= SetBackgroundImage(imgpath, 13) then
      imgpath = dir.."worlds\\plugins\\images\\bg1.png"
      -- add some theme coloring to the background
      WindowCreate("WiLl_It_BlEnD", 0, 0, 0, 0, 0, 0, Theme.SECONDARY_BODY)
      WindowLoadImage("WiLl_It_BlEnD", "tExTuRe", imgpath)
      local tw = WindowImageInfo("WiLl_It_BlEnD", "tExTuRe", 2)
      local th = WindowImageInfo("WiLl_It_BlEnD", "tExTuRe", 3)
      WindowResize("WiLl_It_BlEnD", tw, th, Theme.SECONDARY_BODY)
      WindowImageFromWindow("WiLl_It_BlEnD", "cOlOr", "WiLl_It_BlEnD")
      WindowDrawImage("WiLl_It_BlEnD", "tExTuRe", 0, 0, 0, 0, 1)
      WindowBlendImage("WiLl_It_BlEnD", "cOlOr", 0, 0, 0, 0, 12, 0.3)

      imgpath = dir.."worlds\\plugins\\images\\temp_theme_blend.png"
      WindowWrite("WiLl_It_BlEnD", imgpath)
      WindowDelete("WiLl_It_BlEnD")
   end

   if 0 ~= SetBackgroundImage(imgpath, 13) then
      ColourNote("yellow","red","Error loading background image.")
   end

   local bgcolor = Theme.PRIMARY_BODY
   WindowCreate (bgwin, 0, 0, 0, 0, 12, 3, bgcolor)
   WindowCreate (bgoffscreen, 0, 0, 0, 0, 12, 3, bgcolor)

   local logopath = dir .. "worlds\\plugins\\images\\aardbg13.png"
   if WindowLoadImage (bgoffscreen, "wolf_logo", logopath) == 0 then
      WindowResize (bgoffscreen, WindowImageInfo(bgoffscreen, "wolf_logo", 2), WindowImageInfo(bgoffscreen, "wolf_logo", 3), bgcolor)
      WindowDrawImageAlpha (bgoffscreen, "wolf_logo", 0, 0, 0, 0, Theme.LOGO_OPACITY)
      WindowImageFromWindow(bgwin, "wolf_logo", bgoffscreen)
      image_ratio = WindowImageInfo(bgwin, "wolf_logo", 2)/WindowImageInfo(bgwin, "wolf_logo", 3)
   end

   WindowDelete(bgoffscreen)

   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time

   --- init display
   check_geometry()

   -- give main world window time to stabilize its size and position
   startup_time = utils.timer()
   AddTimer("startupCheckTimer", 0, 0, 0.3, "", timer_flag.Enabled + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_geometry")
   -- ten seconds is probably overkill, but it should be pretty harmless
   DoAfterSpecial(10, 'end_startup_check()', sendto.script)

   if GetVariable("scrollbar_hidden_once") ~= "true" then
      SetScroll(-2, false)
      SetVariable("hide_main_scroll", "true")
      SetVariable("scrollbar_hidden_once", "true")
   end

   SetScroll(-2, GetVariable("hide_main_scroll") ~= "true")
   SaveState()
end

function end_startup_check()
   DeleteTimer("startupCheckTimer")
end

function check_geometry()
   if (GetOption("auto_resize_command_window") == 1) and (GetCommand() == "") then
      SetCommandWindowHeight((GetOption("auto_resize_minimum_lines") * GetInfo(214)) + 4)
   end

   local windowbottom, windowright = GetInfo(280), GetInfo(281)
   textrect_top = math.max(0, tonumber(GetVariable("trtop")) or default_top)
   textrect_bottom = math.min(windowbottom, tonumber(GetVariable("trbottom")) or default_bottom)
   textrect_left = math.max(0, tonumber(GetVariable("trleft")) or default_left)
   textrect_right = math.min(windowright, tonumber(GetVariable("trright")) or default_right)
   if prevwindowbottom ~= windowbottom or prevwindowright ~= windowright then
      draw_main_window()
      prevwindowbottom, prevwindowright = windowbottom, windowright
   end
end

function scrollMain(step)
   local new_pos = (step-1) * GetInfo(212)
   if new_pos ~= GetInfo(296) then
      SetScroll(new_pos, GetInfo(120))
   end
end

-- when something is added to output
function OnPluginScreendraw(type, log, line)
   add_main_resizer()
end

-- when output area moves
function OnPluginDrawOutputWindow(a, b, c)
   if cur_scroll_position ~= GetInfo(296) then  -- current position different from previous
      add_main_resizer()
   end
end

function add_main_resizer()
   if textResizer == nil then
      return
   end
   local l = GetInfo(274) + GetInfo(276)
   local t = GetInfo(273) - GetInfo(276) - 1
   local b = GetInfo(275) + GetInfo(276) + 1

   cur_scroll_position = GetInfo(296)
   local total_output_lines = GetInfo(224)
   local text_rectangle_height = GetInfo(293) - GetInfo(291)
   local font_height = GetInfo(212)
   local text_rectangle_lines = math.ceil(text_rectangle_height / font_height)
   local cur_scroll_line = math.ceil(cur_scroll_position / font_height) + 1
   local max_scroll_position = ((total_output_lines-1) * font_height) - text_rectangle_height
   if cur_scroll_position >= max_scroll_position then
      cur_scroll_line = total_output_lines - text_rectangle_lines + 1
   end

   if WindowInfo(textResizer, 1) then -- if it already exists
      --- Reposition the resize tag.
      WindowPosition(textResizer, l, t, 0, 18)
      WindowResize(textResizer, Theme.RESIZER_SIZE + 4, b-t, Theme.CLICKABLE)
   else
      -- Add another mini-window in bottom right corner for resizer tag.
      WindowCreate(textResizer,
         l, t, Theme.RESIZER_SIZE + 4, b-t,
         12, miniwin.create_absolute_location,
         Theme.CLICKABLE
      )
   end

   if (prev_l ~= l) or (prev_t ~= t) or (prev_b ~= b) then
      il, it, ir, ib = Theme.DrawBorder(textResizer)
      -- allows textrectangle to be resized
      Theme.AddResizeTag(textResizer, "full", il, ib-Theme.RESIZER_SIZE+1, "MouseDown", "ResizeMainCallback", "ResizeReleaseMainCallback")
      prev_l, prev_t, prev_b = l, t, b
   end

   if sb then
      sb:setRect(il, it, ir, ib-Theme.RESIZER_SIZE)
   else
      sb = ScrollBar.new(textResizer, "sb", il, it, ir, ib-Theme.RESIZER_SIZE, 30)
      sb:addUpdateCallback(self, scrollMain)
   end
   sb:setScroll(cur_scroll_line, text_rectangle_lines, total_output_lines)
   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")

   WindowShow(textResizer, true)
end

function add_title_dragger()
   -- Add mini-window at top with draghandler for dragging the main output around.
   dragsize = 15
   border = GetInfo(277)+GetInfo(276)

   WindowCreate(textDragger, GetInfo(272)-border, GetInfo(273)-border, GetInfo(274)-GetInfo(272)+(2*border), dragsize, 0, 22, GetNormalColour(1))

   if WindowHotspotInfo(textDragger, "dragmain", 13) then
      WindowMoveHotspot(textDragger, "dragmain", 0, 0, 0, 0)
   else
      WindowAddHotspot(textDragger, "dragmain", 0, 0, 0, 0, nil, nil, "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
      WindowDragHandler(textDragger, "dragmain", "DragMainCallback", "DragReleaseMainCallback", 0)
   end

   WindowShow(textDragger,true)
end

function OnPluginWorldOutputResized()
   AddTimer("resizeCheckTimer1", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_geometry")
   AddTimer("resizeCheckTimer2", 0, 0, 1, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_geometry")
end

function draw_main_window()
   -- addresses a problem where new users are trying to play without the window maximized
   local t_right = math.min(textrect_right, GetInfo(281)-7-Theme.RESIZER_SIZE-4)
   local t_bottom = math.min(textrect_bottom, GetInfo(280)-7)

   TextRectangle(textrect_left, textrect_top, t_right, t_bottom,
      5,  -- BorderOffset,
      Theme.THREE_D_HIGHLIGHT,   -- BorderColour,
      1,  -- BorderWidth,
      Theme.THREE_D_SOFTSHADOW,  -- OutsideFillColour,
      miniwin.brush_solid) -- OutsideFillStyle

   if GetPluginInfo("74524d1272786aaf04e9487d", 17) then  -- splitscreen scrollback plugin force update
      CallPlugin("74524d1272786aaf04e9487d", "check_display")
   end

   -- Add a mini-window under main text area so background won't mess it up.
   local trwidth = t_right - textrect_left
   local trheight = t_bottom - textrect_top

   WindowCreate (bgwin, textrect_left - 5, textrect_top - 5,
      math.max(0, trwidth + 10), math.max(0, trheight + 10),
      12  , 3, Theme.PRIMARY_BODY)
   WindowShow(bgwin, true)

   if image_ratio ~= nil then
      local rect_ratio = trwidth/trheight
      if rect_ratio > image_ratio then
         image_height = trheight
         image_width = trheight*image_ratio
      else
         image_height = trwidth/image_ratio
         image_width = trwidth
      end

      WindowDrawImage (bgwin, "wolf_logo", (trwidth-image_width)/2, (trheight-image_height)/2, (trwidth+image_width)/2, (trheight+image_height)/2, miniwin.image_stretch)
   end

   add_title_dragger()
   add_main_resizer()
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
