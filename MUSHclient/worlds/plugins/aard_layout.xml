<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 27, 2010, 6:32 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "aard_layout" generated by Plugin Wizard -->

<muclient>

<plugin
   name="Aardwolf_Main_Layout"
   author="Fiendish and Lasher"
   id="c293f9e7f04dde889f65cb90"
   language="Lua"
   purpose="Layout Aardwolf Main Screen"
   date_written="2010-08-27 18:32:06"
   requires="4.56"
   version="1.0"
   save_state="y"
>
</plugin>

<aliases>

<alias
   script="LayoutLock"
   match="^aard layout( lock| unlock)?"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="reset_aard"
   match="resetmain"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="reset_aard"
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="flat_theme_init"
   match="flat_theme"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10

default_top = 140
default_bottom = 544
default_left = 7
default_right = 650

-- Variables not saved.
startx           = ""
starty           = ""
posx             = ""
posy             = ""
hotspot_id       = ""
orig_height      = 400  -- saves old height when we collapse window.
MIN_SIZE         = 50
rstagsize        = 15

function LayoutLock(name, line, wildcards)
   if wildcards[1] == " lock" then
      SetVariable("lock_down_miniwindows", "1")
   elseif wildcards[1] == " unlock" then
      SetVariable("lock_down_miniwindows", "0")
   end
   print("\nCurrent layout lock status:", ((GetVariable("lock_down_miniwindows") == "1") and "LOCKED") or "UNLOCKED","\n")
end

function ResizeMainCallback()
   if GetVariable("lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   textrect_right = textrect_right + posx - startx
   startx = posx
   if ( textrect_right-textrect_left < MIN_SIZE) then
      textrect_right = textrect_left+MIN_SIZE
      startx = textrect_right
   elseif (textrect_right > GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      startx = textrect_right
   end

   textrect_bottom = textrect_bottom + posy - starty
   starty = posy
   if ( textrect_bottom-textrect_top < MIN_SIZE) then
      textrect_bottom = textrect_top+MIN_SIZE
      starty = textrect_bottom
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      starty = textrect_bottom
   end

   draw_main_window()
end

function DragMainCallback()
   if GetVariable("lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   local height = GetInfo(293) - GetInfo(291)
   local width = GetInfo(292) - GetInfo(290)

   textrect_left = textrect_left + posx - startx
   textrect_right = textrect_left + width
   if (textrect_left <= 7) then
      textrect_left = 7
      textrect_right = textrect_left + width
   elseif (textrect_right >= GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      textrect_left = textrect_right - width
   else
      startx = posx
   end

   textrect_top = textrect_top + posy - starty
   textrect_bottom = textrect_top+height
   starty = posy
   if (textrect_top < 7) then
      textrect_top = 7
      starty = textrect_top
      textrect_bottom = textrect_top+height
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      textrect_top = textrect_bottom-height
      starty = textrect_top
   end

   draw_main_window()
end


---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseMainCallback()
   OnPluginSaveState()
end

function DragReleaseMainCallback()
   OnPluginSaveState()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resizemain") then
      startx, starty = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   elseif (hotspot_id == "dragmain") then
      startx, starty = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))

   SetVariable("trleft",textrect_left)
   SetVariable("trright",textrect_right)
   SetVariable("trtop",textrect_top)
   SetVariable("trbottom",textrect_bottom)
   SetVariable("flat_theme", flat_theme)
end -- OnPluginSaveState

function flat_theme_init()
   if flat_theme == 0 then
      ColourNote ("yellow", "", "Flat Theme for main window is ENABLED.")
   else  
      ColourNote ("yellow", "", "Flat Theme for main window is DISABLED.")
   end
   flat_theme = (((0 == flat_theme) and 1) or 0)
   OnPluginEnable()
   WindowDelete(textResizer)
   add_main_resizer()
end

function reset_aard()
   textrect_left = default_left
   textrect_right = default_right
   textrect_top = default_top
   textrect_bottom = default_bottom
   flat_theme = 0
   OnPluginSaveState()
   check_main_background()
end

function OnPluginClose()
   OnPluginDisable()
   WindowDelete(textDragger)
   WindowDelete(textResizer)
   WindowDelete(bgwin)
end

function OnPluginDisable ()
   OnPluginSaveState()
   TextRectangle(0,0,0,0,
      5,  -- BorderOffset,
      ColourNameToRGB ("darkgray"),    -- BorderColour,
      2,  -- BorderWidth,
      ColourNameToRGB ("darkslategray"),  -- OutsideFillColour,
      0) -- OutsideFillStyle (fine hatch)
   SetBackgroundImage("",0)
   WindowShow( textDragger, false )
   WindowShow( textResizer, false )
   WindowShow( bgwin, false)
end --  OnPluginDisable

function OnPluginEnable ()
   OnPluginSaveState()
   OnPluginInstall()
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall()
   flat_theme = tonumber(GetVariable("flat_theme")) or 0

   if flat_theme == 1 then
      background_colour = 0x1c1c1c
   else
      background_colour = 0x000000
   end

   --- Get a unique name for main window and resizer window.
   win = GetPluginID ()  -- get a unique name
   textDragger = "      "..win.."txtdragger"
   textResizer = "      "..win.."txtresize"
   bgwin = "      "..win.."text_background"
   bgoffscreen = "      "..win.."text_background_offscreen"

   local dir = GetInfo(66)
   local imgpath = dir .. "worlds\\plugins\\images\\bg1.png"
   if 0 ~= SetBackgroundImage(imgpath,13) then
      ColourNote("yellow","red","Error loading background image.")
   end

   WindowCreate (bgwin, 0, 0, 0, 0, 12, 3, background_colour)
   WindowCreate (bgoffscreen, 0, 0, 0, 0, 12, 3, background_colour)

   local logopath = dir .. "worlds\\plugins\\images\\aardbg13.png"
   if WindowLoadImage (bgoffscreen, "wolf_logo", logopath) == 0 then
      WindowResize (bgoffscreen, WindowImageInfo(bgoffscreen, "wolf_logo", 2), WindowImageInfo(bgoffscreen, "wolf_logo", 3), GetNormalColour(1))
      WindowDrawImage (bgoffscreen, "wolf_logo", 0, 0, 0, 0, miniwin.image_copy)
      WindowFilter (bgoffscreen, 0, 0, 0, 0, miniwin.filter_red_brightness, bit.band(GetNormalColour(1), 0xFF))
      WindowFilter (bgoffscreen, 0, 0, 0, 0, miniwin.filter_green_brightness, bit.band(bit.shr(GetNormalColour(1),8), 0xFF))
      WindowFilter (bgoffscreen, 0, 0, 0, 0, miniwin.filter_blue_brightness, bit.band(bit.shr(GetNormalColour(1),16), 0xFF))
      WindowImageFromWindow(bgwin, "wolf_logo", bgoffscreen)
      image_ratio = WindowImageInfo(bgwin, "wolf_logo", 2)/WindowImageInfo(bgwin, "wolf_logo", 3)
   end

   --- Pull some state variables.
   check_main_background()

   -- give main world window time to stabilize its size and position
   AddTimer("checkTimer", 0, 0, 2, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_main_background")

   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time
end

function check_main_background()
   textrect_top = math.max(0, tonumber(GetVariable("trtop")) or default_top)
   textrect_bottom = math.min(GetInfo(280), tonumber(GetVariable("trbottom")) or default_bottom)
   textrect_left = math.max(0, tonumber(GetVariable("trleft")) or default_left)
   textrect_right = math.min(GetInfo(281), tonumber(GetVariable("trright")) or default_right)
   draw_main_window()
end

function add_main_resizer()
   if WindowInfo(textResizer, 1) then -- if it already exists
      --- Reposition the resize tag.
      WindowPosition(textResizer, GetInfo(274) - rstagsize+5, GetInfo(275) - rstagsize+5, 0, 6)
   else
      -- Add another mini-window in bottom right corner for resizer tag.
      check (WindowCreate (textResizer, GetInfo(274) - rstagsize+5, GetInfo(275) - rstagsize+5,
         rstagsize, rstagsize,
         12  , 2, GetNormalColour(1)))

      -- draw the resize widget bottom right corner.
      if flat_theme == 1 then
         resize_color_1 = 0x303030
         resize_color_2 = 0x1c1c1c
      else
         resize_color_1 = 0xffffff
         resize_color_2 = 0x696969
      end
      WindowLine(textResizer, rstagsize-1, rstagsize-0, rstagsize-0, rstagsize-1, resize_color_1, 0, 2)
      WindowLine(textResizer, rstagsize-2, rstagsize-0, rstagsize-0, rstagsize-2, resize_color_2, 0, 1)
      WindowLine(textResizer, rstagsize-4, rstagsize-0, rstagsize-0, rstagsize-4, resize_color_1, 0, 2)
      WindowLine(textResizer, rstagsize-5, rstagsize-0, rstagsize-0, rstagsize-5, resize_color_2, 0, 1)
      WindowLine(textResizer, rstagsize-7, rstagsize-0, rstagsize-0, rstagsize-7, resize_color_1, 0, 2)
      WindowLine(textResizer, rstagsize-8, rstagsize-0, rstagsize-0, rstagsize-8, resize_color_2, 0, 1)
      WindowLine(textResizer, rstagsize-10, rstagsize-0, rstagsize-0, rstagsize-10, resize_color_1, 0, 2)
      WindowLine(textResizer, rstagsize-11, rstagsize-0, rstagsize-0, rstagsize-11, resize_color_2, 0, 1)
      WindowLine(textResizer, rstagsize-12, rstagsize-0, rstagsize-0, rstagsize-12, resize_color_1, 0, 1)
      WindowLine(textResizer, rstagsize-13, rstagsize-0, rstagsize-0, rstagsize-13, resize_color_1, 0, 1)

      -- Add a drag handler to this window, effectively allows textrectangle to be resized.
      WindowAddHotspot(textResizer, "resizemain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
      WindowDragHandler(textResizer, "resizemain", "ResizeMainCallback", "ResizeReleaseMainCallback", 0)
   end
   WindowShow(textResizer, true)
end

function add_title_dragger()
   if WindowInfo(textDragger, 1) then -- if it already exists
      --- Reposition the dragger tag.
      WindowPosition(textDragger, GetInfo(272)-6, GetInfo(273)-7, 0, 6)
   else
      -- Add another mini-window at top for dragging bar.
      dragsize = 10

      check (WindowCreate (textDragger, GetInfo(272)-6, GetInfo(273)-6, GetInfo(274)-GetInfo(272)+11, dragsize, 12, 2, GetNormalColour(1)))

      WindowAddHotspot(textDragger, "dragmain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
      WindowDragHandler(textDragger, "dragmain", "DragMainCallback", "DragReleaseMainCallback", 0)
   end
   WindowShow(textDragger,true)
end

function OnPluginWorldOutputResized()
   AddTimer("checkTimer", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_main_background")
end

function draw_main_window()

   -- addresses a problem where new users are trying to play without the window maximized
   local t_right = math.min(textrect_right,GetInfo(281)-7)
   local t_bottom = math.min(textrect_bottom, GetInfo(280)-7)

   if flat_theme == 1 then
      offset = 3
      border_colour = 0x303030
      outside_colour = 0x444444
   else
      offset = 5
      border_colour = ColourNameToRGB("darkgray")
      outside_colour = 0x333333
   end

   TextRectangle(textrect_left, textrect_top, t_right, t_bottom,
      offset,  -- BorderOffset,
      border_colour,    -- BorderColour,
      2,  -- BorderWidth,
      outside_colour,  -- OutsideFillColour,
      miniwin.brush_solid) -- OutsideFillStyle

   -- Add a mini-window under main text area so background won't mess it up.
   local trwidth = t_right - textrect_left
   local trheight = t_bottom - textrect_top

   WindowCreate (bgwin, textrect_left - 5, textrect_top - 5,
      math.max(0, trwidth + 10), math.max(0, trheight + 10),
      12  , 3, background_colour)
   WindowShow(bgwin, true)

   if image_ratio ~= nil then
      local rect_ratio = trwidth/trheight
      if rect_ratio > image_ratio then
         image_height = trheight
         image_width = trheight*image_ratio
      else
         image_height = trwidth/image_ratio
         image_width = trwidth
      end

      if flat_theme == 0 then
         WindowDrawImage (bgwin, "wolf_logo", (trwidth-image_width)/2, (trheight-image_height)/2, (trwidth+image_width)/2, (trheight+image_height)/2, miniwin.image_stretch)
      end
   end

   add_title_dragger()
   add_main_resizer()
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
