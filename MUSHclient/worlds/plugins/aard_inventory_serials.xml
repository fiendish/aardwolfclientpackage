<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Inventory_Serials"
   author="Fiendish"
   id="0cbb10309587f0ee15ba78ce"
   language="Lua"
   purpose="Adds useful serial numbers to inventory command output"
   date_written="2011-12-30 22:45:00"
   requires="4.70"
   version="1.0"
   save_state="y"
   >
<description trim="y">
Makes inventory command slightly more useful by displaying item serial numbers
</description>
</plugin>

<!--  Triggers  -->
<aliases>

<alias
   match="^(i|in|inv|inve|inven|invent|invento|inventor|inventory) *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   if not check_connection() then
      return
   end
   if blocked_by_status() then
      Send("%0")
      return
   end
   EchoTypedCommand("%0")
   if not manually_requested and not visible_always then
      if show_hint then
         hint_message()
      end
      SendNoEcho("%0")
   else
      Capture.command("keyring data", "{keyring}", "{/keyring}", false, true, true, true, parseKeyringNoDisplay)
      Capture.command("invdata", "{invdata}", "{/invdata}", false, true, true, false, parseInvdata)
   end
</send>
</alias>

<alias
   match="^keyr(i|in|ing)? l(i|is|ist)? *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   if not check_connection() then
      return
   end
   if blocked_by_status() then
      Send("%0")
      return
   end
   EchoTypedCommand("%0")
   if not manually_requested and not visible_always then
      if show_hint then
         hint_message()
      end
      SendNoEcho("%0")
   else
      Capture.command("keyring data", "{keyring}", "{/keyring}", false, true, true, false, parseKeyring)
   end
</send>
</alias>

<alias
   match="^vau(l|lt)? l(i|is|ist)? *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   if not check_connection() then
      return
   end
   if blocked_by_status() then
      Send("%0")
      return
   end
   EchoTypedCommand("%0")
   if not manually_requested and not visible_always then
      if show_hint then
         hint_message()
      end
      SendNoEcho("%0")
   else
      Capture.command("vault data", "{vault}", "{/vault}", false, true, true, false, parseVault)
   end
</send>
</alias>

<alias
   match="^((i|in|inv|inve|inven|invent|invento|inventor|inventory)|(keyr(i|in|ing)? l(i|is|ist)?)|(vau(l|lt)? l(i|is|ist)?)) serials?( help| off| on| (color) (.*)| hint clear)?$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   script="serials_command"
></alias>
</aliases>
<script>
<![CDATA[
require "gmcphelper"
require "wrapped_captures"

function check_connection()
   if not IsConnected() then
      if "yes" == utils.msgbox ("The connection to "..GetInfo(2).." is not open. Attempt to reconnect?", "MUSHclient", "yesno", "?") then
         Connect()
      end
      return false
   end
   return true
end

function blocked_by_status()
   local state = tonumber(gmcp("char.status.state"))
   if (state == nil) or not ({[3]=true, [8]=true, [9]=true, [11]=true})[state] then
      return true
   end
   return false
end

function EchoTypedCommand(foo)
   if GetEchoInput() then
      ColourNote(RGBColourToName(GetCustomColourText(GetOption("echo_colour"))), "", foo)
   end
end

dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

function update_colorname(code)
   styles = ColoursToStyles(code.."@"..code)
   if #styles > 0 then
      styles[1].text = ""
      styles[1].lenth = 0
      colorname = RGBColourToName(styles[1].textcolour)
      serials_color = StylesToColours({styles[1]})
      return true
   else
      return false
   end
end

visible_always = tonumber(GetVariable("visible_always")) == 1  -- default false
show_hint = tonumber(GetVariable("show_hint")) ~= 0 -- default true
manually_requested = false
max_hints = 5
serials_color = GetVariable("serials_color") or "@w"
while not update_colorname(serials_color) do
   serials_color = "@w"
   SetVariable("serials_color", serials_color)
end

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function OnPluginInstall()
   if IsConnected() then
      OnPluginConnect()
   end
end

function hint_message()
   times_hinted = tonumber(GetVariable("times_hinted") or "0")
   times_hinted = times_hinted + 1
   SetVariable("times_hinted", times_hinted)

   if times_hinted == max_hints then
      show_hint = false
      SetVariable("show_hint", 0)
   end
   ColourNote("cornflowerblue", "", "")
   ColourNote("cornflowerblue", "", "The Aardwolf MUSHclient Package includes a plugin for displaying object serial numbers in your inventory.")
   ColourNote("cornflowerblue", "", "The information can give you more precise control over which items you give/drop/wear/etc.")
   ColourNote("cornflowerblue", "", "")
   ColourNote("", "", "To review the commands for this plugin and stop seeing this message, type '", "yellow", "", "inventory serials help", "", "", "'.")
   ColourNote("", "", "To learn more about object serial numbers in general, type '", "yellow", "", "help ObjectId", "", "", "'.")
   if show_hint then
      ColourNote("", "", "This message will show ","red","",tostring(max_hints-times_hinted),"",""," more time"..(((max_hints-times_hinted)>1) and "s." or "."))
   else
      ColourNote("cornflowerblue", "", "This message will not show anymore.")
   end
end

function show_help()
   ColourNote("cornflowerblue", "", "")
   ColourNote("cornflowerblue", "", "Aardwolf Inventory Serials Plugin Help")
   ColourNote("cornflowerblue", "", "--------------------------------------")
   ColourNote("cornflowerblue", "", "")
   ColourNote("cornflowerblue", "", "Command syntax:")
   ColourNote("cornflowerblue", "", "")
   ColourNote("yellow", "", "   inventory serials <on/off>")
   ColourNote("cornflowerblue", "", "        Whether to always automatically include item serial numbers when listing inventory.")
   ColourNote("cornflowerblue", "", "")
   ColourNote("yellow", "", "   inventory serials")
   ColourNote("yellow", "", "   keyring list serials")
   ColourNote("yellow", "", "   vault list serials")
   ColourNote("cornflowerblue", "", "        Request the display of item serial numbers once.")
   ColourNote("cornflowerblue", "", "")
   ColourNote("yellow", "", "   inventory serials color <Aardwolf color code>")
   ColourNote("cornflowerblue", "", "        Which color to display serial numbers in.")
   ColourNote("cornflowerblue", "", "")
   ColourNote("yellow", "", "   inventory serials help")
   ColourNote("cornflowerblue", "", "        Print this help.")
   ColourNote("cornflowerblue", "", "")
   ColourNote("cornflowerblue", "", "Current status:")
   ColourNote("cornflowerblue", "", "")
   ColourTell("cornflowerblue", "", "Always include item serial numbers when listing inventory? ")
   ColourNote(visible_always and "lime" or "red", "", visible_always and "Yes" or "No")
   ColourNote("cornflowerblue", "", "Serial numbers will be displayed in color: ", colorname, "", serials_color)
   ColourNote("cornflowerblue", "", "--------------------------------------")
   ColourNote("cornflowerblue", "", "")
end

function serials_command(name, line, wildcards)
   -- wildcard indices:
   -- 1 is full command minus the serials bit
   -- 2 is inv
   -- 3 is keyring
   -- 6 is vault
   -- 9 is help/off/on
   -- 10 is color command
   -- 11 is color code

   cmd = Trim(wildcards[9])
   colorset = Trim(wildcards[10])
   colorcode = Trim(wildcards[11])
   if colorset ~= "" then
      if colorcode:sub(1,1) ~= "@" then
         colorcode = "@"..colorcode
      end
      if ((string.sub(colorcode,2,2) == "x") or (#colorcode <= 2)) and update_colorname(colorcode) then
         SetVariable("serials_color", serials_color)
         ColourNote("", "", "You have set inventory serial numbers to display using the color code: ", colorname, "", serials_color, "", "", ".")
      else
         ColourNote("cornflowerblue", "", "Could not use the color code: "..colorcode.." for serial numbers. Is it a valid color code?")
      end
   elseif cmd == "" then
      if visible_always then
         ColourNote("", "", "You already display item serial numbers by default. For help, type ","yellow", "", "'inventory serials help'","","",".")
      else
         manually_requested = true
      end
      Execute(wildcards[1])
      manually_requested = false
   elseif cmd == "off" and flags ~= "" then
      ColourNote("","","Inventory, vault list, and keyring list ","red","","[will not]","",""," display item serial numbers now unless specifically requested. (For help, type ","yellow", "", "'inventory serials help'","","",")")
      visible_always = false
      SetVariable("visible_always", 0)
   elseif cmd == "on" and flags ~= "" then
      ColourNote("","","Inventory, vault list, and keyring list ","lime","","[will]","",""," now always display item serial numbers. (For help, type ","yellow", "", "'inventory serials help'","","",")")
      visible_always = true
      SetVariable("visible_always", 1)
   elseif cmd == "help" then
      show_help()
      show_hint = false
      SetVariable("show_hint", 0)
   elseif cmd == "hint clear" then
      show_hint = false
      SetVariable("show_hint", 0)
   end
end

function OnPluginEnable()
   OnPluginInstall()
end

function OnPluginConnect()
end

invsorted = {}
keysorted = {}
vaultsorted = {}
color_lookup = {
   ["B"]="@c", -- blue aura
   ["R"]="@R", -- red aura
   ["K"]="@R", -- k(ept)
   ["M"]="@B", -- magic
   ["G"]="@W", -- glow(ing)
   ["H"]="@C", -- hum(ming)
   ["I"]="@w", -- invis(ible)
   ["C"]="@D", -- cursed
   ["T"]="@R", -- tempered
   ["E"]="@G", -- envenomed
   ["W"]="@D", -- weakened
}

function insertLine(wildcards, results, sorted)
   local flags = wildcards[2]
   local name = wildcards[3]
   local level = wildcards[4]
   local hash = flags..name..level -- flags, name, level
   if not results[hash] then
      results[hash] = {{},{}}
      for i=1,#flags do
         local c = string.sub(flags, i, i)
         local color = color_lookup[c] or "@w"
         table.insert(results[hash][2], color.."("..c..")@w")
      end
      results[hash][3] = name
      results[hash][4] = level
      table.insert(sorted, results[hash])
   end
   table.insert(results[hash][1], wildcards[1]) -- id
end

keyrex = rex.new("^\\s*(\\d+),(\\w*),(.+),(\\d+),(\\d+),([01]),(-?\\d+),(-?\\d+)")
invrex = rex.new("^(\\d+),(\\w*),(.+),(\\d+),(\\d+),([01]),(-?\\d+),(-?\\d+)")
vaultrex = rex.new("^\\s*(\\d+),(\\w*),(.+),(\\d+),(\\d+),([01]),(-?\\d+),(-?\\d+)")

function insertAllLines(style_lines, re)
   local results, sorted = {}, {}
   for _, line in ipairs(style_lines) do
      _, _, wildcards = re:match(line[1].text)
      insertLine(wildcards, results, sorted)
   end
   return sorted
end

function parseKeyringNoDisplay(style_lines)
   keysorted = insertAllLines(style_lines, keyrex)
end

function parseKeyring(style_lines)
   keysorted = insertAllLines(style_lines, keyrex)
   displayKeyring()
end

function parseInvdata(style_lines)
   invsorted = insertAllLines(style_lines, invrex)
   displayInventory()
end

function parseVault(style_lines)
   vaultsorted = insertAllLines(style_lines, vaultrex)
   AddTriggerEx(
      "vault_count",
      "^{vaultcounts}(\\d+),\\d+,(\\d+){/vaultcounts}$",
      "displayVault('%1', '%2')",
      trigger_flag.OneShot + trigger_flag.RegularExpression + trigger_flag.OmitFromLog + trigger_flag.OmitFromOutput + trigger_flag.Temporary + trigger_flag.Enabled,
      -1, 0, "", "", sendto.scriptafteromit, 100
   )
end

function showSortedItems(which)
   local total = 0
   for k,v in ipairs(which) do
      local num = #v[1]
      total = total + num
      local count = string.format("@W(%2d) @w", num)
      local line = string.format("%-5s", num > 1 and count or "     ")..table.concat(v[2]).." "..v[3]..serials_color.."  ["..((#v[1] < 4 and table.concat(v[1],",")) or "many").."]  ".."@W(@G"..v[4].."@W)@w\r\n"
      Simulate(ColoursToANSI(line))
   end
   return total
end

function displayInventory()
   Simulate(ColoursToANSI("@wYou are carrying:\r\n"))
   showSortedItems(invsorted)

   local num_keys = 0
   for k,v in ipairs(keysorted) do
      num_keys = num_keys + #v[1]
   end
   Simulate(ColoursToANSI(string.format("@C(%2d) @W** Items on Keyring (%d unique) **@w\r\n", num_keys, #keysorted)))
   invsorted = {}
   keysorted = {}
end

function displayNonInventory(name, sorted_items)
   if #sorted_items > 0 then
      Simulate(ColoursToANSI(string.format("@wYour %s contains:\r\n", name)))
      local total = showSortedItems(sorted_items)
      Simulate("\r\n")
      Simulate(ColoursToANSI(string.format("@wYou have @Y%d@w item%s in your %s (%d unique).@w\r\n", total, total == 1 and "" or "s", name, #sorted_items)))
   else
      Simulate(ColoursToANSI(string.format("@wYour %s is currently empty.\r\n", name)))
   end
end

function displayVault(num_items, capacity)
   displayNonInventory("vault", vaultsorted)
   Simulate(ColoursToANSI(string.format("@wYou are using @Y%d@w of @Y%d@w item slots in your vault.@w\r\n", num_items, capacity)))
   vaultsorted = {}
end

function displayKeyring()
   displayNonInventory("keyring", keysorted)
   keysorted = {}
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
