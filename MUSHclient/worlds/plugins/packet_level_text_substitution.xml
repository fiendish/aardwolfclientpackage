<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Packet_Level_Text_Substitutions"
   author="Fiendish"
   id="f04b1414f681c029412255cc"
   language="Lua"
   purpose="Replace text with other text at the packet level"
   date_written="2011-07-27 01:00:00"
   requires="4.75"
   version="1.0"
   save_state="y"
>

<description trim="y">

Replaces text in server output with whatever you want.

Does not cross color code boundaries.
'#sub potato pants' will make @Mpotato@Cpants@Rairplane become @Mpants@Cpants@Rairplane
but will not do anything to @Mpot@Yato@Cpants@Rairplane.

Operates at the incoming packet level, so GMCP strings are modified as well.

</description>
</plugin>
<aliases>

<alias
   match="^#sub[ ]*$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="listsub"
></alias>

<alias
   match="^#sub \{(.*)\} \{(.*)\}( (#nocase)| (#alone))* *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="addsub"
></alias>

<alias
   match="^#sub (.+?) (.+?)( (#nocase)| (#alone))* *$"
   enabled="y"
   regexp="y"
   sequence="101"
   ignore_case="y"
   script="addsub"
></alias>

<alias
   match="^#sub .+$"
   enabled="y"
   regexp="y"
   sequence="200"
   ignore_case="y"
   script="helpsub"
></alias>

<alias
   match="^#unsub (.+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="remsub"
></alias>

<alias
   match="^#unsub *$"
   enabled="y"
   regexp="y"
   sequence="101"
   ignore_case="y"
   script="helpsub"
></alias>

</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "serialize"

subs = {} -- init table

loadstring (GetVariable ("subs") or "") ()

function helpsub(name, line, wildcards)
   ColourNote("yellow","","")
   ColourNote("yellow","","You typed:   '","white","",line,"yellow","","'")
   ColourNote("yellow","","Available options for the #sub plugin are:")
   ColourNote("yellow","","---------------------------------------------------------------")
   ColourNote("yellow","","#sub            - list all current substitutions")
   ColourNote("yellow","","")
   ColourNote("yellow","","#sub a b        - replaces word a with word b")
   ColourNote("yellow","","#sub {a} {b}    - replaces phrase a with phrase b")
   ColourNote("lime","","-  Add #alone to your sub line to only match at word boundaries")
   ColourNote("lime","","-  Add #nocase to your sub line to do case-insensitive matching")
   ColourNote("lime","","-  example:  #sub {hello} {Howdy} #alone #nocase")
   ColourNote("lime","","-            will match HeLlO but not othello")
   ColourNote("yellow","","")
   ColourNote("yellow","","#unsub a        - removes substitution for a")
   ColourNote("yellow","","#unsub #number  - removes numbered substitution")
   ColourNote("yellow","","")
end

function listsub(name, line, wildcards)
   ColourNote("yellow","","")
   ColourNote("yellow",""," Current #subs:")
   ColourNote("yellow","","/-----------------------------------------------------------------------------\\")
   for i,v in ipairs(subs) do
      ColourNote("yellow","",string.format("   %4u",i)..": ","white","",v[1],"yellow",""," --> ","white","",v[2])
   end
   ColourNote("yellow","","\\-----------------------------------------------------------------------------/")
   ColourNote("yellow","","")
 end

function remsub(name, line, wildcards) 
   local formerly = nil
   local found = false
   local ind = nil
   local keywords = wildcards[1]
   
   if keywords:sub(1,1) == "#" then
      local ks = subs[tonumber(keywords:sub(2))]
      if ks then
         keywords = ks[1]
      end
   end
   
   for i,v in ipairs(subs) do
      if v[1] == keywords then
         formerly = v[2]
         table.remove(subs, i)
         found = true
         break
      end
   end
   ColourNote("yellow","","")
   if found then
      ColourNote("yellow","","\""..keywords.."\" un-subbed (formerly \""..formerly.."\")")
   else
      ColourNote("yellow","","No existing #sub found for "..wildcards[1])
   end
   OnPluginSaveState()
end

function addsub(name, line, wildcards)

   local fromstr = wildcards[1]
   local tostr = wildcards[2]
   
   if wildcards[4] == "#nocase" then
      wildcards[1] = string.gsub(wildcards[1], '(%a)', function (v) return '['..string.upper(v)..string.lower(v)..']' end)
   end
   if wildcards[5] == "#alone" then
      wildcards[1] = "([%s%p])"..wildcards[1].."([%s%p])"
      
      wildcards[2] = string.gsub(wildcards[2], "%%%%", "%%\0"):gsub("%%([%d]+)", function (v) return "%"..tostring(tonumber(v)+1) end):gsub("%z","%%")
      wildcards[2] = "%1"..wildcards[2]
      local num_wilds = 0
      for wild in string.gmatch(wildcards[1], "%(") do
         num_wilds = num_wilds+1
      end
      wildcards[2] = wildcards[2].."%"..tostring(num_wilds)
   end
   
   ColourNote("yellow", "", "...")
   if wildcards[4] == "#nocase" or wildcards[5] == "#alone" then
      ColourNote("yellow", "", "You specified"..((wildcards[4] == "#nocase") and (" "..wildcards[4]) or "")..((wildcards[5] == "#alone") and (" "..wildcards[5]) or "")..", so converting your #sub patterns...")
      ColourNote("yellow", "", "")
      ColourNote("yellow", "", "\""..fromstr.."\" --> \""..tostr.."\"")
      ColourNote("yellow", "", "becomes")
      ColourNote("yellow", "", "\""..wildcards[1].."\" --> \""..wildcards[2].."\"")
   end

   remsub(nil, nil, {wildcards[1]}, nil)
   ColourNote("yellow","","\""..wildcards[1].."\" now subbed with \""..wildcards[2].."\"")

   table.insert(subs, {wildcards[1], wildcards[2]})
   listsub()
   OnPluginSaveState()
end

function OnPluginSaveState()
   SetVariable ("subs", serialize.save ("subs"))
end

function OnPluginSaveState()
   SetVariable ("subs", serialize.save ("subs"))
end

function OnPluginPacketReceived(sData)
   if not GetInfo(123) then
      for _,v in ipairs(subs) do
         sData = sData:gsub(v[1],v[2])
      end
   end
   return sData
end

]]>
</script>
</muclient>
