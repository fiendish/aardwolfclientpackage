<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
 name="Universal_Text_To_Speech"
 author="Fiendish"
 id="463242566069ebfd1b379ec1"
 language="Lua"
 purpose="Automatically speak output text"
 date_written="2017-01-01 19:53:01"
 requires="4.60"
 version="1.0"
>
 <description>
  Text to speech support using the Tolk speech and braille abstraction library.
  https://github.com/dkager/tolk
 </description>
</plugin>

<aliases>
 <alias
  match="tts_stop"
  enabled="y"
  send_to="12"
  sequence="100"
  ignore_case="y"
 >
  <send>
   silence_if_can()
  </send>
 </alias>

 <alias
  match="tts_note *"
  enabled="y"
  send_to="12"
  sequence="100"
  ignore_case="y"
 >
  <send>
   say("%1", false)
  </send>
 </alias>

 <alias
  match="tts_interrupt *"
  enabled="y"
  send_to="12"
  sequence="100"
  ignore_case="y"
 >
  <send>
   say("%1", true)
  </send>
 </alias>

  <alias
   match="^tts$"
   regexp="y"
   script="tts_toggle"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   ignore_case="y"
  >
  </alias>

 <alias
  match="^tts focus$"
  script="tts_focus_toggle"
  regexp="y"
  enabled="y"
  omit_from_command_history="y"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  ignore_case="y"
 >
 </alias>

 <alias
  match="^tts running$"
  script="tts_running_toggle"
  regexp="y"
  enabled="y"
  omit_from_command_history="y"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  ignore_case="y"
 >
 </alias>

 <alias
  match="^tts help$"
  regexp="y"
  enabled="y"
  omit_from_command_history="y"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  ignore_case="y"
  send_to="12"
 >
  <send>
   Note(tts_help())
  </send>
 </alias>

 <alias
  match="sapi faster"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      SetVariable("engine_Rate", tostring(sapi.faster()))
   end
 </send>
 </alias>

 <alias
  match="sapi slower"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      SetVariable("engine_Rate", tostring(sapi.slower()))
   end
  </send>
 </alias>

 <alias
  match="sapi voice*"
  regexp="n"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_voice()
      else
         local index,id = sapi.set_voice_by_number(arg)
         SetVariable("engine_Voice_ID", tostring(id))
      end
   end
  </send>
 </alias>

 <alias
  match="sapi list voices"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      sapi.list_voices()
   end
  </send>
 </alias>

 <alias
  match="sapi test"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      sapi.speech_demo()
   end
  </send>
 </alias>

 <alias
  match="sapi rate*"
  enabled="n"
  regexp="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_rate()
      else
         SetVariable("engine_Rate", tostring(sapi.set_rate(arg)))
      end
   end
  </send>
 </alias>

 <alias
  match="sapi help"
  regexp="n"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   Note(sapi_help())
  </send>
 </alias>

 <alias
  match="sapi filtering*"
  regexp="n"
  enabled="n"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  group="sapi"
  send_to="12"
  ignore_case="y"
 >
  <send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_filtering_level()
      else
         SetVariable("filtering_level", tostring(sapi.set_filtering_level(arg)))
      end
   end
  </send>
 </alias>
</aliases>

<script>
<![CDATA[
require "gmcphelper"

AcceleratorTo("Ctrl+Space", "CallPlugin('"..GetPluginID().."', 'silence_if_can')", sendto.script)

no_sapi_msg = [[
Could not open SAPI.
Note for Linux and Mac OS users...
SAPI speech functionality depends on the Microsoft Speech API.
This is not included by default in Wine, and SpeechSDK51.exe must be separately installed.
You can install it with winetricks or from https://web.archive.org/web/20110805062427/https://download.microsoft.com/download/B/4/3/B4314928-7B71-4336-9DE7-6FA4CF00B7B3/SpeechSDK51.exe
]]

-- convert wchar_t[] to lua str
function widestr_to_luastr(wstr)
   local size_needed = ffi.C.WideCharToMultiByte(CP_UTF8, 0, wstr, -1, nil, 0, nil, false)
   local str = ffi.new("char[?]", size_needed)
   ffi.C.WideCharToMultiByte(CP_UTF8, 0, wstr, -1, str, size_needed, nil, false)
   return ffi.string(str)
end

-- convert lua str to wchar_t[]
function luastr_to_widestr(str)
   local size_needed = ffi.C.MultiByteToWideChar(CP_UTF8, 0, str, -1, nil, 0)
   local wstr = ffi.new("wchar_t[?]", size_needed)
   ffi.C.MultiByteToWideChar(CP_UTF8, 0, str, #str, wstr, size_needed)
   return wstr
end

function can_speak()
   return ((tolk and tolk.Tolk_IsLoaded() and tolk.Tolk_HasSpeech()) or sapi)
end

function should_speak_now()
   return (
      want_speech
      and not (lost_focus and settings["quiet_when_lost_focus"])
      and not (running and settings["quiet_when_running"])
   )
end

function say(text, interrupt)
   if (not text) or text:find("^%s*$") or (not can_speak()) then
      return
   end

   if interrupt then
      silence()
   end

   -- print(text) -- debug
   if sapi then
      sapi.say(text)
   elseif tolk then
      tolk.Tolk_Output(luastr_to_widestr(text), interrupt or false)
   end
end

function silence()
   if sapi then
      sapi.skip_all()
   elseif tolk then
      tolk.Tolk_Silence()
   end
end

function silence_if_can()
   if can_speak() then
      silence()
   end
end

function OnPluginInstall()
   want_speech = true
   tolk_dll_error = false
   sapi = nil
   tolk = nil
   EnableGroup("sapi", false)

   -- LuaJIT FFI
   ffi = require "ffi"

   ffi.cdef[[
      int MultiByteToWideChar(unsigned int CodePage, unsigned int dwFlags, const char* lpMultiByteStr, int cbMultiByte, wchar_t* lpWideCharStr, int cchWideChar);
      int WideCharToMultiByte(unsigned int CodePage, unsigned int dwFlags, const wchar_t* lpWideCharStr, int cchWideChar, const char* lpMultiByteStr, int cbMultiByte, const char * lpDefaultChar, bool lpUsedDefaultChar);
      void __cdecl Tolk_TrySAPI(bool);
      void __cdecl Tolk_Load();
      bool __cdecl Tolk_IsLoaded();
      void __cdecl Tolk_Unload();
      void __cdecl Tolk_PreferSAPI(bool);
      const wchar_t * __cdecl Tolk_DetectScreenReader();
      bool __cdecl Tolk_HasSpeech();
      bool __cdecl Tolk_HasBraille();
      bool __cdecl Tolk_Output(const wchar_t *str, bool interrupt);
      bool __cdecl Tolk_Speak(const wchar_t *str, bool interrupt);
      bool __cdecl Tolk_Braille(const wchar_t *str);
      bool __cdecl Tolk_IsSpeaking();
      bool __cdecl Tolk_Silence();
   ]]

   -- Load saved settings from state file to local variable
   settings = {
      ["quiet_when_lost_focus"] = GetVariable("quiet_when_lost_focus") == "1",
      ["quiet_when_running"] = GetVariable("quiet_when_running") == "1"
   }

   -- https://github.com/dkager/tolk
   if ffi.abi("32bit") then
      tolk_path = 'screen_reader_dlls/x86/Tolk.dll'
   else
      tolk_path = 'screen_reader_dlls/x64/Tolk.dll'
   end
   tolk = ffi.load(tolk_path)

   CP_UTF8 = 65001

   if tolk then
      tolk.Tolk_TrySAPI(false)
      tolk.Tolk_Load()
   else
      tolk_dll_error = true
   end

   if can_speak() then
      local reader = widestr_to_luastr(tolk.Tolk_DetectScreenReader())
      say("The universal T T S plug-in is using "..reader.." speech.", true)
   else
      sapi_fallback()
   end

   if tolk_dll_error then
      Note("Error: Failed to load "..tolk_path)
   end
end

function unload()
   silence_if_can()
   tolk = nil
   sapi = nil
   collectgarbage("collect")
end

function OnPluginScreendraw(line_type, log, line)
   if (line_type < 2) and should_speak_now() then
      say(line)
   end
end

function OnPluginSaveState()
   SetVariable("quiet_when_lost_focus", settings["quiet_when_lost_focus"] and "1" or "0")
   SetVariable("quiet_when_running", settings["quiet_when_running"] and "1" or "0")
end

function toggle_setting(key)
   settings[key] = not settings[key]
   SaveState()
   return settings[key]
end

function tts_focus_toggle()
   if toggle_setting("quiet_when_lost_focus") then
      Note("Speech will only be active when MUSHclient has focus.")
   else
      Note("Speech will stay active when MUSHclient loses focus.")
   end
end

function tts_running_toggle()
   if toggle_setting("quiet_when_running") then
      Note("MUSHclient will no longer speak while running.")
   else
      Note("MUSHclient will speak while running.")
   end
end

function OnPluginLoseFocus()
   lost_focus = true
end

function OnPluginGetFocus()
   lost_focus = false
end

function tts_toggle(name, line, wildcards)
   want_speech = not want_speech
   if not want_speech then
      silence_if_can()
   end
   say(string.format("Speech %s.", want_speech and "on" or "off"), true)
end

function OnPluginTabComplete(word)
   if want_speech then
      say(word, true)
   end
end

function OnPluginClose()
   unload()
end

function OnPluginBroadcast (msg, id, name, text)
   if (id == '3e7dedbe37e44942dd46d264') then    -- GMCP Handler plugin
      if text == "char.status" then
         running = (gmcp("char.status.state") == "12")
      end
   end
end

function sapi_fallback()
   sapi = require "sapi_interface"

   if sapi == -1 then
      sapi = nil
      print(no_sapi_msg)
      return
   end

   if sapi == -2 then
      sapi = nil
      print("No SAPI voices found.")
      return
   end

   local new_filter = tonumber(GetVariable("filtering_level"))
   if new_filter then
      sapi.set_filtering_level(new_filter, true)
   end

   local new_rate = tonumber(GetVariable("engine_Rate"))
   if new_rate then
      sapi.set_rate(new_rate, true)
   end

   local new_voice = GetVariable("engine_Voice_ID")
   if new_voice then
      sapi.set_voice_by_id(new_voice, true)
   end

   -- -- Add a few basic SAPI customizations
   -- for i,v in ipairs({
   --    {"%f[%a][pP]file", " P file"},
   --    {"%f[%a][gG]clan", " G clan"},
   --    {"%f[%a][gG]tell", " G tell"},
   --    {"%f[%a][fF]talk", " F talk"},
   --    {"%f[%a][gG]clan", " G clan"},
   --    {"%f[%a][gG]social", " G social"},
   --    {"%f[%a][rR]auction", " R auction"},
   --    {"%f[%a][gG]ametalk", " game-talk"},
   --    {"%f[%a][nN]obletalk", " noble-talk"},
   --    {"%f[%a][tT]iertalk", " tier-talk"},
   --    {"%f[%a][rR]acetalk", " race-talk"},
   --    {"%f[%a][cC]lantalk", " clan-talk"},
   --    {"%f[%a][pP]okerinfo", " poker-info"},
   --    {"%f[%a][mM]afiainfo", " mafia-info"},
   --    {"%f[%a][aA]ylor", " aylor "} -- Aylorian->ALIEN??? hahahaha what
   -- }) do
   --    table.insert(sapi.replacements, v)
   -- end

   EnableGroup("sapi", true)
   sapi.say("You are using Microsoft SAPI for text to speech. If you were hoping to send your text through a screen reader engine such as JAWS, N V D A, or Windows Eyes, and it didn't work, try restarting MUSHclient.")
   sapi.say("Type \"sapi help\" for a list of SAPI configuration commands.")
   sapi.speech_demo()
end

function sapi_help()
   return [[
   SAPI Settings Commands:

   sapi faster             : Speeds speech up.
   sapi slower             : Slows speech down.
   sapi rate [number]      : Check or set speech rate to [number].
   sapi list voices        : List the available TTS voices.
   sapi voice [number]     : Check or set to the given TTS voice number.
   sapi filtering [number] : Check or set punctuation filtering level to [number].

   You may also be able to control SAPI settings through one of your system control panels.
   ]]
end

function tts_help()
   return [[
   TTS Settings Commands:

   tts                : Toggles speech on and off.
   tts focus          : Toggles speech when MUSHclient is not the active window.
   tts running        : Toggles speech while running.

   ]]
end

]]>
</script>
</muclient>
