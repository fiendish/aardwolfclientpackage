<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, August 02, 2010, 2:17 PM -->
<!-- MuClient version 4.51 -->
<!-- Plugin "GMCPHandler" generated by Plugin Wizard -->

<muclient>

<plugin
   name="GMCP_handler"
   author="Fiendish"
   id="3e7dedbe37e44942dd46d264"
   language="Lua"
   purpose="Handle GMCP messages and broadcast data"
   save_state="y"
   date_written="2010-08-02 14:16:26"
   requires="4.59"
   version="1.0"
>
<description trim="y">

Aardwolf GMCP Handler

Purpose is to process incoming GMCP messages, notify other plugins
of arrival of new data, and make that data accessible.

For full details on GMCP in Aardwolf see:

   http://www.aardwolf.com/wiki/index.php/Clients/GMCP

For Mushclient specific information on how to access GMCP data, see:

   https://github.com/fiendish/aardwolfclientpackage/wiki/Using-GMCP

</description>

</plugin>

<aliases>
<alias
   script="gmcpdebug"
   match="^gmcpdebug (.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   match="sendgmcp *"
   script="GMCP_Alias"
   enabled="y"
   send_to="12"
   sequence="100"
></alias>

</aliases>

<!--  Get our standard constants -->

<script>
<![CDATA[

aard_extras = require "aard_lua_extras"
require "json"
require "serialize"
require "gmcphelper"

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

local IAC, SB, SE, DO = 0xFF, 0xFA, 0xF0, 0xFD
local GMCP      = 201
local GMCPDebug = tonumber(GetVariable("GMCPDebug")) or 0


-- You can use CallPlugin to access any gmcp data via this function.
-- example:
--   local ret, datastring = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpdata_as_string", "char.status")
--   pcall(loadstring("status_table = "..datastring))
--   for k,v in pairs(status_table) do
--      print(k,":",v)
--   end
function gmcpdata_as_string(what)
   return serialize.save_simple(gmcpdata_at_level(what) or "")
end

-- toggle debug output
function gmcpdebug(name, line, wildcards)
   local newval = tonumber(wildcards[1])
   if not newval or newval > 2 or newval < 0 then
      ColourNote("#FFAF00", "", "GMCPDebug valid values are: 0 - off, 1 - simple, 2 - verbose")
      return
   end
   GMCPDebug = newval
   local msg = "off"
   if GMCPDebug == 1 then
      msg = "simple"
   elseif GMCPDebug == 2 then
      msg = "verbose"
   end
   ColourNote ("#FFAF00", "", "GMCPDebug: " .. msg)
end


function GMCP_send(what)
   if what == nil then
      print("GMCP_send passed a nil message.")
      return
   end

   SendPkt (string.char (IAC, SB, GMCP) ..
           (string.gsub (what, "\255", "\255\255")) ..  -- IAC becomes IAC IAC
            string.char (IAC, SE))
end

function GMCP_Alias (name, line, wildcards)
   GMCP_send(wildcards[1])
end

function OnPluginTelnetSubnegotiation (msg_type, data)
   if msg_type ~= GMCP then
      return
   end -- if not GMCP

   if GMCPDebug > 0 then ColourNote ("#FFAF00", "", utils.utf8convert(data)) end

   message, params = string.match (data, "([%a.]+)%s+(.*)")

   if not message then
      return
   end -- if

   if not string.match (params, "^[%[{]") then
      params =  "[" .. params .. "]"  -- JSON hack, make msg first element of an array. (I don't think this is needed - fiendish)
   end -- if

   local succ, t = pcall(json.decode,params)

   if succ and type(t) == "table" then
      gmcpdata = gmcpdata or {}

      -- find where to insert the new data
      local node = gmcpdata
      local prev_item = ""
      for next_item in string.gmatch(message,"%a+") do

         -- some messages don't have invariant structure, so always clear them
         if (next_item == "room" and message ~= "room.wrongdir") -- don't let room.wrongdir erase current room info
         or next_item == "comm" or next_item == "group" then
            node[next_item] = nil
         end

         node[next_item] = node[next_item] or {}
         node = node[next_item]
      end

      function clone(from, to)
         for k,v in pairs(from) do
            if type(v) == "table" then
               to[k] = to[k] or {}
               clone(from[k], to[k])
            else
               to[k] = tostring(v)
            end
         end
      end
      clone(t, node)

      if GMCPDebug > 1 then
         print ("gmcpdata serialized: " .. gmcpdata_as_string(""))
      end

      BroadcastPlugin(1,message)
  else
      ColourNote("white","red","GMCP DATA ERROR: "..t)
  end  -- if

end -- function OnPluginTelnetSubnegotiation

function gmcpdata_at_level(what)
   local node = gmcpdata
   for level in string.gmatch(what, "%a+") do
      if (type(node) ~= "table" or node[level] == nil) then return end
      node = node[level]
   end
   return node
end

function OnPluginInstall()
   BroadcastPlugin(1, "reload") -- reload basically tells other plugins "clear all your gmcp data"
   if IsConnected() then
      -- pretend like we just logged in
      OnPluginConnect()
   end
end

function OnPluginSaveState()
   SetVariable("GMCPDebug", GMCPDebug)
end

function OnPluginConnect()
   GMCP_send("request char")
   GMCP_send("request room")
   GMCP_send("request area")
   GMCP_send("request quest")
   GMCP_send("request group")
   GMCP_send("rawcolor on")
end

function OnPluginTelnetRequest (msg_type, data)
   if msg_type == GMCP and data == "WILL" then
      return true
   end -- if

   if msg_type == GMCP and data == "SENT_DO" then
      -- This hard-coded block may need to be made into a config table as we add more message types.
      GMCP_send (
         string.format ('Core.Hello { "client": "MUSHclient", "version": "%s" }',
                        Version().." r"..aard_extras.PackageVersionFull())
      )
      GMCP_send ('Core.Supports.Set [ "Char 1", "Comm 1", "Room 1" ]')
      return true
   end -- if GMCP login needed (just sent DO)

   return false
end -- function OnPluginTelnetRequest

function OnPluginDisable()
   EnablePlugin(GetPluginID(), true)
   ColourNote("white", "blue", "You are not allowed to disable the "..
   GetPluginInfo(GetPluginID(), 1).." plugin. It is necessary for other plugins.")
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
