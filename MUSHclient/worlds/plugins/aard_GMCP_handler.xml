<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, August 02, 2010, 2:17 PM -->
<!-- MuClient version 4.51 -->
<!-- Plugin "GMCPHandler" generated by Plugin Wizard -->

<muclient>

<plugin
   name="GMCP_handler"
   author="Fiendish"
   id="3e7dedbe37e44942dd46d264"
   language="Lua"
   purpose="Handle GMCP messages and broadcast data"
   save_state="y"
   date_written="2010-08-02 14:16:26"
   requires="4.59"
   version="1.0"
>
<description trim="y">

Aardwolf GMCP Handler

Purpose is to process incoming GMCP messages, notify other plugins
of arrival of new data, and make that data accessible.

For full details on GMCP in Aardwolf see:

   http://www.aardwolf.com/wiki/index.php/Clients/GMCP

For Mushclient specific information on how to access GMCP data, see:

   https://github.com/fiendish/aardwolfclientpackage/wiki/Using-GMCP

</description>

</plugin>

<aliases>
<alias
   script="gmcpdebug"
   match="^gmcpdebug (.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   match="sendgmcp *"
   script="GMCP_Alias"
   enabled="y"
   send_to="12"
   sequence="100"
></alias>

</aliases>

<triggers>
<trigger
   enabled="y"
   regexp="y"
   match="^You will (now|no longer) see prompts\.$"
   sequence="100"
   send_to="12"
>
<send>
   if "%1" == "now" then
      OnPluginTelnetSubnegotiation(201, 'config { "prompt" : "YES" }')
   else
      OnPluginTelnetSubnegotiation(201, 'config { "prompt" : "NO" }')
   end
</send>
</trigger>
<trigger
   enabled="y"
   regexp="y"
   match="^Compact mode (set|removed)\.$"
   sequence="100"
   send_to="12"
>
<send>
   if "%1" == "set" then
      OnPluginTelnetSubnegotiation(201, 'config { "compact" : "YES" }')
   else
      OnPluginTelnetSubnegotiation(201, 'config { "compact" : "NO" }')
   end
</send>
</trigger>
</triggers>

<!--  Get our standard constants -->

<script>
<![CDATA[

aard_extras = require "aard_lua_extras"
require "json"
require "serialize"
require "gmcphelper"

luacom = require "luacom"
if luacom then
   wshell = luacom.CreateObject("WScript.Shell")
end
if wshell then
   rr = wshell.RegRead
   rw = wshell.RegWrite
end
if rr and rw then
   ident_ok, ident = pcall(rr, wshell, "HKCU\\Software\\AardwolfMUSHclient\\Ident")
   if not ident_ok then
      pcall(rw, wshell, "HKCU\\Software\\AardwolfMUSHclient\\Ident", CreateGUID(), "REG_SZ")
      ident_ok, ident = pcall(rr, wshell, "HKCU\\Software\\AardwolfMUSHclient\\Ident")
   end
end
ident = ident_ok and ident or "{ident failed}"

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

local GMCP      = 201
local GMCPDebug = tonumber(GetVariable("GMCPDebug")) or 0


-- You can use CallPlugin to access any gmcp data via this function.
-- example:
--   local ret, datastring = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpdata_as_string", "char.status")
--   pcall(loadstring("status_table = "..datastring))
--   for k,v in pairs(status_table) do
--      print(k,":",v)
--   end
function gmcpdata_as_string(what)
   return serialize.save_simple(gmcpdata_at_level(what) or "")
end

-- toggle debug output
function gmcpdebug(name, line, wildcards)
   local newval = tonumber(wildcards[1])
   if not newval or newval > 2 or newval < 0 then
      ColourNote("#FFAF00", "", "GMCPDebug valid values are: 0 - off, 1 - simple, 2 - verbose")
      return
   end
   GMCPDebug = newval
   local msg = "off"
   if GMCPDebug == 1 then
      msg = "simple"
   elseif GMCPDebug == 2 then
      msg = "verbose"
   end
   ColourNote ("#FFAF00", "", "GMCPDebug: " .. msg)
end


function GMCP_Alias (name, line, wildcards)
   Send_GMCP_Packet(wildcards[1])
end

function OnPluginTelnetSubnegotiation (msg_type, data)
   if msg_type ~= GMCP then
      return
   end

   if GMCPDebug > 0 then ColourNote ("#FFAF00", "", utils.utf8convert(data)) end

   local message, params = string.match (data, "([%a.]+)%s+(.*)")

   if not message then
      return
   end

   if not string.match (params, "^[%[{]") then
      params =  "[" .. params .. "]"  -- JSON hack, make msg first element of an array. (I don't think this is needed - fiendish)
   end

   local succ, t = pcall(json.decode, params)

   if succ and type(t) == "table" then
      gmcpdata = gmcpdata or {}

      -- find where to insert the new data
      local node = gmcpdata
      local prev_node = nil
      local prev_item = ""
      for next_item in string.gmatch(message,"%a+") do
         node[next_item] = node[next_item] or {}
         prev_node = node
         prev_item = next_item
         node = node[next_item]
      end

      -- A loveletter.
      -- Some GMCP messages are just messages, not state. For example, the "current" comm.channel 
      -- message isn't a meaningful concept except in the exact moment it arrives (though most recent might be).
      -- Since room.area is not sent automatically, and is only ever sent in response to a request,
      -- having seen a room.area message tells you only what the area details were for the area your
      -- character was in at the time the request was processed, but has no relation to where you are
      -- after or even to the area your character was in when the request was sent and especially not
      -- to the actual transition from one area to the next. If you run 5e through an area entrance,
      -- you would be 5 rooms deep into a new area before that area info arrives back to you, with
      -- mismatching area info the whole way in.
      -- (You send run 5e, you go e, new area in room.info triggers sending request for room.area, you go 4e,
      -- room.area request seen by game, room.area response sent back, room.area response seen by client)
      -- If you had also run back out of the area, then you'd also be receiving room.area information
      -- after five moves for an area you are no longer in.
      -- I do this next part for your own good.
      if (message == "room.info") then
         gmcpdata["room"] = {}
         prev_node = gmcpdata["room"]
      end

      -- For some reason we've historically treated numbers as strings.
      -- It's bad form, but we should preserve that behavior.
      function stringify(things)
         for k,v in pairs(things) do
            if type(v) == "table" then
               stringify(v)
            else
               things[k] = tostring(v)
            end
         end
      end
      stringify(t)

      if prev_item == "config" then
         for k,v in pairs(t) do
            prev_node[prev_item][k] = v
         end
      else
         prev_node[prev_item] = t
      end

      if GMCPDebug > 1 then
         print ("gmcpdata serialized: " .. gmcpdata_as_string(""))
      end
      BroadcastPlugin(1, message)
      if message == "config" then
         BroadcastPlugin(1, "config."..next(t))
      end
  else
      ColourNote("white", "red", "GMCP DECODE ERROR: "..t)
      ColourNote("white", "red", "Received invalid GMCP message: "..utils.utf8convert(data))
      ColourNote("white", "red", "Please send that invalid message to Fiendish for analysis.")
      ColourNote("white", "red", "If this happens more than once, disconnect and reconnect to Aardwolf or restart MUSHclient.")
  end  -- if

end -- function OnPluginTelnetSubnegotiation

function gmcpdata_at_level(what)
   local node = gmcpdata
   for level in string.gmatch(what, "%a+") do
      if (type(node) ~= "table" or node[level] == nil) then return end
      node = node[level]
   end
   return node
end

function OnPluginInstall()
   BroadcastPlugin(1, "reload") -- reload basically tells other plugins "clear all your gmcp data"
   if IsConnected() then
      -- pretend like we just logged in
      OnPluginConnect()
   end
end

function OnPluginSaveState()
   SetVariable("GMCPDebug", GMCPDebug)
end

function OnPluginConnect()
   Send_GMCP_Packet("config compact")
   Send_GMCP_Packet("config prompt")
   Send_GMCP_Packet("config xterm yes")
   Send_GMCP_Packet("rawcolor on")
   Send_GMCP_Packet("request char")
   Send_GMCP_Packet("request room")
   Send_GMCP_Packet("request area")
   Send_GMCP_Packet("request quest")
   Send_GMCP_Packet("request group")
end

function OnPluginTelnetRequest (msg_type, data)
   if msg_type == GMCP and data == "WILL" then
      return true
   end -- if

   if msg_type == GMCP and data == "SENT_DO" then
      -- This hard-coded block may need to be made into a config table as we add more message types.
      Send_GMCP_Packet (
         string.format ('Core.Hello { "client": "MUSHclient", "version": "%s", "ident": "%s" }',
                        Version().." r"..aard_extras.PackageVersionFull(), ident)
      )
      Send_GMCP_Packet ('Core.Supports.Set [ "Char 1", "Comm 1", "Room 1" ]')
      return true
   end

   return false
end

function OnPluginDisable()
   EnablePlugin(GetPluginID(), true)
   ColourNote("white", "blue", "You are not allowed to disable the "..
   GetPluginInfo(GetPluginID(), 1).." plugin. It is necessary for other plugins.")
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
