<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>

<plugin
   name="Aardwolf_Helpfile_Window"
   author="Fiendish"
   id="a1965272c8ca966b76f36fa3"
   language="Lua"
   purpose="Capture Aardwolf in-game help to a miniwindow"
   date_written="2020-12-05 16:33:00"
   requires="5.07"
   version="1.0"
   save_state="y"
   sequence="-9999"
>
</plugin>

<aliases>
<alias
   match="^(h|he|hel|help)( .*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
><send>
Capture.command("%0", "^{help(search)?}$", "^{/help(search)?}$", true, false, true, false, draw_window)
</send>
</alias>
</aliases>

<script>
<![CDATA[
require "themed_miniwindows"
require "wrapped_captures"
require "gmcphelper"
dofile(GetInfo(60).."telnet_options.lua")

WINDOW_ID = GetPluginID()

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function sanitize_response(style_lines)
   local new_styles = {}
   local startdone = false -- help search starts with a blank line that I want to remove
   for _,line in ipairs(style_lines) do
      if startdone or (line[1].length > 0) then
         startdone = true
         if (line[1].text ~= "{helpbody}") and (line[1].text ~= "{/helpbody}") then
            if line[1].text == "{helpkeywords}" then
               line[1].text = ""
               line[1].length = 0
            end
            table.insert(new_styles, line)
         end
      end
   end
   return new_styles
end

function draw_window(window_styles, keep_position)
   if window_styles == nil then
      return
   end
   ColourNote("paleturquoise", "", "Help Captured To Miniwindow")
   window_styles = sanitize_response(window_styles)

   -- I create a zero-size window first, because MUSHclient has a limitation
   -- where you can only find the width of some text from inside a miniwindow,
   -- and I want to use font metrics to set exactly the right width and height.
   -- I set the defer_showing flag to true because I'm going to move it after
   -- creation and I don't want to see it jump around.
   my_window = ThemedTextWindow(
      WINDOW_ID,
      0,
      0,
      0,
      0,
      "Aardwolf In-Game Help",
      "center",
      true,
      false,
      true,
      true,
      true,
      true,
      true,
      nil,
      nil,
      GetAlphaOption("output_font_name"),
      GetOption("output_font_height"),
      nil,
      nil,
      true
   )

   -- Load the contents of the helpfile into the window.
   for _, styles in ipairs(window_styles) do
      my_window:add_text(styles, false)
   end

   -- Now that the window is populated, use its font metrics to set the right
   -- width and height, but give reasonable maxima so it doesn't go off the
   -- screen.
   my_window:fit_contents(GetInfo(281)-20, GetInfo(280)-80)

   -- Now that the size is set, center the window on the screen if we're not
   -- just changing themes.
   if not keep_position then
      -- Use fixed position instead of the auto-centering mode because of a
      -- subtle position retrieval conflict during theme changes between
      -- movewindow and WindowPosition.
      WindowPosition(WINDOW_ID, (GetInfo(281)-my_window.width)/2, (GetInfo(280)-my_window.height)/2, 12, 18)
   end

   -- Make sure we're scrolled up to the top.
   my_window:set_scroll(1)

   -- Add a button to the title bar that will echo the helpfile to the main area.
   local button_width = my_window:text_width("Print") + 10
   my_window:add_3d_text_button(
      "print_button",
      my_window.width - button_width,
      -1,
      "Print",
      nil,
      "Print Helpfile In Main Output",
      nil,
      function() for _,v in ipairs(window_styles) do Simulate(stylesToANSI(v).."\n") end end,
      nil,
      nil,
      nil,
      button_width,
      my_window.bodytop
   )

   -- I used the defer_showing flag, so now I have to show the window.
   my_window:show()

   -- Make sure it isn't behind any other miniwindows.
   my_window:bring_to_front()
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginEnable()
   if IsConnected() then
      OnPluginConnect()
   end
end

function OnPluginConnect()
   Send_GMCP_Packet("tags on")
   TelnetOptionOn(TELOPT_HELPS)
end

function OnPluginThemeChange()
   -- Miniwindow color themes are applied at their creation, so create an
   -- existing window again if the theme changes.
   if WindowInfo(WINDOW_ID, 1) ~= nil then
      draw_window(my_window:get_styles(), true)
   end
end

]]>
</script>
</muclient>
