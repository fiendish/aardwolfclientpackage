<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>

<plugin
   name="Aardwolf_Helpfile_Window"
   author="Fiendish"
   id="a1965272c8ca966b76f36fa3"
   language="Lua"
   purpose="Capture Aardwolf in-game help to a miniwindow"
   date_written="2020-12-05 16:33:00"
   requires="5.07"
   version="1.0"
   save_state="y"
   sequence="-9999"
>
</plugin>

<aliases>
<alias
   match="^(h|he|hel|help) +search +(.+)$"
   enabled="y"
   regexp="y"
   sequence="99"
   ignore_case="y"
   send_to="12"
><send>
search_query = "%2"
search_msg = ColoursToStyles("@Yhelp search '%2'")
Capture.command("%0", "^{helpsearch}$", "^{/helpsearch}$", true, false, true, false, process_response)
</send>
</alias>

<alias
   match="^(h|he|hel|help)( .*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
><send>
search_msg = nil
local subject = Trim("%2")
if subject == "updated" then
   SendNoEcho("%0")
else
   if (string.sub(subject, 1, 7) == "updated") then
      notfound_message = nil
   else
      notfound_message = build_notfound_message(subject)
   end
   Capture.command("%0", "^{help(search)?}$", "^{/help(search)?}$", true, false, true, false, process_response)
end
</send>
</alias>

<alias
   match="closehelp"
   enabled="y"
   regexp="n"
   sequence="100"
   ignore_case="y"
   send_to="12"
><send>
if my_window and my_window.id then
   my_window:delete()
end
</send>
</alias>

<alias
   name="resetaard"
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
><send>
remember_position = GetVariable("remember_position")
DeleteVariable("remember_position")
if my_window and my_window.id then
   build_window(prev_window_styles, prev_hyperlinks_function)
end
SetVariable("remember_position", remember_position or "0")
if my_window and my_window.id then
   build_window(prev_window_styles, prev_hyperlinks_function)
end
</send>
</alias>

</aliases>

<script>
<![CDATA[
require "aardwolf_colors"
require "themed_miniwindows"
require "wrapped_captures"
require "gmcphelper"
dofile(GetInfo(60).."telnet_options.lua")


function build_notfound_message(subject)
   return ColoursToStyles(
      "@WHelp '"..Trim(string.lower(subject)).."' was not found - possible alternatives are:"
   )
end


string.starts_with = function(self, start)
   return self:sub(1, #start) == start
end

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function sanitize_search(style_lines)
   if search_msg then
      table.insert(style_lines, 1, search_msg)
   else
      style_lines[1] = notfound_message or style_lines[1]
      table.insert(style_lines, 2, ColoursToStyles(""))
   end

   return style_lines
end

function highlight_in_styles(styles, match)
   local new_styles = {}
   local text = strip_colours_from_styles(styles)
   local split_text = text:lower():split(match:lower(), true)
   local prev = 0

   for i,v in ipairs(split_text) do
      local len_v = #v
      if len_v > 0 then
         for _,w in ipairs(TruncateStyles(styles, prev + 1, prev + len_v)) do
            if i % 2 == 0 then
               w.backcolour = 65535
               w.textcolour = 0
               w.bold = false
            end
            table.insert(new_styles, w)
         end
         prev = prev + len_v
      end
   end

   if #new_styles == 0 then
      new_styles = styles
   end
   return new_styles
end

function sanitize_help(style_lines)
   local new_lines = {}
   for _,line in ipairs(style_lines) do
      if not line[1].text:find("^%s*{/?helpbody}%s*$") then
         if line[1].text:find("^%s*{helpkeywords}%s*$") then
            line[1].text = ""
            line[1].length = 0
         end
         if search_query then
            line = highlight_in_styles(line, search_query)
         end
         table.insert(new_lines, line)
      end
   end

   search_query = nil
   return new_lines
end

string.find_indices = function(self, pattern, after, before)
   local before = before or #self+1
   local after = after or 0
   local text = self:sub(after+1, before):gsub("%s+$", "")
   if pattern == nil then
      return {{text=text, start=after+1, stop=#text}}
   end
   local indices = {}
   local first, last = 0, 0
   while true do
      first, last = text:find(pattern, last+1)
      if (not first) then break end
      table.insert(indices, {text=text:sub(first, last), start=after+first, stop=after+last})
   end
   return indices
end

function build_links(links, verb)
   for _,v in ipairs(links) do
      local text = v.text
      v.label = verb.." "..text
      v.text = 'Capture.command("'..verb.." "..text..'", "^{help}$", "^{/help}$", true, false, true, false, process_response)'
      if verb == "help" then
         v.text = 'search_msg = nil;notfound_message = build_notfound_message("'..Trim(text)..'");'..v.text
      end
   end
   return links
end

function get_related_help_hyperlinks(style_lines)
   local related_helps = {}
   local related_categories = {}
   for i,line in ipairs(style_lines) do
      local text = strip_colours_from_styles(line)
      if text:starts_with("Related Helps") then
         related_helps[i] = text:find_indices("%w[%w&%- ]*%w", #"Related Helps : ", nil)
         related_helps[i] = build_links(related_helps[i], "help")
      -- elseif text:starts_with("Help Category") then
         -- related_categories[i] = text:find_indices("[%w-]+[%w- ]*", #"Help Category", nil)
         -- related_categories[i] = build_links(related_categories[i], "contents")
      end
   end
   return related_helps, related_categories
end

function get_search_hyperlinks(style_lines)
   local related_helps = {}
   for i,line in ipairs(style_lines) do
      if
         (#line >= 2)
         and (line[1].textcolour == GetNormalColour(7))
         and (line[2].textcolour == GetNormalColour(8))
      then
         local text = Trim(line[1].text)
         if text then
            related_helps[i] = build_links({{text=text, start=1, stop=#text}}, "help")
         end
      end
   end
   return related_helps, {}
end

function no_help(window_styles)
   -- Is this just saying there's no help?
   local first_line = window_styles[1][1].text
   if (first_line == "There is no help with that keyword.") or (first_line == "No helpfiles matched requested search.") then
      for _,v in ipairs(window_styles) do
         Simulate(stylesToANSI(v).."\r\n")
      end
      return true
   end
end

function process_response(window_styles, start_line, end_line)
   if window_styles == nil then
      return
   end

   -- Remove trailing blank space because it makes wrapping worse.
   for i,line_styles in ipairs(window_styles) do
      window_styles[i] = ColoursToStyles(Trim(StylesToColours(line_styles)))
   end

   if start_line == '{helpsearch}' then
      process_search(window_styles)
   else
      process_help(window_styles)
   end
end

function process_help(window_styles)
   if no_help(window_styles) then
      return
   end
   local window_styles = sanitize_help(window_styles)
   build_window(window_styles, get_related_help_hyperlinks)
end

function process_search(window_styles)
   if no_help(window_styles) then
      return
   end
   local window_styles = sanitize_search(window_styles)
   build_window(window_styles, get_search_hyperlinks)
end

function build_window(window_styles, hyperlinks_function)
   prev_window_styles = window_styles
   prev_hyperlinks_function = hyperlinks_function
   ColourNote("paleturquoise", "", "Help Captured To Miniwindow")

   local related_helps, related_categories = hyperlinks_function(window_styles)

   -- I create a zero-size window first, because MUSHclient has a limitation
   -- where you can only find the width of some text from inside a miniwindow,
   -- and I want to use font metrics to set exactly the right width and height.
   -- I set the defer_showing flag to true because I'm going to move it after
   -- creation and I don't want to see it jump around.
   my_window = ThemedTextWindow(
      GetPluginID(),  -- id
      0,  -- default_left_position
      0,  -- default_top_position
      0,  -- default_width
      0,  -- default_height
      "Aardwolf In-Game Help",  -- title
      "center",  -- title alignment
      true,  -- is_temporary (closeable)
      true,  -- resizeable
      true,  -- text_scrollable
      true,  -- text_selectable
      true,  -- text_copyable
      true,  -- url_hyperlinks
      true,  -- autowrap
      nil,  -- title_font_name
      nil,  -- title_font_size
      GetAlphaOption("output_font_name"), -- text_font_name
      GetOption("output_font_height"),  -- text_font_size
      5000,  -- text_max_lines
      nil,  -- text_padding
      true  -- defer_showing
   )

   -- TODO: move this into themed_miniwindows.lua
   local remember_position = GetVariable("remember_position") == "1"
   table.insert(my_window.menu_table, "-")
   table.insert(my_window.menu_table, "Print Current Help To Main Output")
   table.insert(my_window.menu_table, (remember_position and "+" or "").."Remember Position")
   table.insert(
      my_window.menu_handlers,
      function()
         if gmcp("config.compact") == "NO" then
            Note()
         end
         for _,line in ipairs(my_window:get_styles()) do
            AnsiNote(stylesToANSI(line))
         end
      end
   )
   table.insert(
      my_window.menu_handlers,
      function()
         local remember_position = GetVariable("remember_position") == "1"
         my_window.menu_table[#my_window.menu_table] = (remember_position and "" or "+").."Remember Position"
         if remember_position then
            SetVariable("remember_position", "0")
         else
            SetVariable("remember_position", "1")
         end
         SaveState()
      end
   )
   my_window.textrect:setExternalMenuFunction(
      function(selection)
         menu_string, menu_handlers = my_window:get_menu_items()
         if selection then
            command = "HELP "..selection:gsub("(.)\n(.)", "%1 %2"):gsub("\n", ""):upper()
            menu_string = "Send '"..command.."'|-|"..menu_string
            table.insert(menu_handlers, 1, function() Execute(command) end)
         end
         return menu_string, menu_handlers
      end
   )

   -- Load the contents of the helpfile into the window.
   for i, styles in ipairs(window_styles) do
      my_window:add_text(styles, false, related_helps[i] or related_categories[i])
   end

   -- Now that the window is populated, set the size and position if new.
   if not remember_position then
      my_window:fit_contents(GetInfo(281)-20, GetInfo(280)-80)
      -- Use fixed position instead of the auto-centering mode because of a
      -- subtle position retrieval conflict during theme changes between
      -- movewindow and WindowPosition.
      WindowPosition(my_window.id, (GetInfo(281)-my_window.width)/2, (GetInfo(280)-my_window.height)/2, 12, 18)
   end

   -- Make sure we're scrolled up to the top.
   my_window:set_scroll(1)

   -- I used the defer_showing flag, so now I have to show the window.
   my_window:show()

   -- Make sure it isn't behind any other miniwindows.
   my_window:bring_to_front()
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginEnable()
   if IsConnected() then
      OnPluginConnect()
   end
end

function OnPluginConnect()
   Send_GMCP_Packet("tags on")
   TelnetOptionOn(TELOPT_HELPS)
end

function OnPluginDisable()
   if IsConnected() then
      TelnetOptionOff(TELOPT_HELPS)
   end
end

function OnPluginClose()
   OnPluginDisable()
end

]]>
</script>
</muclient>
