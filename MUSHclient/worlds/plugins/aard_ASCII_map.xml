<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, August 29, 2010, 3:35 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "aard_mapper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Ascii_Mapper"
   author="Fiendish"
   id="3f498d929793c12cb70fb59e"
   language="Lua"
   purpose="Aardwolf ASCII mapper"
   date_written="2010-08-29 15:35:02"
   requires="4.73"
   version="2.0"
   save_state="y"
   >

<description trim="y">
Captures the Aardwolf automap and roomname into a draggable/resizeable mini-window.

Combination of initial work from many sources including Nick Gammon, Bast, Fiendish,
Blainer and others. All cobbled together by Lasher. And then recobbled by Fiendish again
and made more awesomer.
</description>

</plugin>

<timers>
  <timer name="activity_timer"
   second="0"
   minute="2"
   send_to="12"
   enabled="y"
   >
  <send>
    EnableTimer ("activity_timer", 0)
  </send>
  </timer>
</timers>

<aliases>
<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

<alias
   match="maptype *"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
>
<send>
   local temptype = tonumber("%1")
   if temptype and (temptype &gt;= 0) and (temptype &lt;= 6) then
      maptype = temptype
      SaveState()
      OnPluginInstall()
   end
   Send("maptype %1 session")
</send>
</alias>
</aliases>

<triggers>

<trigger
   enabled="y"
   match="<MAPSTART>"
   script="map_redirect"
   omit_from_output="y"
   name="map_start"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers()</send>
</trigger>

<trigger
   enabled="n"
   match="*"
   script="map_body_redirect"
   name="multi_line_map"
   omit_from_output="y"
   sequence="10"
   send_to="12"
><send>StopEvaluatingTriggers()</send>
</trigger>

<trigger
   enabled="y"
   match="<MAPEND>"
   script="map_redirect"
   omit_from_output="y"
   name="map_end"
   sequence="5"
   send_to="12"
><send>
StopEvaluatingTriggers()
EnableTriggerGroup("end_gag", true)
</send>
</trigger>
<trigger
   enabled="y"
   match="You open *."
   sequence="100"
   script="request_new_map"
   group="room_change"
></trigger>

<trigger
   enabled="y"
   match="You close *."
   sequence="100"
   script="request_new_map"
   group="room_change"
></trigger>

<trigger
   enabled="y"
   match="* opens*."
   sequence="100"
   script="request_new_map"
   group="room_change"
></trigger>

<trigger
   enabled="y"
   match="* closes*."
   sequence="100"
   script="request_new_map"
   group="room_change"
></trigger>

<trigger
   enabled="y"
   match="You can now sense anger in your immediate area."
   sequence="100"
   script="request_new_map"
   group="room_change"
></trigger>

<trigger
   enabled="y"
   match="{rdesc}"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>EnableTriggerGroup("room_change", false)</send>
</trigger>

<trigger
   enabled="y"
   match="{/rdesc}"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>EnableTriggerGroup("room_change", true)</send>
</trigger>

<trigger
enabled="n"
match="^$"
regexp="y"
name="end_gag_omit"
group="end_gag"
omit_from_output="y"
sequence="100"
send_to="12"
>
<send>
EnableTriggerGroup("end_gag", false)
</send>
</trigger>

<trigger
enabled="n"
match=".+"
regexp="y"
name="end_gag_keep"
group="end_gag"
omit_from_output="n"
sequence="101"
send_to="12"
>
<send>
EnableTriggerGroup("end_gag", false)
</send>
</trigger>


</triggers>

<script>
<![CDATA[

require "mw_theme_base"
require "gmcphelper"
require "movewindow"
require "mw"

default_width         = 209
default_height        = 263
default_x             = 658
default_y             = 0
map_lines = {}
coord_data= {}
show_coords = 0

MIN_SIZE        = 100

-- Variables not saved.
startx           = ""
starty           = ""
posx             = ""
posy             = ""
hotspot_id       = ""
requested_since_empty       = false

always_echo_rooms = {
-- "A Garden" via FT2 Gardener's Brain Control Room
    ["26841"]=true, ["26846"]=true, ["26828"]=true, ["26829"]=true, ["26824"]=true, ["26842"]=true, ["26843"]=true, ["26825"]=true, ["26830"]=true, ["26831"]=true, ["26826"]=true, ["26844"]=true, ["26827"]=true
}

continents = { [0]="Mesolar", [1]="Southern Ocean", [2]="Gelidus", [3]="Abend", [4]="Alagh", [5]="Uncharted Ocean", [6]="Vidblain" }

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")


function reset_aard()
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, default_height, Theme.PRIMARY_BODY)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   SaveState()
   OnPluginInstall()
end

kinda_busy = 0
requesting = false
function request_new_map()
   if GetTimerOption("activity_timer", "enabled") == 1 and can_request_map and not requesting and kinda_busy == 0 then
      requesting = true
      requested_since_empty = true
      SendNoEcho("map")
      EnableTriggerGroup("end_gag", true)
   end
end

roomnum = ""

function map_redirect (name, line, wildcards, styles)
   EnableTrigger ("multi_line_map", true)  -- capture subsequent lines
   if name == "map_start" then   --- Setup the window.
      map_lines = {} --reset ready for new map
   elseif name == "map_end" then
      EnableTrigger("multi_line_map", false)  -- no more lines to go
      requesting = false
      DisplayMapPage() --end of map from MUD, display the window

      if (also_echo_map == 1) or always_echo_rooms[roomnum] then
         for i,line in ipairs(map_lines) do
            if i > 3 and i < #map_lines then
               for _,v in ipairs(line) do
                  ColourTell(RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), ((GetOption("utf_8") == 1) and v.text) or utf8_map_text_to_ascii(v.text))
               end
               Note("")
            end
         end
      end
   end
end -- function map_redirect

--E294xx
utf8_2_ascii = {
["82"]="7C", -- |
["80"]="2D", -- -
["8C"]="20",
["90"]="20",
["98"]="20",
["94"]="20",
["AC"]="20", -- vertical end cap T
["B4"]="20", -- vertical end cap T
["A4"]="7C",
["9C"]="7C"
}

--E295xx
utf8_2_ascii2 = {
["91"]="7C", -- ||
["90"]="2D", -- =
["A5"]="20",
["9D"]="20",
["9A"]="20",
["94"]="20",
["97"]="20",
["A8"]="20",
["A3"]="7C",
["A0"]="7C",
["A9"]="2D",
["A6"]="2D"
}

function utf8_map_text_to_ascii(text)
   text = utils.tohex(text)

   -- replace vertical three way intersections with "-"
   text = string.gsub(text, "E29480E294B4E29480", "2D2D2D")
   text = string.gsub(text, "E29480E294ACE29480", "2D2D2D")

   -- drop extra long ends
   text = string.gsub(text, "E2948020", "2020") -- "- "
   text = string.gsub(text, "20E29480", "2020") -- " -"
   text = string.gsub(text, "E2959020", "2020") -- "= "
   text = string.gsub(text, "20E29590", "2020") -- " ="
   text = string.gsub(text, "E29480$", "20") -- "- "
   text = string.gsub(text, "^E29480", "20") -- " -"
   text = string.gsub(text, "E29590$", "20") -- "= "
   text = string.gsub(text, "^E29590", "20") -- " ="

   text = string.gsub(text, "E294(%x%x)", utf8_2_ascii)
   return utils.fromhex(string.gsub(text, "E295(%x%x)", utf8_2_ascii2))
end

function map_body_redirect(name, line, wildcards, styles)
   table.insert(map_lines, styles)
end

current_room_name = "\n"
function resize_window()
   WindowResize(win, width, height, Theme.SECONDARY_BODY)

   DisplayMapPage()
end

title_color = Theme.THREE_D_SURFACE_DETAIL
blink_cycle = {
   0x0000FF,
   0x00FFFF,
   Theme.THREE_D_SURFACE_DETAIL
}
function blink_title(lines)
   if show_title == 1 then
      next_blink_color = (next_blink_color % (#blink_cycle)) + 1
      title_color = blink_cycle[next_blink_color]
      draw_title()
      CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
   end
end

function draw_title()
   local text_left = Theme.TITLE_PADDING + 2
   local text_right = WindowInfo(win, 3) - Theme.TITLE_PADDING - 2
   for i = 1,2 do
      local text_top = (font_height * (i-1)) + Theme.TITLE_PADDING
      Theme.WindowText(win, font_id, title_lines[i], text_left, text_top, text_right, bodytop, title_color)
   end
end

function DisplayMapPage()
   styles = { }
   bodyleft, bodytop, bodyright, bodybottom = Theme.DressWindow(win, font_id, "\n", "left")
   if (show_title == 1) and (map_lines[1] ~= nil) then
      title_lines = {strip_colours_from_styles(map_lines[1]), strip_colours_from_styles(map_lines[2])}
      draw_title()
      if is_pk then
         next_blink_color = 0
         blink_title()
         AddTimer("blink_title", 0, 0, 0.5, "", timer_flag.Enabled + timer_flag.Temporary + timer_flag.Replace, "blink_title")
      end
   end
   movewindow.add_drag_handler(win, 0, 0, 0, 0)
   WindowRectOp(win, 2, bodyleft, bodytop, bodyright+1, bodybottom+1, Theme.PRIMARY_BODY) -- blank

   if WindowTextWidth(win, font_id, "i") ~= WindowTextWidth(win, font_id, "w") then
      line = -font_height-5
      txt = "This plugin's configured font"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
      line = line+font_height+5
      txt = "[ "..font_name.." ]"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
      line = line+font_height+5
      txt = "is not a monospace font."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
      line = line+font_height+5
      txt = "Right-click here to pick another."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
   elseif not requested_since_empty then
      line = -font_height-5
      txt = "The map will appear"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
      line = line+font_height+5
      txt = "when play begins."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+line, bodyright, bodybottom, Theme.BODY_TEXT)
   else -- display the map lines
      -- Add legend-popup handler
      WindowAddHotspot(win, "legend", bodyleft, bodytop, bodyleft+(3*font_width), bodytop+font_height+5 , "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", miniwin.cursor_help, 0)
      Theme.DrawTextBox(win, font_id, bodyleft+2, bodytop+1, "?", false, true)

      local n = #map_lines
      for i = 3, n-1 do
         Display_Line(i, map_lines[i])
      end -- for

      if show_exits == 1 then
         Display_Line(n, map_lines[n])
      end

      -- tack on coordinates after the map displays
      if (show_coords == 1 and coords ~= nil) then
         Display_Line(n+show_exits, coords)
      end
   end

   Theme.AddResizeTag(win, 1, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")

   -- show it now (or refresh)
   WindowShow(win, true)
   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
end -- Display_Map

function process_coords ()
   if (coord_data.id == "-1") then
      coords = nil
      return
   end

   local tstyle = {}
   local style = {}
   style.text = "["
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   style.text = " Coords: "
   style.len = #style.text
   style.textcolour = 0xF0FFFF
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   tempval = tonumber(coord_data.id)

   style.text = continents[tempval] .. " " .. coord_data.x .. " " .. coord_data.y
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   style.text = "]"
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)
   coords = tstyle
end

function line_height(i)
   return ((i - 4 - 0.1) * (font_height)) + bodytop
end

function Display_Line (line, styles)
   local id = font_id
   local left = Theme.TITLE_PADDING + 2

   local top = line_height(line)

   for _, v in ipairs (styles) do
      local color = v.textcolour
      if (line <= 2) and (color == 65280) then -- replace plain green in room names
         color = Theme.BODY_TEXT
      end
      local ret = WindowText (win, id, v.text, left, top, bodyright, bodybottom, color, true) -- try utf8 first
      if (ret >= 0) then
         left = left + ret
      else
         left = left + WindowText (win, id, v.text, left, top, bodyright, bodybottom, color, false)
      end
   end -- for each style run
end -- Display_Line

-- right click menu
function right_click_menu ()

   menustring = "Change Font|>Map Type|"
   menustring = menustring .. ((maptype == 0 and "+") or "") .. "0 - Standard ASCII based map|"
   menustring = menustring .. ((maptype == 1 and "+") or "") .. "1 - Solid single line map|"
   menustring = menustring .. ((maptype == 2 and "+") or "") .. "2 - Solid double line map|"
   menustring = menustring .. ((maptype == 3 and "+") or "") .. "3 - Solid single line map (no end caps)|"
   menustring = menustring .. ((maptype == 4 and "+") or "") .. "4 - Solid double line map (no end caps)|"
   menustring = menustring .. ((maptype == 5 and "+") or "") .. "5 - Solid single line map (extended walls)|"
   menustring = menustring .. ((maptype == 6 and "+") or "") .. "6 - Solid double line map (extended walls)|"
   menustring = menustring .. "<|-|"
   menustring = (menustring .. (((show_title == 1) and "+") or "") .. "Show Room Name|")
   menustring = (menustring .. (((show_exits == 1) and "+") or "") .. "Show Exits|")
   menustring = (menustring .. (((show_coords == 1) and "+") or "") .. "Show Coordinates|")
   menustring = (menustring .. (((also_echo_map == 1) and "+") or "") .. "Also Show Map In Main Output")
   menustring = (menustring .. "|-|Bring To Front|Send To Back|-|Reset Defaults")

   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content

   if result == "Show Room Name" then
      show_title = (((show_title == 0) and 1) or 0)
   elseif result == "Show Exits" then
      show_exits = (((show_exits == 0) and 1) or 0)
   elseif result == "Show Coordinates" then
      show_coords = (((show_coords == 0) and 1) or 0)
   elseif result == "Change Font" then
      wanted_font = utils.fontpicker (font_name, font_size) --font dialog
      if wanted_font then
         font_name = wanted_font.name
         font_size = wanted_font.size
      end
   elseif result == "Bring To Front" then
      CallPlugin("462b665ecb569efbf261422f","boostMe", win)
   elseif result == "Send To Back" then
      CallPlugin("462b665ecb569efbf261422f","dropMe", win)
   elseif result == "Also Show Map In Main Output" then
      also_echo_map = (((also_echo_map == 0) and 1) or 0)
      if also_echo_map == 1 then
         request_new_map()
      end
   elseif result == "Reset Defaults" then
      font_name = default_font_name
      font_size = default_font_size
      height = default_height
      width = default_width
      show_coords = 0
      show_exits = 0
      also_echo_map = 0
      show_title = 1
   elseif result ~= "" then
      maptype = tonumber(result:sub(1,1))
      Send_GMCP_Packet("maptype "..maptype)
      request_new_map()
   end -- if
   if result ~= "" then
      -- save and reload
      OnPluginCommand()
      SaveState()
      OnPluginInstall(true)
   end
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
can_request_map = false
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         requested_since_empty = false
         can_request_map = true
         return
      end

      if (text == "room.info") then
         room_info = gmcp("room.info")
         title_color = Theme.THREE_D_SURFACE_DETAIL
         is_pk = false
         for _,v in ipairs(utils.split(room_info.details, ",")) do
            if v == "pk" then
               is_pk = true
               break
            end
         end
         if not is_pk then
            DeleteTimer("blink_title")
         end
         coord_data = room_info.coord
         roomnum = room_info.num
         if (show_coords == 1) then
            process_coords()
         end
         if (not requested_since_empty) and (GetOption("enable_triggers") == 1) then
            request_new_map()
         end
      elseif (text == "comm.repop") then
         request_new_map()
      elseif (text == "char.vitals") then
         -- the mud doesn't send a map update when you die (part1)
         myhp = tonumber(gmcp("char.vitals.hp"))
         if myhp == 1 then
            if (char_state == 11) and not died then
               died = true
               request_new_map()
            end
         else
            died = false
         end
      elseif (text == "char.status") then
         char_state = tonumber(gmcp("char.status.state"))
         can_request_map = ((char_state == 3) or (char_state == 11))
         if (char_state == 11) and (myhp == 1) and not died then
            -- the mud doesn't send a map update when you die (part2)
            died = true
            requested_since_empty = false
         end
         if not requested_since_empty then
            request_new_map()
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   elseif (msg == 999 and text == "kinda_busy") then
      kinda_busy = kinda_busy + 1
   elseif (msg == 999 and text == "ok_you_can_go_now") then
      kinda_busy = kinda_busy - 1
      if kinda_busy < 0 then kinda_busy = 0 end
   end
end

---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end

   height = height + posy - starty
   starty = posy
   if (height < MIN_SIZE) then
      height = MIN_SIZE
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      resize_window()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
   resize_window()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

function MouseOver(flags, hotspotid)

   if (hotspotid ~= "legend") then return end

   -- work out coordinates
   local left =  WindowInfo(win, 10)
   local top =  WindowInfo(win, 11)

   -- what to say - one line per table entry, with imbedded colour codes
   local info = {
      ColoursToStyles("@wMap Legend:"),
      ColoursToStyles("@w"),
      ColoursToStyles("@w  @M#@w  - You                      @w---@w - North/south wall"),
      ColoursToStyles("@w  @R*@w  - Other players             @w|@w  - East/west wall"),
      ColoursToStyles("@w  @Y!@w  - Mobiles                   @w+@w  - Door (closed)"),
      ColoursToStyles("@w  @C!@w  - Pet/other charmed mob     @B+@w  - Door (locked)"),
      ColoursToStyles("@w  @R!@w  - Angry mob (with Sense     @w>@w  - Up exit"),
      ColoursToStyles("@w       Anger cast)               @y>@w  - Up exit (closed)"),
      ColoursToStyles("@w  @G!@w  - Unkillable Mob            @w<@w  - Down exit"),
      ColoursToStyles("@w  @G$@w  - Shopkeeper                @y<@w  - Down exit (closed)"),
      ColoursToStyles("@w @C[@w@W?@w@C]@w - Area exit                 @r#@w  - PK-flagged room"),
      ColoursToStyles("@w @G[@w@W?@w@G]@w - Clan public hall exit     @RD@w  - Donation room"),
      ColoursToStyles("@w"),
      ColoursToStyles("@wMajor Terrains:"),
      ColoursToStyles("@w"),
      ColoursToStyles("@w @w[ ]@w   Inside                   @w. .@w   City"),
      ColoursToStyles("@w @g, `@w   Field                    @G; ;@w   Hills"),
      ColoursToStyles("@w @y/ \\@w   Mountain                 @B~ ~@w   Water"),
      ColoursToStyles("@w @B~ ~@w   Waternoswim              @c. .@w   Air"),
      ColoursToStyles("@w @y~ ~@w   Desert                   @Y% %@w   Quicksand"),
      ColoursToStyles("@w @b~ ~@w   Underwater               @C~ ~@w   Ice"),
      ColoursToStyles("@w @B. .@w   Underground              @w- -@w   East/West road"),
      ColoursToStyles("@w @w. .@w   North/South road         @C~ ~@w   River"),
      ColoursToStyles("@w @R/ \\@w   Volcano                  @b% %@w   Cave"),
      ColoursToStyles("@w @w# #@w   Dungeon                  @g( *@w   Forest"),
      ColoursToStyles("@w"),
      ColoursToStyles("@wFind more in '@Yhelp sectors@w'.")
   }

   for i,v in ipairs(info) do
      for j,w in ipairs(v) do
         if j % 2 == 1 then
            w.textcolour = nil
         end
      end
   end

   heading = ""
   Theme.Popup(infowin,           -- window name to use
         font_id,           -- font to use for each line
         info,              -- table of lines to show
         windowinfo.window_left-1, windowinfo.window_top-1, -- preferred placement
         windowinfo.window_left, -- keep left of this
         windowinfo.window_left + width) -- keep right of this

end -- mouseover

function CancelMouseOver(flags, hotspotid)
   WindowShow(infowin, false)
end -- cancelmouseover

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function OnPluginConnect()
   requested_since_empty = false
   Send_GMCP_Packet("tags on")
   TelnetOptionOn(TELOPT_MAP)
   TelnetOptionOff(TELOPT_SHORTMAP)
   TelnetOptionOn(TELOPT_ROOM_NAMES)
   TelnetOptionOn(TELOPT_EXIT_NAMES)
   TelnetOptionOn(TELOPT_ROOMDESC_TAGS)
   TelnetOptionOn(TELOPT_AUTOMAP) -- does this do anything?
   Send_GMCP_Packet("maptype "..maptype)
   Send_GMCP_Packet("request char")
   Send_GMCP_Packet("request room")
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState()
   movewindow.save_state (win)   -- save window current location for next time
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable ("width", width)
   SetVariable ("height", height)
   SetVariable ("showcoords", show_coords)
   SetVariable ("showexits", show_exits)
   SetVariable ("showtitle", show_title)
   SetVariable ("font_name", font_name)
   SetVariable ("font_size", font_size)
   SetVariable ("also_echo_map", also_echo_map)
   SetVariable ("maptype", maptype)
end -- OnPluginSaveState

function OnPluginClose ()
   OnPluginDisable()
   WindowDelete(win)
end

function OnPluginDisable ()
   WindowShow( win, false )
   if IsConnected() then
      Send_GMCP_Packet("maptype -1")
      TelnetOptionOff(TELOPT_ROOMDESC_TAGS)
      if (also_echo_map == 0) then
         TelnetOptionOff(TELOPT_MAP)
         TelnetOptionOff(TELOPT_AUTOMAP) -- does this do anything?
      end
   end
   SaveState()
end --  OnPluginDisable

function OnPluginEnable ()
   WindowShow (win, true)
   if IsConnected() then
      OnPluginConnect()
   end
   SaveState()
end -- OnPluginEnable

win = GetPluginID()
function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
end

function setDefaultFont()
   local fonts = utils.getfontfamilies ()

   -- install Dina as a backup
   if not fonts.Dina then
      AddFont (GetInfo (66) .. "\\Dina.fon")
      fonts = utils.getfontfamilies ()
   end

   default_font_size = 9
   if fonts["Courier New"] then
      default_font_name = "Courier New"
   elseif fonts ["Lucida Console"] then
      default_font_name = "Lucida Console"
   elseif fonts ["Liberation Mono"] then
      default_font_name = "Liberation Mono"
   else
      default_font_name = "Dina"
   end
end

setDefaultFont()

function OnPluginInstall(skip_requests)
   --- Pull some state variables.
   height = tonumber (GetVariable ("height")) or default_height
   width = tonumber (GetVariable ("width")) or default_width
   show_coords = tonumber (GetVariable ("showcoords")) or show_coords
   show_exits = tonumber (GetVariable ("showexits")) or 0
   show_title = tonumber (GetVariable ("showtitle")) or 1
   also_echo_map = tonumber (GetVariable("also_echo_map")) or 0

   -- create window with position from movewindow
   windowinfo = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, Theme.SECONDARY_BODY)

   --- Load the fonts.
   font_id        = "map_font"
   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size
   WindowFont (win, font_id, font_name, font_size, false, false, false, false, 0, miniwin.font_family_modern + miniwin.font_pitch_monospaced)

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1)
   font_width  = WindowFontInfo (win, font_id, 6)  -- avg width

   maptype = tonumber (GetVariable("maptype")) or (((font_name ~= "Dina") and 1) or 0)

   -- Info (Legend) window
   -- a unique ID
   infowin = "~~~~~~"..GetPluginID () .. ":info" -- name hack to make the popup go on top of everything
   WindowCreate(infowin, 0, 0, 1, 1, 0, 0, 0)   -- make 1-pixel wide window
   WindowSetZOrder(infowin, 99999)
   WindowFont(infowin, font_id, font_name, font_size, false, false, false, false, 0, 49)

   SetOption("utf_8", 1)  -- needed for alternate maptypes in output

   -- Draw the initial map window
   resize_window()

   WindowShow(win, true)

   -- update on reload
   if IsConnected() and not skip_requests then
      OnPluginConnect()
   end
end

function OnPluginCommand()
   EnableTimer("activity_timer", 1)
   ResetTimer("activity_timer")
   return true
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end


]]>
</script>
</muclient>
