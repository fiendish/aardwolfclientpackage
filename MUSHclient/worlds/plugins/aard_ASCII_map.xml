<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, August 29, 2010, 3:35 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "aard_mapper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Ascii_Mapper"
   author="Multiple"
   id="3f498d929793c12cb70fb59e"
   language="Lua"
   purpose="Aardwolf ASCII mapper"
   date_written="2010-08-29 15:35:02"
   requires="4.73"
   version="2.0"
   save_state="y"
   >

<description trim="y">
Captures the Aardwolf automap and roomname into a draggable/resizeable mini-window.

Combination of work from many sources including Nick Gammon, Bast, Fiendish,
Blainer and others. All cobbled together by Lasher. And then recobbled by Fiendish again.
</description>

</plugin>

<aliases>
<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

<alias
   match="maptype *"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
>
<send>
   local temptype = tonumber("%1")
   if temptype and (temptype &gt;= 0) and (temptype &lt;= 6) then
      maptype = temptype
      OnPluginSaveState()
      OnPluginInstall()
   end
   Send("maptype %1 session")
</send>
</alias>
</aliases>

<triggers>
   
<trigger
   enabled="y"
   match="<MAPSTART>"
   script="map_redirect"
   omit_from_output="y"
   name="map_start"
   sequence="100"   
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>
  
<trigger
   enabled="n"
   match="*"
   script="map_body_redirect"
   name="multi_line_map"
   omit_from_output="y"
   sequence="10"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>
  
<trigger
   enabled="y"
   match="<MAPEND>"
   script="map_redirect"
   omit_from_output="y"
   name="map_end"
   sequence="5"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send></trigger>
  
<trigger
   enabled="y"
   match="You open *."
   sequence="100"
   script="request_new_map"
></trigger>
  
<trigger
   enabled="y"
   match="You close *."
   sequence="100"
   script="request_new_map"
></trigger>

<trigger
   enabled="y"
   match="* opens*."
   sequence="100"
   script="request_new_map"
></trigger>
  
<trigger
   enabled="y"
   match="* closes*."
   sequence="100"
   script="request_new_map"
></trigger>
  
<trigger
   enabled="y"
   match="You can now sense anger in your immediate area."
   sequence="100"
   script="request_new_map"
></trigger>
  
</triggers>

<script>
<![CDATA[

require "gmcphelper"
require "movewindow"
require "mw"

background_colour     = GetNormalColour(1)
title_colour          = 0x292929
border_color          = 0xdddddd
title_gradient_col1   = GetNormalColour(1)
title_gradient_col2   = 0x444444
default_width         = 209
default_height        = 263
default_x             = 658
default_y             = 0
map_lines = {}
coord_data= {}
show_coords = 0

                                                
--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100
TITLE_HEIGHT    = 0

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
page_built       = false

always_echo_rooms = {
-- "A Garden" via FT2 Gardener's Brain Control Room
    ["26841"]=true, ["26846"]=true, ["26828"]=true, ["26829"]=true, ["26824"]=true, ["26842"]=true, ["26843"]=true, ["26825"]=true, ["26830"]=true, ["26831"]=true, ["26826"]=true, ["26844"]=true, ["26827"]=true
}

continents = { [0]="Mesolar", [1]="Southern Ocean", [2]="Gelidus", [3]="Abend", [4]="Alagh", [5]="Uncharted Ocean", [6]="Vidblain" }

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

function reset_aard()
   width = default_width
   height = default_height
   font_name = default_font_name
   font_size = default_font_size
   windowinfo.window_left = default_x
   windowinfo.window_top = default_y
   WindowPosition(win, default_x, default_y, 0, 18)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   OnPluginSaveState()
   OnPluginInstall()
end

kinda_busy = 0
function request_new_map()
   if can_request_map and kinda_busy == 0 then
      SendNoEcho ("map")
   end
end

roomnum = ""

function map_redirect (name, line, wildcards, styles)
   EnableTrigger ("multi_line_map", true)  -- capture subsequent lines
   if name == "map_start" then   --- Setup the window.
      map_lines = {} --reset ready for new map
   elseif name == "map_end" then
      EnableTrigger ("multi_line_map", false)  -- no more lines to go
      page_built = true
      DisplayMapPage () --end of map from MUD, display the window

      if (also_echo_map == 1) or always_echo_rooms[roomnum] then
         for i,line in ipairs(map_lines) do
            if i > 3 and i < #map_lines then
               for _,v in ipairs(line) do
                  ColourTell(RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), ((GetOption("utf_8") == 1) and v.text) or utf8_map_text_to_ascii(v.text))
               end
               Note("")
            end
         end
      end
   end
end -- function map_redirect

--E294xx
utf8_2_ascii = {
["82"]="7C", -- |
["80"]="2D", -- -
["8C"]="20",
["90"]="20",
["98"]="20",
["94"]="20",
["AC"]="20", -- vertical end cap T
["B4"]="20", -- vertical end cap T
["A4"]="7C",
["9C"]="7C"
}

--E295xx
utf8_2_ascii2 = {
["91"]="7C", -- ||
["90"]="2D", -- =
["A5"]="20",
["9D"]="20",
["9A"]="20",
["94"]="20",
["97"]="20",
["A8"]="20",
["A3"]="7C",
["A0"]="7C",
["A9"]="2D",
["A6"]="2D"
}

function utf8_map_text_to_ascii(text)
   text = utils.tohex(text)

   -- replace vertical three way intersections with "-"
   text = string.gsub(text, "E29480E294B4E29480", "2D2D2D")
   text = string.gsub(text, "E29480E294ACE29480", "2D2D2D")

   -- drop extra long ends
   text = string.gsub(text, "E2948020", "2020") -- "- "
   text = string.gsub(text, "20E29480", "2020") -- " -"
   text = string.gsub(text, "E2959020", "2020") -- "= "
   text = string.gsub(text, "20E29590", "2020") -- " ="
   text = string.gsub(text, "E29480$", "20") -- "- "
   text = string.gsub(text, "^E29480", "20") -- " -"
   text = string.gsub(text, "E29590$", "20") -- "= "
   text = string.gsub(text, "^E29590", "20") -- " ="

   text = string.gsub(text, "E294(%x%x)", utf8_2_ascii)
   return utils.fromhex(string.gsub(text, "E295(%x%x)", utf8_2_ascii2))
end

function map_body_redirect(name, line, wildcards, styles)
   table.insert (map_lines, styles)
end

function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
      check (WindowCreate (win, 
         windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
         width,   -- width
         height,  -- height
         windowinfo.window_mode,       -- auto-position: middle right
         windowinfo.window_flags,  -- flags
         background_colour) )
      -- Add the drag handler so they can move the window around
      movewindow.add_drag_handler (win, 0, 0, 0, 0)
      -- Add legend-popup handler
      WindowAddHotspot(win, "legend", 1, TITLE_HEIGHT+1, 3*font_width+1,TITLE_HEIGHT+font_height+5 , "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 12, 0)

      -- Add handler for resizing
      WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
      WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
   else
      -- everything has already been made
      -- just move them back into place
      WindowResize(win, width, height, background_colour)
      WindowMoveHotspot(win, "legend", 5, height-font_height-2, 3*font_width, height)
      WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end
   DisplayMapPage()
end

--=================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================

function DisplayMapPage()
   styles = { }
   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank

   if show_title == 1 then
      -- title rectangle
      WindowGradient (win, 2, 2, -2, TITLE_HEIGHT, title_gradient_col1, title_gradient_col2, 2)
      WindowLine(win,0,TITLE_HEIGHT,width,TITLE_HEIGHT,0xeeeeee,0,1)
   end
   
   -- show the widget for the legend popup
   WindowRectOp(win, 2, 1, TITLE_HEIGHT+1, 3*font_width+1,TITLE_HEIGHT+font_height+5,0x303030,0x0000ff) -- fill
   WindowRectOp(win, 1, 1, TITLE_HEIGHT+1, 3*font_width+1,TITLE_HEIGHT+font_height+5,0x777777,0x0000ff) -- border
   WindowText (win, font_id, "?", font_width+1, TITLE_HEIGHT+1, 0, 0, 0xffffff)
   
   if not page_built then
      txt = "Map will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee)
      txt = "once you start playing."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee)
   else
      -- display each line
      for i, line in ipairs (map_lines) do
         if (show_exits == 1) or (i < #map_lines) then
            Display_Line (i, line)
         end
      end -- for
                
      -- tack on coordinates after the map displays
      if (show_coords == 1 and coords ~= nil) then
         Display_Line (#map_lines+show_exits, coords)
      end
   end

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   -- show it now (or refresh)
   WindowShow (win, true)
   --Redraw()
   BroadcastPlugin (999, "repaint")
                 
end -- Display_Map

function process_coords ()
   if (coord_data.id == "-1") then
      coords = nil
      return
   end

   local tstyle = {}
   local style = {}
   style.text = "["
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   style.text = " Coords: "
   style.len = #style.text
   style.textcolour = 0xF0FFFF
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   tempval = tonumber(coord_data.id)

   style.text = continents[tempval] .. " " .. coord_data.x .. " " .. coord_data.y
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)

   style = {}
   style.text = "]"
   style.len = #style.text
   style.textcolour = 0x00D600
   style.style = 0
   table.insert (tstyle, style)  
   coords = tstyle
end

function Display_Line (line, styles)
   local id = font_id
   local left = 3
   -- first 2 lines in bold
   if show_title == 1 then
      if line < 3 then
         left = 4
         id = font_id_bold
      end
   else
      line = line - 3
   end

   local padding = 5

   local top = ((line - 1) * (font_height)) + padding

   for _, v in ipairs (styles) do
      local ret = WindowText (win, id, v.text, left, top, 0, 0, v.textcolour, true) -- try utf8 first
      if (ret >= 0) then
         left = left + ret
      else
         left = left + WindowText (win, id, v.text, left, top, 0, 0, v.textcolour, false)
      end
   end -- for each style run
end -- Display_Line

-- right click menu
function right_click_menu ()

   menustring = "Change Font|>Map Type|"
   menustring = menustring .. ((maptype == 0 and "+") or "") .. "0 - Standard ASCII based map|"
   menustring = menustring .. ((maptype == 1 and "+") or "") .. "1 - Solid single line map|"
   menustring = menustring .. ((maptype == 2 and "+") or "") .. "2 - Solid double line map|"
   menustring = menustring .. ((maptype == 3 and "+") or "") .. "3 - Solid single line map (no end caps)|"
   menustring = menustring .. ((maptype == 4 and "+") or "") .. "4 - Solid double line map (no end caps)|"
   menustring = menustring .. ((maptype == 5 and "+") or "") .. "5 - Solid single line map (extended walls)|"
   menustring = menustring .. ((maptype == 6 and "+") or "") .. "6 - Solid double line map (extended walls)|"
   menustring = menustring .. "<|-|"
   menustring = (menustring .. (((show_title == 1) and "+") or "") .. "Show Room Name|")
   menustring = (menustring .. (((show_exits == 1) and "+") or "") .. "Show Exits|")
   menustring = (menustring .. (((show_coords == 1) and "+") or "") .. "Show Coordinates|")
   menustring = (menustring .. (((also_echo_map == 1) and "+") or "") .. "Also Show Map In Main Output")
   menustring = (menustring .. "|-|Bring To Front|Send To Back|-|Reset Defaults")

   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content

   if result == "Show Room Name" then
      show_title = (((show_title == 0) and 1) or 0)
   elseif result == "Show Exits" then
      show_exits = (((show_exits == 0) and 1) or 0)
   elseif result == "Show Coordinates" then
      show_coords = (((show_coords == 0) and 1) or 0)
   elseif result == "Change Font" then
      wanted_font = utils.fontpicker (font_name, font_size) --font dialog
      if wanted_font then
         font_name = wanted_font.name
         font_size = wanted_font.size
      end
   elseif result == "Bring To Front" then
      CallPlugin("462b665ecb569efbf261422f","boostMe", win)
   elseif result == "Send To Back" then
      CallPlugin("462b665ecb569efbf261422f","dropMe", win)
   elseif result == "Also Show Map In Main Output" then
      also_echo_map = (((also_echo_map == 0) and 1) or 0)
   elseif result == "Reset Defaults" then
      font_name = default_font_name
      font_size = default_font_size
      height = default_height
      width = default_width
      show_coords = 0
      show_exits = 0
      also_echo_map = 0
      show_title = 1
   elseif result ~= "" then
      maptype = tonumber(result:sub(1,1))
   end -- if
   if result ~= "" then
      -- save and reload
      OnPluginSaveState()
      OnPluginInstall()
   end
end -- right_click_menu


--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
can_request_map = false
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         page_built = false 
         return
      end

      if (text == "room.info") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")
         luastmt = "gmcpdata = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         coord_data = gmcpdata.coord
         roomnum = gmcpdata.num
         if (show_coords == 1) then
            process_coords()
         end
         if page_built == false and (GetOption("enable_triggers") == 1) then
            request_new_map()
         end
      elseif (text == "comm.repop") then
         request_new_map()
      elseif (text == "char.status") then
         local char_state = gmcp("char.status.state")
         can_request_map = (char_state == 3 or char_state == 11)
         if not page_built then
            request_new_map()
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   elseif (msg == 999 and text == "kinda_busy") then
      kinda_busy = kinda_busy + 1
   elseif (msg == 999 and text == "ok_you_can_go_now") then
      kinda_busy = kinda_busy - 1
      if kinda_busy < 0 then kinda_busy = 0 end
   end
end

---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   height = height + posy - starty
   starty = posy
   if (height < MIN_SIZE) then
      height = MIN_SIZE
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      SetUpHotspotsAndDraw(false)
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
   SetUpHotspotsAndDraw(true)
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

function MouseOver (flags, hotspotid)

   if (hotspotid ~= "legend") then return end

   -- work out coordinates
   local left =  WindowInfo (win, 10)
   local top =  WindowInfo (win, 11)

   -- what to say - one line per table entry, with imbedded colour codes  
   info = {
      "@WMap Legend:@w",
      "",
      "  @M#@w  - You                      --- - North/south wall",
      "  @R*@w  - Other players             |  - East/west wall",
      "  @Y!@w  - Mobiles                   +  - Door (closed)",
      "  @C!@w  - Pet/other charmed mob     @B+@w  - Door (locked)",
      "  @R!@w  - Angry mob (with Sense     >  - Up exit",
      "       Anger cast)               @y>@w  - Up exit (closed)",
      "  @G!@w  - Unkillable Mob            <  - Down exit",
      "  @G$@w  - Shopkeeper                @y<@w  - Down exit (closed)",
      "",
      " @C[@W?@C]@w - Area exit                 @r#@w  - PK-flagged room",
      " @G[@W?@G]@w - Clan public hall exit     @RD@w  - Donation room",
      "",
      "@WMajor Terrains:@w",
      "",     
      " [ ]   Inside                   . .   City",
      " @g, `@w   Field                    @G; ;@w   Hills",
      " @y/ \\@w   Mountain                 @B~ ~@w   Water",
      " @B~ ~@w   Waternoswim              @c. .@w   Air",
      " @y~ ~@w   Desert                   @Y% %@w   Quicksand",
      " @b~ ~@w   Underwater               @C~ ~@w   Ice",
      " @B. .@w   Underground              - -   East/West road",
      " . .   North/South road         @C~ ~@w   River",
      " @R/ \\@w   Volcano                  @b% %@w   Cave",
      " # #   Dungeon                  @g( *@w   Forest",
   }
                
   heading = ""
  
   if windowinfo.window_left < 300 then
      align_left = true
      align_right = false
      left = windowinfo.window_left + width + 10
      top = windowinfo.window_top + 15
   else
      align_right = true
      align_left = false
   end

   align_bottom = false
   capitalize = true

   -- show it  
   mw.popup (infowin,           -- window name to use
         heading_font_id,   -- font to use for the heading
         popup_font_id,           -- font to use for each line
         heading,           -- heading text
         info,              -- table of lines to show (with colour codes)
         left, top,         -- where to put it
         0x008800,     -- colour for round rectangle line
         background_colour, -- colour for background
         capitalize,        -- if true, force the first letter to upper case
         align_right,       -- if true, align right side on "Left" parameter
         align_bottom)      -- if true, align bottom side on "Top" parameter
         
end -- mouseover

function CancelMouseOver (flags, hotspotid)
   WindowShow (infowin, false)
end -- cancelmouseover

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function OnPluginConnect()
   page_built = false
   TelnetOptionOn(TELOPT_MAP)
   TelnetOptionOff(TELOPT_SHORTMAP)
   TelnetOptionOn(TELOPT_ROOM_NAMES)
   TelnetOptionOn(TELOPT_EXIT_NAMES)
   TelnetOptionOff(TELOPT_QUIET)
   TelnetOptionOn(TELOPT_AUTOMAP) -- does this do anything?
   Send_GMCP_Packet("maptype "..maptype)
   Send_GMCP_Packet("request char")
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   movewindow.save_state (win)   -- save window current location for next time  
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   SetVariable ("title_colour", title_colour)  
   SetVariable ("width", width)
   SetVariable ("height", height)
   SetVariable ("showcoords", show_coords)
   SetVariable ("showexits", show_exits)
   SetVariable ("showtitle", show_title)
   SetVariable ("font_name", font_name)
   SetVariable ("font_size", font_size)
   SetVariable ("also_echo_map", also_echo_map)
   SetVariable ("maptype", maptype)
end -- OnPluginSaveState

function OnPluginClose ()
   OnPluginDisable()
   WindowDelete(win)
end

function OnPluginDisable ()
   WindowShow( win, false )
   if IsConnected() then
      Send_GMCP_Packet("maptype -1")
      if (also_echo_map == 0) then
         TelnetOptionOff(TELOPT_MAP)
         TelnetOptionOff(TELOPT_AUTOMAP) -- does this do anything?
      end
   end
   OnPluginSaveState()
end --  OnPluginDisable

function OnPluginEnable ()
   WindowShow (win, true)
   if IsConnected() then
      OnPluginConnect()
   end
   OnPluginSaveState()
end -- OnPluginEnable

win = GetPluginID()
require "checkplugin"
function OnPluginListChanged ()
   do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
   do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
   do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end -- OnPluginListChanged

function setDefaultFont()
   local fonts = utils.getfontfamilies ()

   -- install Dina as a backup
   if not fonts.Dina then
      AddFont (GetInfo (66) .. "\\Dina.fon")
      fonts = utils.getfontfamilies ()
   end

   default_font_size = 9
   if fonts["Courier New"] then
      default_font_name = "Courier New"
   elseif fonts ["Lucida Console"] then
      default_font_name = "Lucida Console"
   elseif fonts ["Liberation Mono"] then
      default_font_name = "Liberation Mono"
   else
      default_font_name = "Dina"
   end
end

setDefaultFont()

function OnPluginInstall()
   --- Pull some state variables.
   title_colour = tonumber (GetVariable ("title_colour")) or title_colour
   height = tonumber (GetVariable ("height")) or default_height
   width = tonumber (GetVariable ("width")) or default_width
   show_coords = tonumber (GetVariable ("showcoords")) or show_coords
   show_exits = tonumber (GetVariable ("showexits")) or 0
   show_title = tonumber (GetVariable ("showtitle")) or 1
   also_echo_map = tonumber (GetVariable("also_echo_map")) or 0

   -- make window so I can grab the font info
   WindowCreate (win, 1, 1, width, height, 0, 0, background_colour) 

   font_id        = "mapper_font"
   font_id_bold   = "mapper_bold"

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   maptype = tonumber (GetVariable("maptype")) or (((font_name ~= "Dina") and 1) or 0)

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
   WindowFont (win, font_id_bold, font_name, font_size+1, false, false, false, false) -- bold font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) -- height
   font_width  = WindowFontInfo (win, font_id, 6)  -- avg width

   if show_title == 1 then
      TITLE_HEIGHT = font_height*2 + 11
   else
      TITLE_HEIGHT = 0
   end

   --- install the window movement handler, get back the window position.
   windowinfo  = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})

   -- Draw the initial map window
   SetUpHotspotsAndDraw(true)

   -- Info (Legend) window
  
   -- our window frame/background colours
   border_colour = ColourNameToRGB "dimgray"
  
   -- a unique ID
   infowin = "~~~~~~"..GetPluginID () .. ":info" -- name hack to make the popup go on top of everything

   -- font IDs
   popup_font_id = "popup_font"  
   heading_font_id = "popup_heading_font"
 
   -- load fonts - mouseover window
   WindowCreate (infowin, 0, 0, 1, 1, 0, 0, 0)   -- make 1-pixel wide window
   WindowSetZOrder(infowin, 99999)
   
   -- install the fonts  (49 is modern / fixed pitch)
   WindowFont (infowin, popup_font_id, font_name, font_size, false, false, false, false, 0, 49) 
   WindowFont (infowin, heading_font_id, font_name, font_size + 2, false, false, false, false, 0, 49)
   
   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time

   -- update on reload
   if IsConnected() then
      OnPluginConnect()
   end   
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end


]]>
</script>
</muclient>
