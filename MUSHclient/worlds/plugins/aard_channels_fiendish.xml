<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Thanks to Orogan for past help. I wish I remembered what with, but I didn't write it down. -->
<muclient>
<plugin
   name="Aardwolf_Chat_Capture_Miniwindow"
   author="Fiendish"
   id="b555825a4a5700c35fa80780"
   language="Lua"
   purpose="Move chats to a miniwindow"
   date_written="2010-10-25"
   requires="4.73"
   version="2.0"
   save_state="y"
   sequence="-9000"
>
<!-- Plugin sequence must be before echo plugin to capture unechoed info -->
<description trim="y">
USAGE:

   chats show       : show chats window
   chats hide       : hide chats window

   Drag title bar to move window.
   Drag inside text area to select text.
   Right-click text area to see menu of options

</description>

</plugin>

<triggers>
<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="y"
   match="^\*.+[^*]$"
   regexp="y"
   script="rsocial"
   name="remote_socials"
   sequence="100"
></trigger>

</triggers>

<aliases>

<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

<alias
   script="chat_show"
   match="chats show"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="chat_hide"
   match="chats hide"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

</aliases>

<script>
<![CDATA[

require "mw_theme_base"
require "movewindow"
require "gmcphelper"
require "text_rect"
require "scrollbar"

dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

local gap = 1
MAX_LINES = 10000 -- how many lines to store in scrollback

-- date_format = "[%d %b %H:%M:%S] "   -- [30 Aug 13:29:49]   date and time 24 hour
-- date_format = "[%d %b %I:%M:%S%p] " -- [30 Aug 01:20:12PM] date and time 12 hour
-- date_format = "[%H:%M:%S] "         -- [13:29:08]          time 24 hour
-- date_format = "[%X] "               -- [1:22:06 PM]        time 12 hour

default_width = 657
default_height = 131
default_x = 0
default_y = 0
default_font_name = "Dina"
default_font_size = "8"

date_format = GetVariable("date_format") or "[%d %b %H:%M:%S] "
width = tonumber(GetVariable("WINDOW_WIDTH")) or default_width
height = tonumber(GetVariable("WINDOW_HEIGHT")) or default_height
log_to_file = tonumber(GetVariable("log_to_file")) or 0
log_colour_codes = tonumber(GetVariable("log_colour_codes")) or 1
log_timestamps = tonumber(GetVariable("log_timestamps")) or 1

local init_nonchannel_keys = {"info", "raidinfo", "claninfo", "clan_donations", "global_quest", "warfare", "remort_auction", "remote_socials"}
local init_nonchannel_pairs = {["warfare"]="WARFARE:", ["info"]="INFO:", ["raidinfo"]="RAIDINFO:", ["claninfo"]="CLANINFO:", ["global_quest"]="Global Quest:", ["remort_auction"]="Remort Auction:", ["clan_donations"]="Clan Donations", ["remote_socials"]="Remote Socials"}
local init_channel_keys = {"answer","auction","barter","cant","chant","claninfo","clantalk","commune","curse","dtell","ftalk","gametalk","gclan","gossip","grapevine","gratz","gtell","helper","immtalk","inform","lasertag","ltalk","mafiainfo","market","mobsay","music","newbie","pchat","pokerinfo","ptell","question","racetalk","rauction","restores","rp","say","snewbie","spouse","tech","telepathy","tell","tiertalk","trivia","wangrp","wardrums","yell"}
channels_table = {}
loadstring(GetVariable("channels_table") or "")()

tabs_activity = {}

tabs_channel_captures = {{}}
loadstring(GetVariable("tabs_channel_captures") or "")()
num_tabs = #tabs_channel_captures
current_tab = math.min(tonumber(GetVariable("current_tab")) or 1, #tabs_channel_captures)

tabs_nonchannel_captures = {{}}
loadstring(GetVariable("tabs_nonchannel_captures") or "")()

tabs_names = {}
loadstring(GetVariable("tabs_names") or "")()

function reduce_diverse_channels()
   channels_table = {}
   for tab,channels in ipairs(tabs_channel_captures) do
      for chan,v in pairs(channels) do
         if v["capture"] then
            channels_table[chan] = {["capture"]=true}
         end
      end
   end
end

-- legacy variables
show_donations = tonumber(GetVariable("show_donations")) or 1
info_on = tonumber(GetVariable("info_on")) or 0
global_quest_on = tonumber(GetVariable("global_quest_on")) or 0
remort_auction_on = tonumber(GetVariable("remort_auction_on")) or 0
warfare_on = tonumber(GetVariable("warfare_on")) or 0

function check_nonchannel_trigger(key)
   local on = false
   for tab,nonchannels in ipairs(tabs_nonchannel_captures) do
      if nonchannels[key]["capture"] then
         on = true
         break
      end
   end
   return on
end

function addDefaultNonChannels()
   for tab,channels in ipairs(tabs_channel_captures) do
      tabs_nonchannel_captures[tab] = tabs_nonchannel_captures[tab] or {}
      for i,v in ipairs(init_nonchannel_keys) do
         tabs_nonchannel_captures[tab][v] = tabs_nonchannel_captures[tab][v] or {["capture"]=true}
      end
   end

   EnableTrigger("remote_socials", check_nonchannel_trigger("remote_socials"))
   EnableTrigger("warfare", check_nonchannel_trigger("warfare"))
   EnableTrigger("info", check_nonchannel_trigger("info"))
   EnableTrigger("raidinfo", check_nonchannel_trigger("raidinfo"))
   EnableTrigger("claninfo", check_nonchannel_trigger("claninfo"))
   EnableTrigger("global_quest", check_nonchannel_trigger("global_quest"))
   EnableTrigger("remort_auction", check_nonchannel_trigger("remort_auction"))
end

function addNewChannel(chan)
   for tab,channels in ipairs(tabs_channel_captures) do
      channels[chan] = channels[chan] or {["capture"]=true}
      if channels[chan]["capture"] then
         channels_table[chan] = {["capture"]=true}
      end
   end
end

function addDefaultChannels()
   for i,v in ipairs(init_channel_keys) do
      addNewChannel(v)
   end
   addDefaultNonChannels()
end
addDefaultChannels()
reduce_diverse_channels()

function makeRect(i)
   tabs_rects[i] = TextRect.new(win, "tr"..tostring(i), tr_left, tr_top, tr_right, tr_bottom, 1000, true, theme.PRIMARY_BODY, 3, "Dina", 10)
   tabs_scrollbars[i] = ScrollBar.new(win, "sb"..tostring(i), tr_right, tr_top, draw_right, draw_bottom-theme.RESIZER_SIZE)

   tabs_rects[i]:addUpdateCallback(tabs_scrollbars[i], tabs_scrollbars[i].setScroll)
   tabs_scrollbars[i]:addUpdateCallback(tabs_rects[i], tabs_rects[i].setScroll)

   tabs_rects[i]:setExternalMenuFunction(extend_rightclick_menu_string, extend_rightclick_menu_result)
   tabs_rects[i]:loadFont(font_name, font_size)

   bump_top_for_tabs()
   tabs_rects[i]:setRect(tr_left, tr_top, tr_right, tr_bottom)
   tabs_scrollbars[i]:setRect(tr_right, tr_top, draw_right, tr_bottom-theme.RESIZER_SIZE)
end

function setTab(i)
   if tabs_rects[current_tab] then
      tabs_rects[current_tab]:unInit()
      tabs_scrollbars[current_tab]:unInit()
   end
   current_tab = math.min(math.max(i, 1), num_tabs)
   tabs_activity[current_tab] = false

   setupDisplay()
end

function addTab()
   clearTabHotspots()
   num_tabs = num_tabs + 1
   tabs_channel_captures[num_tabs] = {}
   tabs_nonchannel_captures[num_tabs] = {}
   addDefaultChannels()

   setTab(num_tabs)
end

function clearTabHotspots()
   for i=1,#tabs_names do
      WindowDeleteHotspot(win, "tab"..tostring(i))
   end
end

function removeTab()
   clearTabHotspots()
   tabs_rects[current_tab]:unInit()
   tabs_scrollbars[current_tab]:unInit()

   table.remove(tabs_names, current_tab)
   table.remove(tabs_rects, current_tab)
   table.remove(tabs_scrollbars, current_tab)
   table.remove(tabs_channel_captures, current_tab)
   table.remove(tabs_nonchannel_captures, current_tab)

   num_tabs = num_tabs - 1
   setTab(current_tab)
end

function reset_aard()
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, default_height, theme.SECONDARY_BODY)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   SaveState()
   OnPluginInstall()
end

function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
   CallPlugin ("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())
end

function OnPluginInstall ()
   init()
   setupDisplay()
   OnPluginEnable()
end

function bump_top_for_tabs()
   if num_tabs > 1 then
      tab_top = draw_top + 2
      tr_top = tab_top + (2*gap) + tab_font_height + 2
   end
end

function set_tr_shape()
   tr_left = draw_left
   tr_top = draw_top

   bump_top_for_tabs()

   tr_right = draw_right - theme.RESIZER_SIZE + 1
   tr_bottom = draw_bottom
   return tr_left, tr_top, tr_right, tr_bottom
end

function init ()
   win = GetPluginID()

   local fonts = utils.getfontfamilies ()

   -- install Dina
   if not fonts.Dina then
      AddFont(GetInfo (66) .. "\\Dina.fon")
   end

   -- create window with position from movewindow
   windowinfo  = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, theme.SECONDARY_BODY)

   -- Add handler for resizing
   WindowAddHotspot(win, "resize", width-theme.RESIZER_SIZE, height-theme.RESIZER_SIZE, width, height, nil, nil, "MouseDown", nil, nil, "", 6, 0)
   WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)

   WindowShow(win, true)

   -- register with the z-order monitor
   CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   WindowFont(win, "channels_font", font_name, font_size, false, false, false, false, 0)
   tab_font_height = TextHeight(win, "channels_font")

   tabs_rects = {}
   tabs_scrollbars = {}
end

function drawTabs (mouseover)
   if num_tabs > 1 then
      local tab_left = draw_left+5
      local tab_padding = theme.DYNAMIC_BUTTON_PADDING
      local active_left = nil
      local active_width = nil

      WindowRectOp(win, miniwin.rect_fill, draw_left, draw_top, draw_right+1, draw_top + (4*gap) + tab_font_height+1, theme.SECONDARY_BODY)

      for i,_ in ipairs(tabs_channel_captures) do
         local name = tabs_names[i] or tostring(i)
         local tab_width = WindowTextWidth(win, "channels_font", name) + (tab_padding * 2)

         if not WindowHotspotInfo(win, "tab"..tostring(i), 1) then
            WindowAddHotspot(win, "tab"..tostring(i), tab_left, tab_top, tab_left + tab_width, tab_top + (3*gap) + tab_font_height, "tabMouseOver", "tabCancelMouseOver", "tabMouseDown", nil, "tabMouseUp", "", 1, 0)
         else
            WindowMoveHotspot(win, "tab"..tostring(i), tab_left, tab_top, tab_left + tab_width, tab_top + (3*gap) + tab_font_height)
         end

         local text_color = theme.BODY_TEXT
         if i == current_tab then
            active_left = tab_left
            active_width = tab_width
         else
            local bg_color
            if i ~= mouseover then
               if tabs_activity[i] then
                  bg_color = theme.CLICKABLE_HOT
                  text_color = theme.CLICKABLE_HOT_TEXT
               else
                  bg_color = theme.CLICKABLE
                  text_color = theme.CLICKABLE_TEXT
               end
            else
               -- reversed coloration during mouseover
               bg_color = theme.CLICKABLE_HOVER
               text_color = theme.CLICKABLE_HOVER_TEXT
            end

            WindowCircleOp(
               win, miniwin.circle_round_rectangle,
               tab_left, tab_top, tab_left + tab_width, tab_top + (4*gap) + (2*tab_font_height), -- coords
               theme.THREE_D_HIGHLIGHT, miniwin.pen_solid, 1,          -- pen
               bg_color, miniwin.brush_solid,             -- brush
               16,   -- width of the ellipse used to draw the rounded corner
               (4*gap) + (2*tab_font_height)  -- height of the ellipse used to draw the rounded corner
            )
         end

         tab_left = tab_left + tab_padding
         tab_left = tab_left + WindowText(win, "channels_font", name, tab_left, tab_top + gap + 1, draw_right, draw_top + (3*gap) + tab_font_height, text_color, false)
         tab_left = tab_left + tab_padding
      end

      WindowLine(win, draw_left, tab_top + (2*gap) + tab_font_height + 1, draw_right+1, tab_top + (2*gap) + tab_font_height + 1, theme.THREE_D_HIGHLIGHT, 0 + 0x0200, 1)
      WindowCircleOp(
         win, miniwin.circle_round_rectangle,
         active_left, tab_top, active_left + active_width, tab_top + (4*gap) + (2*tab_font_height), -- coords
         theme.THREE_D_HIGHLIGHT, miniwin.pen_solid, 1,          -- pen
         theme.PRIMARY_BODY, miniwin.brush_solid,  -- brush
         16,   -- width of the ellipse used to draw the rounded corner
         (4*gap) + (2*tab_font_height)   -- height of the ellipse used to draw the rounded corner
      )
      WindowText(win, "channels_font", tabs_names[current_tab] or tostring(current_tab), active_left + tab_padding, tab_top + gap + 1, draw_right, draw_top + (3*gap) + tab_font_height, theme.BODY_TEXT, false)
   end
   tabs_rects[current_tab]:draw()
   tabs_scrollbars[current_tab]:draw()
end

function tabMouseOver (flags, hotspot_id)
   drawTabs(tonumber(hotspot_id:sub(4)))
end

function tabCancelMouseOver (flags, hotspot_id)
   drawTabs()
end

function tabMouseDown (flags, hotspot_id)
   setTab(tonumber(hotspot_id:sub(4)))
end

function tabMouseUp (flags, hotspot_id)
   if hotspot_id == "titlebar" then
      hotspot_id = "tab"..tostring(current_tab or 1)
   end
   if bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      tabs_rects[tonumber(hotspot_id:sub(4))]:rightClickMenu()
   end
end

function drawBackground ()
   -- WindowAddHotspot(win, "titlebar", 0, 0, 0, 0, nil, nil, nil, nil, "tabMouseUp", "", miniwin.cursor_hand, 0)
   draw_left, draw_top, draw_right, draw_bottom = DressWindow(win, "channels_font", "Communication Log", nil)
   AddResizeTag(win, 2, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")
end

function ResizeMoveCallback ()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo(win, 17), WindowInfo(win, 18)
   width = width+posx-startx
   startx = posx
   if (WindowTextWidth(win, "channels_font", "Communication Log")+2*theme.RESIZER_SIZE > width) then
      width = WindowTextWidth(win, "channels_font", "Communication Log")+2*theme.RESIZER_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end
   height = height+posy-starty
   starty=posy
   if (3*theme.RESIZER_SIZE + 70 > height) then
      height = 3*theme.RESIZER_SIZE + 70
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      setupDisplay()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

function ResizeReleaseCallback ()
   setupDisplay()
   for i = 1,num_tabs do
      tabs_rects[i]:reWrapLines()
   end
   WindowMoveHotspot(win, "resize", draw_right-theme.RESIZER_SIZE, draw_bottom-theme.RESIZER_SIZE, 0, 0)
end

function setupDisplay ()
   WindowResize(win, width, height, 0x00ff00)
   drawBackground()
   set_tr_shape()
   for i = 1,num_tabs do
      if tabs_rects[i] then
         tabs_rects[i]:setRect(tr_left, tr_top, tr_right, tr_bottom)
         tabs_scrollbars[i]:setRect(tr_right, tr_top, draw_right, tr_bottom-theme.RESIZER_SIZE)
      else
         makeRect(i)
      end
   end
   drawTabs()
end

function OnPluginConnect ()
   -- first time after connect, get tags right
end --  OnPluginConnect

function OnPluginClose ()
   -- if enabled
   if GetPluginInfo(GetPluginID(), 17) then
      OnPluginDisable()
   end -- if enabled
   WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
   WindowShow(win, true)
   -- if we are connected when the plugin loads, it must have been reloaded while playing
   if IsConnected() then
      OnPluginConnect()
   end -- if already connected
   SaveState()
end -- OnPluginEnable

function OnPluginDisable()
   WindowShow( win, false )
   SaveState()
end --  OnPluginDisable

require "serialize"
function OnPluginSaveState()
   -- save window current location for next time
   SetVariable("enabled", tostring (GetPluginInfo (GetPluginID(), 17)))
   movewindow.save_state(win)

   SetVariable("font_name", font_name)
   SetVariable("font_size", font_size)
   SetVariable("date_format", date_format)
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable("WINDOW_WIDTH", width)
   SetVariable("WINDOW_HEIGHT", height)
   SetVariable("info_on", info_on)
   SetVariable("global_quest_on", global_quest_on)
   SetVariable("remort_auction_on", remort_auction_on)
   SetVariable("warfare_on", warfare_on)
   SetVariable("log_to_file", log_to_file)
   SetVariable("log_colour_codes", log_colour_codes)
   SetVariable("log_timestamps", log_timestamps)
   SetVariable("current_tab", current_tab)
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("tabs_names", serialize.save("tabs_names"))
   SetVariable("tabs_channel_captures", serialize.save("tabs_channel_captures"))
   SetVariable("tabs_nonchannel_captures", serialize.save("tabs_nonchannel_captures"))
end

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-]", "")
   return Trim(str or "")
end

re = require "re"

function stampAndLog(styles)
   local text = ""
   local log_text = ""

   -- remove control characters, but preserve newlines,
   -- and don't use %g because that clobbers multibyte symbols
   for i,v in ipairs(styles) do
      v.text = v.text:gsub("[^%C\n]","")
      v.length = v.text:len()
   end

   timestamp = os.date(date_format)

   if (log_to_file == 1) then
      text = StylesToColours(styles)

      if (log_timestamps == 1) then
         log_text = "@w"..timestamp..text
      else
         log_text = text
      end
      if (log_colour_codes == 0) then
         log_text = strip_colours(log_text)
      end
      local filename = GetInfo(58):gsub("^.\\",GetInfo(56))..sanitize_filename(GetInfo(2)).."ChatLog.txt"
      local f, err = io.open (filename, "a+") -- handle to chat log file
      if f then
         f:write(log_text.."\n") -- write to it
         f:close()  -- close that file now
      else
         ColourNote("white", "red", "COMMUNICATION LOG ERROR: Failed to access your logging file because of the following reason:" )
         ColourNote("white", "red", err)
         ColourNote("white", "red", "Fix the problem or disable Logging to File in the Communication Log plugin.")
      end
   end

   if timestamp ~= "" then
      table.insert(styles,1,{text=timestamp, length=string.len(timestamp), textcolour=0xc0c0c0})
   end
end

function stampAndStore(msg, chan, is_gmcp)
   if is_gmcp then
      msg = filter_as_needed(msg)
   end
   if msg then
      stampAndLog(msg)
      if is_gmcp then
         storeChannel(msg, chan)
      else
         storeNonChannel(msg, chan)
      end
   end
end

-- Takes input as a string with embedded Aardwolf color codes. Use via CallPlugin().
-- See:   http://mushclient.com/scripts/doc.php?function=CallPlugin
-- You can use the function StylesToColours(styles_table) from aardwolf_colors.lua
-- or manually embed your own colors to push any colorized line you want to the log window.
-- Example: CallPlugin("b555825a4a5700c35fa80780","storeFromOutside","HELLO@RHello@Mhello@x215hello@x66HELLO")
function storeFromOutside(msg)
   if storeTab(ColoursToStyles(msg), 1) then
      drawTabs()
   end
end

-- stolen from Mendaloth
function rsocial (name, line, wildcards, styles)
	-- Remote socials will always start with a dark cyan or bright magenta *
	-- Checking color cuts down on non-socials ending up in the chat log...
	if (styles[1].textcolour == GetNormalColour(7) or styles[1].textcolour == GetBoldColour(6)) then
		stampAndStore(styles, "remote_socials")
	end
end

function untagged_info (name, line, wildcards, styles)
   stampAndStore(styles, name)
end -- untagged info

function filter_as_needed(msg)
   if GetPluginInfo("48f867c18f6ff1d6d3b52918", 17) then -- if using the #sub plugin
      if type(msg) == "table" then
         msg = StylesToColours(msg)
      end
      rc, msg = CallPlugin("48f867c18f6ff1d6d3b52918", "filter_string", msg)
   end
   if type(msg) == "string" then
      return ColoursToStyles(msg)
   else
      return msg
   end
end

function storeTab(styles, tab)
   tabs_rects[tab]:addStyles(styles)
   if tab == current_tab then
      tabs_rects[tab]:draw()
      tabs_scrollbars[tab]:draw()
   else
      if not tabs_activity[tab] then
         tabs_activity[tab] = true
         return true
      end
   end
   return false
end

function storeNonChannel(styles, nonchan)
   will_draw = false
   for tab,nonchannels in ipairs(tabs_nonchannel_captures) do
      if nonchannels[nonchan]["capture"] then
         if storeTab(styles, tab) then
            will_draw = true
         end
      end
   end
   if will_draw then
      drawTabs()
   end
end

function storeChannel(styles, chan)
   will_draw = false
   for tab,channels in ipairs(tabs_channel_captures) do
      if not channels[chan] then
         addNewChannel(chan)
      end
      if channels[chan]["capture"] then
         if storeTab(styles, tab) then
            will_draw = true
         end
      end
   end
   if will_draw then
      drawTabs()
   end
end

function OnPluginBroadcast(msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "comm.channel") then
         gmcpcomm = gmcp("comm.channel")
         msg = gmcpcomm.msg or ""
         chan = gmcpcomm.chan or ""
         if (check_nonchannel_trigger("clan_donations") or string.match(strip_colours(msg), "^CLAN ANNOUNCEMENT: %a+ has donated") == nil) then
            if (not channels_table[chan]) or channels_table[chan]["capture"] then
               stampAndStore(msg, chan, true)
            end
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end


function chat_show(name, line, wildcards)
   WindowShow( win, true )
   ColourNote ("yellow", "", "Chats window now shown. Type 'chats hide' to hide it.")
end -- function chat_show

function chat_hide(name, line, wildcards)
   WindowShow( win, false )
   ColourNote ("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")
end -- function chat_hide

require "pairsbykeys"

function extend_rightclick_menu_result(sender, hotspot_id, result)
   if result == 1 then
      wanted_font = utils.fontpicker(font_name, font_size) --font dialog
      if wanted_font then
         font_name = wanted_font.name
         font_size = wanted_font.size
         SetVariable("font_name", font_name)
         SetVariable("font_size", font_size)
         WindowFont(win, "channels_font", font_name, font_size, false, false, false, false, 0)
         tab_font_height = TextHeight(win, "channels_font")
         for i = 1,num_tabs do
            tabs_rects[i]:loadFont(font_name, font_size)
            tabs_rects[i]:reWrapLines()
         end
         setupDisplay()
      end
   elseif result == 2 then
      date_format = ""
      ColourNote ("yellow", "", "Timestamps in communication window DISABLED.")
   elseif result == 3 then
      date_format = "[%d %b %H:%M:%S] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
   elseif result == 4 then
      date_format = "[%d %b %I:%M:%S%p] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
   elseif result == 5 then
      date_format = "[%H:%M:%S] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
   elseif result == 6 then
      date_format = "[%I:%M:%S%p] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
   elseif result == 7 then
      log_to_file = (((0 == log_to_file) and 1) or 0)
      SetVariable("log_to_file", log_to_file)
      if log_to_file == 0 then
         ColourNote ("yellow", "", "Logging to file is now DISABLED.")
      else
         ColourNote ("yellow", "", "Logging to file is now ENABLED.")
      end
   elseif result == 8 then
      log_colour_codes = (((0 == log_colour_codes) and 1) or 0)
      SetVariable("log_colour_codes", log_colour_codes)
      if log_colour_codes == 0 then
         ColourNote ("yellow", "", "Color codes will be stripped from the log file.")
      else
         ColourNote ("yellow", "", "Color codes will be included in the log file.")
      end
   elseif result == 9 then
      log_timestamps = (((0 == log_timestamps) and 1) or 0)
      SetVariable("log_timestamps", log_timestamps)
      if log_timestamps == 0 then
         ColourNote ("yellow", "", "Timestamps will not be included in the log file.")
      else
         ColourNote ("yellow", "", "Timestamps will be included in the log file.")
      end
   end

   local echo_skip = 0
   if (IsPluginInstalled("55616ea13339bc68e963e1f8")) then
      echo_skip = 4
      if result == 10 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "on")
      elseif result == 11 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "off")
      elseif result == 12 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "channels")
      elseif result == 13 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "nonchannels")
      end
   end

   noremove = (num_tabs < 2) and 1 or 0

   if result == 10+echo_skip then
      addTab()
   elseif result == 11+echo_skip-noremove then
      removeTab()
   elseif result == 12+echo_skip-noremove then
      local name = utils.inputbox("Choose a (preferably short) name for this channel capture tab", "Name Channel Tab", tostring(tabs_names[current_tab] or current_tab))
      name = Trim(name or "")
      if name ~= "" then
         tabs_names[current_tab] = name
      else
         tabs_names[current_tab] = current_tab
      end
      clearTabHotspots()
      drawTabs()
   elseif result == 13+echo_skip-noremove then
      local defaults = {}
      local tbl = {}
      for k,v in pairs(tabs_channel_captures[current_tab]) do
         tbl[k] = k
         defaults[k] = v["capture"]
      end

      local capture_result = utils.multilistbox ("Choose which channels to capture to this communication log tab.", "Communication Log Channel Selection", tbl, defaults)
      if capture_result then
         for k,v in pairs(tabs_channel_captures[current_tab]) do
            v["capture"] = capture_result[k]
         end
      end
      reduce_diverse_channels()
   elseif result == 14+echo_skip-noremove then
      local defaults = {}
      for k,v in pairs(tabs_nonchannel_captures[current_tab]) do
         defaults[k] = v["capture"]
      end

      local capture_result = utils.multilistbox ("Choose which non-channel messages to capture to this communication log tab.", "Communication Log Channel Selection", init_nonchannel_pairs, defaults)
      if capture_result then
         for k,v in pairs(tabs_nonchannel_captures[current_tab]) do
            v["capture"] = capture_result[k]
         end
      end
      EnableTrigger("info", check_nonchannel_trigger("info"))
      EnableTrigger("raidinfo", check_nonchannel_trigger("raidinfo"))
      EnableTrigger("claninfo", check_nonchannel_trigger("claninfo"))
      EnableTrigger("global_quest", check_nonchannel_trigger("global_quest"))
      EnableTrigger("remort_auction", check_nonchannel_trigger("remort_auction"))
      EnableTrigger("warfare", check_nonchannel_trigger("warfare"))
      EnableTrigger("remote_socials", check_nonchannel_trigger("remote_socials"))
   elseif result == 15+echo_skip-noremove then
      tabs_rects[current_tab]:clear()
   elseif result == 16+echo_skip-noremove then
      CallPlugin("462b665ecb569efbf261422f","boostMe", win)
   elseif result == 17+echo_skip-noremove then
      CallPlugin("462b665ecb569efbf261422f","dropMe", win)
   end
   SaveState()
end

function extend_rightclick_menu_string(tr)
   local function check(t, i)
      t[i] = "+"..t[i]
   end

   local function disable(t, i)
      t[i] = "^"..t[i]
   end

   local menu_strings = {
      "Configure Font",
      ">Timestamp",
      "No Timestamps",
      "30 Aug 13:29:49",
      "30 Aug 01:20:12PM",
      "13:29:08",
      "1:22:06 PM",
      "<",
      ">Logging to File",
      log_to_file==1 and "Disable" or "Enable",
      "Log with Color Codes",
      "Log with Timestamps",
      "<",
      "Add New Tab",
      "-",
      "Remove This Tab",
      "-",
      "Name This Tab",
      ">Tab Capture Settings",
      "Edit Channel Captures",
      "Edit Non-channel Captures",
      "<",
      "Clear Tab",
      "-",
      "Bring to Front",
      "Send to Back"
   }
   local ms = menu_strings

   if date_format == "" then check(ms, 3) end
   if date_format == "[%d %b %H:%M:%S] " then check(ms, 4) end
   if date_format == "[%d %b %I:%M:%S%p] " then check(ms, 5) end
   if date_format == "[%H:%M:%S] " then check(ms, 6) end
   if date_format == "[%I:%M:%S%p] " then check(ms, 7) end

   if log_colour_codes == 1 then check(ms, 11) end
   if log_timestamps == 1 then check(ms, 12) end

   if num_tabs < 2 then disable(ms, 16) end

   if (IsPluginInstalled("55616ea13339bc68e963e1f8")) then
      local echo_menu_strings = {
         ">Echo In Main Window Settings",
         "Echo All",
         "Echo None",
         "-",
         "Edit Channel Echoes",
         "Edit Non-channel Echoes",
         "<"
      }
      local ems = echo_menu_strings

      for i,v in ipairs(echo_menu_strings) do
         table.insert(menu_strings, 13+i, v)
      end

      return table.concat(menu_strings, "|")
   end
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
 end

]]>
</script>
</muclient>
