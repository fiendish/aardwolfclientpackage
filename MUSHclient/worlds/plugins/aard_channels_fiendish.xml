<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Thanks to Orogan for past help. I wish I remembered what with, but I didn't write it down. -->
<muclient>
<plugin
   name="Aardwolf_Chat_Capture_Miniwindow"
   author="Fiendish"
   id="b555825a4a5700c35fa80780"
   language="Lua"
   purpose="Move chats to a miniwindow"
   date_written="2010-10-25"
   requires="4.73"
   version="2.0"
   save_state="y"
   sequence="-9000"
>
<!-- Plugin sequence must be before echo plugin to capture unechoed info -->
<description trim="y">
USAGE:

   chats show       : show chats window
   chats hide       : hide chats window
   mute [player]    : mutes a player from commlog, or displays mute list
   mute clear       : clears mute list

   Drag title bar to move window.
   Drag inside text area to select text.
   Right-click text area to see menu of options

</description>

</plugin>
<triggers>

<trigger
   enabled="y"
   name="ignoreLimit"
   match="^You are already ignoring 10 people\.$"
   regexp="y"
   script="metIgnoreLimit"
   omit_from_output="y"
   sequence="100"
></trigger>
<trigger
   enabled="n"
   name="ignoreStart"
   match="^You are (?:not ignoring anyone\.|ignoring:)$"
   regexp="y"
   script="startIgnoreList"
   sequence="100"
></trigger>
<trigger
   enabled="n"
   name="ignoreEnd"
   match="^$"
   regexp="y"
   script="endIgnoreList"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="y"
   match="^\*\S.+[^*]$"
   regexp="y"
   script="rsocial"
   name="remote_socials"
   sequence="100"
></trigger>

</triggers>

<aliases>

<alias
   match="^ig(?:nore|nor|no|n)?([\s\w]+)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="clientIgnore"
></alias>
<alias
   match="^mute\s?(\w+)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="muteName"
></alias>

<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

<alias
   script="chat_show"
   match="chats show"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="chat_hide"
   match="chats hide"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

</aliases>

<script>
<![CDATA[
require "aard_register_z_on_create"

require "mw_theme_base"
require "movewindow"
require "gmcphelper"
require "text_rect"
require "scrollbar"

dofile (GetInfo(60) .. "aardwolf_colors.lua")

-- Added by Crowley

require 'serialize'

if GetVariable("muteList") then
   assert(loadstring(GetVariable("muteList"))) ()
else
   muteList = {}
   SetVariable("muteList", serialize.save("muteList"))
end

function muteName(name, line, wildcards)

   local playerName = wildcards[1]:lower():gsub("^%l", string.upper)

	if playerName:upper() == "CLEAR" then
		muteList = {}
		Note("Clearing your muted list.")

	elseif playerName ~= "" then
		local mutePosition = checkIfMuted(playerName)

		if #muteList == 0 then
			table.insert(muteList, 1, playerName)
			Note("Adding " .. playerName .. " to your muted list.")
		else
			if mutePosition ~= 0 then
				table.remove(muteList, mutePosition)
				Note("Removing " .. playerName .. " from your muted list.")
			else
				table.insert(muteList, 1, playerName)
				Note("Adding " .. playerName .. " to your muted list.")
			end
		end
	end
   Note("")
   if #muteList == 0 then
      Note("You are not currently muting anyone.")
	else
      Note("You are muting:")
      for i,v in ipairs(muteList) do
		   Note(string.format("%3d) - %s", i, v))
	   end
   end
   Note("Muted players are not ignored, only removed from commlog.")

	SetVariable("muteList", serialize.save("muteList"))
end


function startIgnoreList()
	EnableTrigger("ignoreLimit", false)
	EnableTrigger("ignoreEnd")
end

function endIgnoreList()
	Note("")
	EnableTrigger("ignoreStart", false)
	EnableTrigger("ignoreEnd", false)

	if #muteList ~= 0 then

		Note("You are muting:")

		for i,v in ipairs(muteList) do
			Note(string.format("%3d) - %s", i, v))
		end


   else
      Note("You are not currently muting anyone.")
	end
   Note("Muted players are not ignored, only removed from commlog.")

end

function checkIfMuted(player)
	local playerInList = 0

	for i,v in ipairs(muteList) do
		if v == player:lower():gsub("^%l", string.upper) then
		   playerInList = i
		   break
	   end
   end
	return playerInList
end

function encounterLimit()
   EnableTrigger("ignoreLimit", false)
   metIgnoreLimit(playerCapture)
end

function metIgnoreLimit()

	EnableTrigger("ignoreLimit", false)
	Note("")
	Note("You are already ignoring 10 people. Checking your mute list...")

	muteName("", "", {playerCapture})
	playerCapture = nil
end

function clientIgnore(name, line, wildcards)
	playerCapture = wildcards[1]:lower():gsub("^%l", string.upper)

	EnableTrigger("ignoreLimit")
	EnableTrigger("ignoreStart")
	SendNoEcho("ignore " .. (playerCapture ~= "" and playerCapture or ""))
end

function menuEdit(list)
   for k,_ in ipairs(list) do
      table.remove(muteList, k)
   end
end
-- end Added by Crowley

local gap = 1
MAX_LINES = 10000 -- how many lines to store in scrollback

-- date_format = "[%d %b %H:%M:%S] "   -- [30 Aug 13:29:49]   date and time 24 hour
-- date_format = "[%d %b %I:%M:%S%p] " -- [30 Aug 01:20:12PM] date and time 12 hour
-- date_format = "[%H:%M:%S] "         -- [13:29:08]          time 24 hour
-- date_format = "[%X] "               -- [1:22:06 PM]        time 12 hour

default_width = 657 + Theme.RESIZER_SIZE + 2
default_height = 132
default_x = 0
default_y = 0
default_font_name = "Dina"
default_font_size = "8"
default_log_file_size = 0 -- MB or 0 for no split

date_format = GetVariable("date_format") or "[%d %b %H:%M:%S] "
width = tonumber(GetVariable("WINDOW_WIDTH")) or default_width
height = tonumber(GetVariable("WINDOW_HEIGHT")) or default_height
log_to_file = tonumber(GetVariable("log_to_file")) or 0
log_colour_codes = tonumber(GetVariable("log_colour_codes")) or 1
log_timestamps = tonumber(GetVariable("log_timestamps")) or 1
log_file_size = tonumber(GetVariable("log_file_size")) or default_log_file_size

local init_nonchannel_keys = {"info", "raidinfo", "claninfo", "clan_donations", "global_quest", "warfare", "remort_auction", "remote_socials"}
local init_nonchannel_pairs = {["warfare"]="WARFARE:", ["info"]="INFO:", ["raidinfo"]="RAIDINFO:", ["claninfo"]="CLANINFO:", ["global_quest"]="Global Quest:", ["remort_auction"]="Remort Auction:", ["clan_donations"]="Clan Donations", ["remote_socials"]="Remote Socials"}
local init_channel_keys = {"answer","auction","barter","cant","chant","claninfo","clantalk","commune","curse","debate","dtell","epics","ftalk","gametalk","gclan","gossip","grapevine","gratz","group","gtell","helper","immtalk","inform","lasertag","ltalk","mafiainfo","market","mchat","mobsay","music","newbie","pchat","pokerinfo","ptell","question","racetalk","rauction","restores","rp","say","snewbie","sports","spouse","tech","telepathy","tell","tiertalk","trivia","wangrp","wardrums","yell"}
channels_table = {}
loadstring(GetVariable("channels_table") or "")()

tabs_activity = {}

loadstring(GetVariable("tabs_channel_captures") or "")()
if (tabs_channel_captures == nil) or (#tabs_channel_captures == 0) then
   tabs_channel_captures = {{}}
end
num_tabs = #tabs_channel_captures
current_tab = math.max(1, math.min(tonumber(GetVariable("current_tab")) or 1, num_tabs))

tabs_nonchannel_captures = {{}}
loadstring(GetVariable("tabs_nonchannel_captures") or "")()

tabs_names = {}
loadstring(GetVariable("tabs_names") or "")()

tabs_active_seen_highlight = {}
loadstring(GetVariable("tabs_active_seen_highlight") or "")()
for i=1,num_tabs do
   tabs_active_seen_highlight[i] = (tabs_active_seen_highlight[i]==0) and 0 or 2
end

window_title = GetVariable("window_title") or "Communication Log"
if window_title == "" then
   window_title = nil
end

function reduce_diverse_channels()
   channels_table = {}
   for tab,channels in ipairs(tabs_channel_captures) do
      for chan,v in pairs(channels) do
         if v["capture"] then
            channels_table[chan] = {["capture"]=true}
         end
      end
   end
end

function check_nonchannel_trigger(key)
   local on = false
   for tab,nonchannels in ipairs(tabs_nonchannel_captures) do
      if nonchannels[key]["capture"] then
         on = true
         break
      end
   end
   return on
end

function addDefaultNonChannels()
   for tab,channels in ipairs(tabs_channel_captures) do
      tabs_nonchannel_captures[tab] = tabs_nonchannel_captures[tab] or {}
      for i,v in ipairs(init_nonchannel_keys) do
         tabs_nonchannel_captures[tab][v] = tabs_nonchannel_captures[tab][v] or {["capture"]=true}
      end
   end

   EnableTrigger("remote_socials", check_nonchannel_trigger("remote_socials"))
   EnableTrigger("warfare", check_nonchannel_trigger("warfare"))
   EnableTrigger("info", check_nonchannel_trigger("info"))
   EnableTrigger("raidinfo", check_nonchannel_trigger("raidinfo"))
   EnableTrigger("claninfo", check_nonchannel_trigger("claninfo"))
   EnableTrigger("global_quest", check_nonchannel_trigger("global_quest"))
   EnableTrigger("remort_auction", check_nonchannel_trigger("remort_auction"))
end

function addNewChannel(chan)
   for tab,channels in ipairs(tabs_channel_captures) do
      channels[chan] = channels[chan] or {["capture"]=true}
      if channels[chan]["capture"] then
         channels_table[chan] = {["capture"]=true}
      end
   end
end

function addDefaultChannels()
   for i,v in ipairs(init_channel_keys) do
      addNewChannel(v)
   end
   addDefaultNonChannels()
end
addDefaultChannels()
reduce_diverse_channels()

function makeRect(i)
   tabs_rects[i] = TextRect.new(win, "tr"..tostring(i), tr_left, tr_top, tr_right, tr_bottom, 1000, true, Theme.PRIMARY_BODY, 3, "Dina", 10)
   tabs_scrollbars[i] = ScrollBar.new(win, "sb"..tostring(i), tr_right, tr_top, draw_right, draw_bottom-Theme.RESIZER_SIZE+1)

   tabs_rects[i]:addUpdateCallback(tabs_scrollbars[i], tabs_scrollbars[i].setScroll)
   tabs_scrollbars[i]:addUpdateCallback(tabs_rects[i], tabs_rects[i].setScroll)

   tabs_rects[i]:setExternalMenuFunction(extend_rightclick_menu)
   tabs_rects[i]:loadFont(font_name, font_size)

   bump_top_for_tabs()
   tabs_rects[i]:setRect(tr_left, tr_top, tr_right, tr_bottom)
   tabs_scrollbars[i]:setRect(tr_right, tr_top, draw_right, tr_bottom-Theme.RESIZER_SIZE+1)

   if temp_tabs_data and temp_tabs_data[i] then
      tabs_rects[i]:deserializeContents(temp_tabs_data[i].contents, true)
      tabs_activity[i] = temp_tabs_data[i].activity
      temp_tabs_data[i] = nil -- cleanup
   end
end


function findTab(name_or_number)
   -- prefer named tabs first
   for i=1,num_tabs do
      if tabs_names[i] and (tabs_names[i]:upper() == tostring(name_or_number):upper()) then
         return i
      end
   end

   -- but if the "name" is a number and there isn't a matching named tab,
   -- pick that number tab.
   for i=1,num_tabs do
      if tostring(i) == tostring(name_or_number) then
         return i
      end
   end
end

function setTabByName(name)
   if type(name) ~= "string" then
      return
   end

   local tab = findTab(name)
   if tab then
      setTab(tab)
   end
end

function setTab(i)
   if type(i) ~= "number" then
      return
   end

   if tabs_rects[current_tab] then
      tabs_rects[current_tab]:unInit()
      tabs_scrollbars[current_tab]:unInit()
   end
   current_tab = math.min(math.max(i, 1), num_tabs)
   tabs_activity[current_tab] = false

   setUpDisplay()
   Repaint()
   return current_tab
end

function nextTab()
   local prev_tab = current_tab
   if prev_tab == setTab(current_tab+1) then
      setTab(1)
   end
end

function prevTab()
   local prev_tab = current_tab
   if prev_tab == setTab(current_tab-1) then
      setTab(num_tabs)
   end
end

function addTab()
   clearTabHotspots()
   num_tabs = num_tabs + 1
   tabs_channel_captures[num_tabs] = {}
   tabs_nonchannel_captures[num_tabs] = {}
   tabs_activity[num_tabs] = false
   tabs_active_seen_highlight[num_tabs] = 2

   addDefaultChannels()
   setUpDisplay()

   return num_tabs
end

function nameTab(tab, name)
   if (tab >= 1) and (tab <= num_tabs) then
      name = Trim(name or "")
      if name ~= "" then
         tabs_names[tab] = name
      else
         tabs_names[tab] = nil
      end
      clearTabHotspots()
      drawTabs()
      return tab
   end
end

function getNamedTab(name)
   local existing = findTab(name)
   if existing then
      return existing
   else
      return nameTab(addTab(), name)
   end
end

function clearTabHotspots()
   for i=1,num_tabs do
      WindowDeleteHotspot(win, "tab"..tostring(i))
   end
end

function removeTab()
   clearTabHotspots()
   tabs_rects[current_tab]:unInit()
   tabs_scrollbars[current_tab]:unInit()

   table.remove(tabs_names, current_tab)
   table.remove(tabs_rects, current_tab)
   table.remove(tabs_scrollbars, current_tab)
   table.remove(tabs_channel_captures, current_tab)
   table.remove(tabs_nonchannel_captures, current_tab)
   table.remove(tabs_active_seen_highlight, current_tab)
   table.remove(tabs_activity, current_tab)

   num_tabs = num_tabs - 1
   setTab(current_tab)
end

function reset_aard()
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, default_height, Theme.SECONDARY_BODY)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   SaveState()
   OnPluginInstall()
end

function OnPluginListChanged ()
   dofile "lua/aard_requirements.lua"
   CallPlugin ("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())
end

function OnPluginInstall ()
   DeleteVariable("temp_tabs_data") -- clean up after 9531ad91a3ed70b6bf9722bb218df8a9daa08614
   init()
   setUpDisplay()
   OnPluginEnable()
end

function bump_top_for_tabs()
   if num_tabs > 1 then
      tab_top = draw_top + 2
      tr_top = tab_top + (2*gap) + tab_font_height + 2
   end
end

function set_tr_shape()
   tr_left = draw_left
   tr_top = draw_top

   bump_top_for_tabs()

   tr_right = draw_right - Theme.RESIZER_SIZE + 1
   tr_bottom = draw_bottom - 1
   return tr_left, tr_top, tr_right, tr_bottom
end

function init ()
   win = GetPluginID()

   local fonts = utils.getfontfamilies ()

   -- install Dina
   if not fonts.Dina then
      AddFont(GetInfo (66) .. "\\Dina.fon")
   end

   -- create window with position from movewindow
   windowinfo  = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, Theme.SECONDARY_BODY)

   -- Add handler for resizing
   WindowAddHotspot(win, win.."_resize", width-Theme.RESIZER_SIZE, height-Theme.RESIZER_SIZE, width, height, nil, nil, "MouseDown", nil, nil, "", 6, 0)
   WindowDragHandler(win, win.."_resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)

   WindowShow(win, true)

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   WindowFont(win, "channels_font", font_name, font_size, false, false, false, false, 0)
   tab_font_height = Theme.TextHeight(win, "channels_font")

   tabs_rects = {}
   tabs_scrollbars = {}

   f = io.open(tmpfile, "r")
   if f then
      loadstring("temp_tabs_data =" .. (f:read("*a") or "nil"))()
      f:close()
      os.remove(tmpfile)
   end
end

function drawTabs ()
   if num_tabs > 1 then
      local tab_left = draw_left+5
      local tab_padding = Theme.DYNAMIC_BUTTON_PADDING
      local active_left = nil
      local active_width = nil
      WindowRectOp(win, miniwin.rect_fill, draw_left, draw_top, draw_right+1, draw_top + (4*gap) + tab_font_height+1, Theme.SECONDARY_BODY)

      if added_to_current then
         for k,_ in pairs(tabs_activity) do
            if tabs_active_seen_highlight[k] == 2 then
               tabs_activity[k] = nil
            end
         end
      end
      for i,_ in ipairs(tabs_channel_captures) do
         local name = tabs_names[i] or tostring(i)
         local tab_width = WindowTextWidth(win, "channels_font", name) + (tab_padding * 2)

         if not WindowHotspotInfo(win, "tab"..tostring(i), 1) then
            WindowAddHotspot(win, "tab"..tostring(i), tab_left, tab_top, tab_left + tab_width, tab_top + (3*gap) + tab_font_height, "tabMouseOver", "tabCancelMouseOver", "tabMouseDown", nil, "tabMouseUp", "", 1, 0)
         else
            WindowMoveHotspot(win, "tab"..tostring(i), tab_left, tab_top, tab_left + tab_width, tab_top + (3*gap) + tab_font_height)
         end

         local text_color = Theme.BODY_TEXT
         if i == current_tab then
            active_left = tab_left
            active_width = tab_width
         else
            local bg_color
            if i ~= mouseover then
               if tabs_activity[i] then
                  bg_color = Theme.CLICKABLE_HOT
                  text_color = Theme.CLICKABLE_HOT_TEXT
               else
                  bg_color = Theme.CLICKABLE
                  text_color = Theme.CLICKABLE_TEXT
               end
            else
               -- reversed coloration during mouseover
               bg_color = Theme.CLICKABLE_HOVER
               text_color = Theme.CLICKABLE_HOVER_TEXT
            end

            WindowCircleOp(
               win, miniwin.circle_round_rectangle,
               tab_left, tab_top, tab_left + tab_width, tab_top + (4*gap) + (2*tab_font_height), -- coords
               Theme.THREE_D_HIGHLIGHT, miniwin.pen_solid, 1,          -- pen
               bg_color, miniwin.brush_solid,             -- brush
               16,   -- width of the ellipse used to draw the rounded corner
               (4*gap) + (2*tab_font_height)  -- height of the ellipse used to draw the rounded corner
            )
         end

         tab_left = tab_left + tab_padding
         tab_left = tab_left + WindowText(win, "channels_font", name, tab_left, tab_top + gap + 1, draw_right, draw_top + (3*gap) + tab_font_height, text_color, false)
         tab_left = tab_left + tab_padding
      end

      WindowLine(win, draw_left, tab_top + (2*gap) + tab_font_height + 1, draw_right+1, tab_top + (2*gap) + tab_font_height + 1, Theme.THREE_D_HIGHLIGHT, 0 + 0x0200, 1)
      WindowCircleOp(
         win, miniwin.circle_round_rectangle,
         active_left, tab_top, active_left + active_width, tab_top + (4*gap) + (2*tab_font_height), -- coords
         Theme.THREE_D_HIGHLIGHT, miniwin.pen_solid, 1,          -- pen
         Theme.PRIMARY_BODY, miniwin.brush_solid,  -- brush
         16,   -- width of the ellipse used to draw the rounded corner
         (4*gap) + (2*tab_font_height)   -- height of the ellipse used to draw the rounded corner
      )
      WindowText(win, "channels_font", tabs_names[current_tab] or tostring(current_tab), active_left + tab_padding, tab_top + gap + 1, draw_right, draw_top + (3*gap) + tab_font_height, Theme.BODY_TEXT, false)
   end
   tabs_rects[current_tab]:draw()
   tabs_scrollbars[current_tab]:draw()
   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
end

function tabMouseOver (flags, hotspot_id)
   mouseover = tonumber(hotspot_id:sub(4))
   drawTabs()
end

function tabCancelMouseOver (flags, hotspot_id)
   mouseover = nil
   drawTabs()
end

function tabMouseDown (flags, hotspot_id)
   setTab(tonumber(hotspot_id:sub(4)))
end

function tabMouseUp (flags, hotspot_id)
   if hotspot_id == "titlebar" then
      hotspot_id = "tab"..tostring(current_tab or 1)
   end
   if bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      tabs_rects[tonumber(hotspot_id:sub(4))]:rightClickMenu()
   end
end

function drawBackground ()
   -- WindowAddHotspot(win, "titlebar", 0, 0, 0, 0, nil, nil, nil, nil, "tabMouseUp", "", miniwin.cursor_hand, 0)
   draw_left, draw_top, draw_right, draw_bottom = Theme.DressWindow(win, "channels_font", window_title, nil)
   Theme.AddResizeTag(win, 2, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")
end

function ResizeMoveCallback ()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo(win, 17), WindowInfo(win, 18)
   width = width+posx-startx
   startx = posx
   if (WindowTextWidth(win, "channels_font", "Communication Log")+2*Theme.RESIZER_SIZE > width) then
      width = WindowTextWidth(win, "channels_font", "Communication Log")+2*Theme.RESIZER_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end
   height = height+posy-starty
   starty=posy
   if (3*Theme.RESIZER_SIZE + 70 > height) then
      height = 3*Theme.RESIZER_SIZE + 70
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      setUpDisplay()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

function ResizeReleaseCallback ()
   setUpDisplay()

   for i = 1,num_tabs do
      tabs_rects[i]:reWrapLines()
   end

   tabs_rects[current_tab]:draw()
   tabs_scrollbars[current_tab]:draw()
   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")

   WindowMoveHotspot(win, win.."_resize", draw_right-Theme.RESIZER_SIZE, draw_bottom-Theme.RESIZER_SIZE, 0, 0)
end

function setUpDisplay ()
   WindowResize(win, width, height, 0x00ff00)
   drawBackground()
   set_tr_shape()
   for i = 1,num_tabs do
      if tabs_rects[i] then
         tabs_rects[i]:setRect(tr_left, tr_top, tr_right, tr_bottom)
         tabs_scrollbars[i]:setRect(tr_right, tr_top, draw_right, tr_bottom-Theme.RESIZER_SIZE+1)
      else
         makeRect(i)
      end
   end
   temp_tabs_data = nil
   drawTabs()
end

tmpfile = GetInfo(66) .. GetPluginID() .. "_temp_data.txt"

function OnPluginClose ()
   WindowDelete(win)
   if Theme.is_reloading then
      local temp_tabs_data = {}
      for i,v in ipairs(tabs_rects) do
         temp_tabs_data[i] = {
            ["contents"] = v:serializeContents(),
            ["activity"] = tabs_activity[i]
         }
      end
      f = io.open(tmpfile, "w")
      if f then
         f:write(serialize.save_simple(temp_tabs_data))
         f:flush()
         f:close()
      end
   end
end -- OnPluginClose

function OnPluginEnable ()
   WindowShow(win, true)
end -- OnPluginEnable

function OnPluginDisable()
   WindowShow( win, false )
end --  OnPluginDisable

function OnPluginSaveState()
   -- save window current location for next time
   movewindow.save_state(win)

   SetVariable("font_name", font_name)
   SetVariable("font_size", font_size)
   SetVariable("date_format", date_format)
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable("WINDOW_WIDTH", width)
   SetVariable("WINDOW_HEIGHT", height)
   SetVariable("log_to_file", log_to_file)
   SetVariable("log_file_size", log_file_size)
   SetVariable("log_colour_codes", log_colour_codes)
   SetVariable("log_timestamps", log_timestamps)
   SetVariable("current_tab", current_tab)
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("tabs_names", serialize.save("tabs_names"))
   SetVariable("tabs_channel_captures", serialize.save("tabs_channel_captures"))
   SetVariable("tabs_nonchannel_captures", serialize.save("tabs_nonchannel_captures"))
   SetVariable("tabs_active_seen_highlight", serialize.save("tabs_active_seen_highlight"))
   SetVariable("window_title", window_title or "")
end

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-]", "")
   return Trim(str or "")
end

re = require "re"

function log(multiline_styles, timestamp)
   local log_text

   if log_colour_codes == 0 then
      log_text = strip_colours_from_styles(multiline_styles)
   else
      log_text = StylesToColours(multiline_styles)
   end

   if log_timestamps == 1 then
      log_text = "@w"..timestamp..log_text
   end

   local filename = GetInfo(58):gsub("^.\\",GetInfo(56))..sanitize_filename(GetInfo(2)).."ChatLog.txt"
   local f, err = io.open(filename, "a+") -- handle to chat log file
   if f then
      f:write(log_text.."\n") -- write to it
      local size = f:seek("end") -- get current file size
      f:close()  -- close that file now
      if log_file_size > 0 and (size / 1048576) >= log_file_size then
         local splitfilename = GetInfo(58):gsub("^.\\",GetInfo(56))..os.time().."-"..sanitize_filename(GetInfo(2)).."ChatLog.txt"
         os.rename(filename, splitfilename) -- rename file to start a new one
      end
   else
      ColourNote("white", "red", "COMMUNICATION LOG ERROR: Failed to access your logging file because of the following reason:" )
      ColourNote("white", "red", err)
      ColourNote("white", "red", "Fix the problem or disable Logging to File in the Communication Log plugin.")
   end
end

function stampAndLog(multiline_styles, timestamp, omit_log)
   if not timestamp then
      timestamp = ""
   end

   -- remove control characters, but don't use %g because that clobbers multibyte symbols
   for _,line in ipairs(multiline_styles) do
      for _,style in ipairs(line) do
         style.text = style.text:gsub("[^%C]", "")
         style.length = #style.text
      end
   end

   if (log_to_file == 1) and not omit_log then
      log(multiline_styles, timestamp)
   end
   if timestamp ~= "" then
      table.insert(
         multiline_styles[1],
         1,
         {
            text = timestamp,
            length = #timestamp,
            backcolour = 0,
            textcolour = GetNormalColour(8),
            bold = false
         }
      )
   end
   return multiline_styles
end

-- storeFromOutside takes four arguments:
-- 1. the message you want to store in Aardwolf color code format
-- 2. (optional) the tab name or number to store it in
-- 3. (optional) true/false for controlling whether to timestamp the line (defaults to true if nil)
-- 4. (optional) true/false for whether to omit the line from the log file (defaults to false if nil)
-- (for add_timestamp, false means don't add a timestamp, and nil or true means obey the internal timestamping configuration)
-- (for omit_log, true means don't add the line to the log file, and nil or false means go ahead and log it)
-- Use via CallPlugin(), http://mushclient.com/scripts/doc.php?function=CallPlugin
--
-- Example: CallPlugin("b555825a4a5700c35fa80780","storeFromOutside","HELLO@RHello@Mhello@x215hello@x66HELLO", 1, true, true)
--   This example will use Tab #1, Add a timestamp, and Omit from the log
--
-- Example: CallPlugin("b555825a4a5700c35fa80780","storeFromOutside","HELLO@RHello@Mhello@x215hello@x66HELLO", "Q/A", false)
--   This example will use Tab Q/A, Not add a timestamp, and Log it
function storeFromOutside(text, tab, add_timestamp, omit_log)
   if add_timestamp == nil then
      add_timestamp = true
   end
   if tab == nil then
      tab = 1
   elseif type(tab) == "string" then
      tab = findTab(tab)
   end

   local res = nil
   if tab then
      local multiline_styles
      is_serialized_styles_table, multiline_styles = pcall(
         function()
            return ToMultilineStyles(loadstring("return "..text)(), nil, nil, true)
         end
      )
      if not is_serialized_styles_table then
         multiline_styles = ToMultilineStyles(text, nil, nil, true)
      end
      multiline_styles = stampAndLog(multiline_styles, add_timestamp and os.date(date_format) or "", omit_log)
      added_to_current = false
      res = addToTab(multiline_styles, tab)
      if res == 1 then
         drawTabs()
      end
   end

   return res and (res >= 0) or false
end

-- stolen from Mendaloth
function rsocial (name, line, wildcards, styles)
   -- Remote socials will always start with a dark cyan or bright magenta *
   -- Checking color cuts down on non-socials ending up in the chat log...
   if (styles[1].textcolour == GetNormalColour(7) or styles[1].textcolour == GetBoldColour(6)) then
      local multiline_styles = ToMultilineStyles(styles, nil, nil, true)
      storeNonChannel(multiline_styles, "remote_socials")
   end
end

function untagged_info (name, line, wildcards, styles)
   local multiline_styles = ToMultilineStyles(styles, nil, nil, true)
   storeNonChannel(multiline_styles, name)
end -- untagged info

function filter_as_needed(text)
   if GetPluginInfo("48f867c18f6ff1d6d3b52918", 17) then -- if using the #sub plugin
      rc, text = CallPlugin("48f867c18f6ff1d6d3b52918", "filter_string", text)
   end
   return text
end

function addToTab(multiline_styles, tab)
   if (tab >= 1) and (tab <= num_tabs) then
      tabs_rects[tab]:addText(multiline_styles, nil, nil, true)
      if tab == current_tab then
         added_to_current = true
         tabs_rects[tab]:draw()
         tabs_scrollbars[tab]:draw()
         CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
      else
         if not tabs_activity[tab] then
            tabs_activity[tab] = true
            return 1  -- should redraw tabs
         end
      end
      return 0
   end
   return -1
end

function storeMessage(multiline_styles, label, captures)
   will_draw = false
   added_to_current = false
   for tab, whats_inside_the_tab in ipairs(captures) do
      if whats_inside_the_tab[label]["capture"] then
         if addToTab(multiline_styles, tab) == 1 then
            will_draw = true
         end
      end
   end
   if will_draw then
      drawTabs()
   end
end

function storeNonChannel(multiline_styles, label)
   multiline_styles = stampAndLog(multiline_styles, os.date(date_format))
   storeMessage(multiline_styles, label, tabs_nonchannel_captures)
end

function storeChannel(multiline_styles, label)
   multiline_styles = stampAndLog(multiline_styles, os.date(date_format))
   for tab, whats_inside_the_tab in ipairs(tabs_channel_captures) do
      if not whats_inside_the_tab[label] then
         addNewChannel(label)
      end
   end
   storeMessage(multiline_styles, label, tabs_channel_captures)
end

function OnPluginBroadcast(msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "comm.channel") then
         local gmcpcomm = gmcp("comm.channel")
         local msg_text = gmcpcomm.msg or ""
         local chan = gmcpcomm.chan or ""
		 local player = gmcpcomm.player or ""
         if (check_nonchannel_trigger("clan_donations") or string.match(strip_colours(msg_text), "^CLAN ANNOUNCEMENT: %a+ has donated") == nil) then
            if (not channels_table[chan]) or channels_table[chan]["capture"] then
               msg_text = filter_as_needed(msg_text)
               if msg_text and checkIfMuted(player) == 0 then
                  storeChannel(ColoursToStyles(msg_text, nil, nil, true), chan)
               end
            end
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

function MouseDown(flags, hotspot_id)
   if (hotspot_id == win.."_resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end


function chat_show(name, line, wildcards)
   WindowShow( win, true )
   ColourNote("yellow", "", "Chats window now shown. Type 'chats hide' to hide it.")
end -- function chat_show

function chat_hide(name, line, wildcards)
   WindowShow( win, false )
   ColourNote("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")
end -- function chat_hide

require "pairsbykeys"

function extend_rightclick_menu()
   local menu_items = {}
   for i, v in ipairs({
      {
         "Configure Font",
         function()
            wanted_font = utils.fontpicker(font_name, font_size) --font dialog
            if wanted_font then
               font_name = wanted_font.name
               font_size = wanted_font.size
               SetVariable("font_name", font_name)
               SetVariable("font_size", font_size)
               WindowFont(win, "channels_font", font_name, font_size, false, false, false, false, 0)
               tab_font_height = Theme.TextHeight(win, "channels_font")
               for i = 1,num_tabs do
                  tabs_rects[i]:loadFont(font_name, font_size)
                  tabs_rects[i]:reWrapLines()
               end
               setUpDisplay()
            end
            SaveState()
         end
      },
      {">Timestamp", ""},
      {
         ((date_format == "") and "+" or "").."No Timestamps",
         function()
            date_format = ""
            ColourNote("yellow", "", "Timestamps in communication window DISABLED.")
            SaveState()
         end
      },
      {
         ((date_format == "[%d %b %H:%M:%S] ") and "+" or "").."30 Aug 13:29:49",
         function()
            date_format = "[%d %b %H:%M:%S] "
            ColourNote("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
            SaveState()
         end
      },
      {
         ((date_format == "[%d %b %I:%M:%S%p] ") and "+" or "").."30 Aug 01:20:12PM",
         function()
            date_format = "[%d %b %I:%M:%S%p] "
            ColourNote("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
            SaveState()
         end
      },
      {
         ((date_format == "[%H:%M:%S] ") and "+" or "").."13:29:08",
         function()
            date_format = "[%H:%M:%S] "
            ColourNote("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
            SaveState()
         end
      },
      {
         ((date_format == "[%I:%M:%S%p] ") and "+" or "").."1:22:06 PM",
         function()
            date_format = "[%I:%M:%S%p] "
            ColourNote("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
            SaveState()
         end
      },
      {"<", ""},
      {">Logging to File", ""},
      {
         (log_to_file==1) and "Disable" or "Enable",
         function()
            log_to_file = (((0 == log_to_file) and 1) or 0)
            SetVariable("log_to_file", log_to_file)
            if log_to_file == 0 then
               ColourNote("yellow", "", "Logging to file is now DISABLED.")
            else
               ColourNote("yellow", "", "Logging to file is now ENABLED.")
            end
            SaveState()
         end
      },
      {
         ((log_colour_codes == 1) and "+" or "").."Log with Color Codes",
         function()
            log_colour_codes = (((0 == log_colour_codes) and 1) or 0)
            SetVariable("log_colour_codes", log_colour_codes)
            if log_colour_codes == 0 then
               ColourNote("yellow", "", "Color codes will be stripped from the log file.")
            else
               ColourNote("yellow", "", "Color codes will be included in the log file.")
            end
            SaveState()
         end
      },
      {
         ((log_timestamps == 1) and "+" or "").."Log with Timestamps",
         function()
            log_timestamps = (((0 == log_timestamps) and 1) or 0)
            SetVariable("log_timestamps", log_timestamps)
            if log_timestamps == 0 then
               ColourNote("yellow", "", "Timestamps will not be included in the log file.")
            else
               ColourNote("yellow", "", "Timestamps will be included in the log file.")
            end
            SaveState()
         end
      },
      {"-", ""},
      {
         "Set Log File Split Size ("..((log_file_size == 0) and "None" or (tostring(log_file_size).."MB"))..")",
         function()
            local ls = nil
            while not ls do
               ls = utils.inputbox("Input a size in MB. (0 for None)", "Log File Split Size", log_file_size, "", 10, {prompt_height = 16, box_width = 180, box_height = 130, reply_width = 40, reply_height = 20})
               if not ls then -- canceled
                  return
               end
               ls = tonumber(ls)
            end
            log_file_size = ls
            if log_file_size == 0 then
               ColourNote("yellow", "", "Log file will not be split.")
            else
               ColourNote("yellow", "", "Log files will be split at "..log_file_size.." MB.")
            end
            SaveState()
         end
      },
      {"<", ""},
   }) do
      table.insert(menu_items, v)
   end

   if (IsPluginInstalled("55616ea13339bc68e963e1f8")) then
      -- chat echo plugin
      for i,v in ipairs({
         {">Echo In Main Window Settings", ""},
         {
            "Echo All",
            function()
               CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "on")
               SaveState()
            end
         },
         {
            "Echo None",
            function()
               CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "off")
               SaveState()
            end
         },
         {"-", ""},
         {
            "Edit Channel Echoes",
            function()
               CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "channels")
               SaveState()
            end
         },
         {
            "Edit Non-channel Echoes",
            function()
               CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "nonchannels")
               SaveState()
            end
         },
         {"<", ""}
      }) do
         table.insert(menu_items, v)
      end
   end

   for i,v in ipairs({
      {
         "Add New Tab",
         function()
            setTab(addTab())
            SaveState()
         end
      },
      {"-", ""},
      (num_tabs < 2) and {"^Remove This Tab", ""} or {
         "Remove This Tab",
         function()
            removeTab()
            SaveState()
         end
      },
      {"-", ""},
      {
         "Name This Tab",
         function()
            local name = utils.inputbox("Choose a (preferably short) name for this channel capture tab", "Name Channel Tab", tostring(tabs_names[current_tab] or current_tab))
            if not name then
               return -- cancel was pressed, so keep existing name
            end
            nameTab(current_tab, name)
            SaveState()
         end
      },
      {">Tab Capture Settings", ""},
      {
         "Edit Channel Captures",
         function()
            local defaults = {}
            local tbl = {}
            for k,v in pairs(tabs_channel_captures[current_tab]) do
               tbl[k] = k
               defaults[k] = v["capture"]
            end

            local capture_result = utils.multilistbox ("Choose which channels to capture to this communication log tab.", "Communication Log Channel Selection", tbl, defaults)
            if capture_result then
               for k,v in pairs(tabs_channel_captures[current_tab]) do
                  v["capture"] = capture_result[k]
               end
            end
            reduce_diverse_channels()
            SaveState()
         end
      },
      {
         "Edit Non-channel Captures",
         function()
            local defaults = {}
            for k,v in pairs(tabs_nonchannel_captures[current_tab]) do
               defaults[k] = v["capture"]
            end

            local capture_result = utils.multilistbox ("Choose which non-channel messages to capture to this communication log tab.", "Communication Log Channel Selection", init_nonchannel_pairs, defaults)
            if capture_result then
               for k,v in pairs(tabs_nonchannel_captures[current_tab]) do
                  v["capture"] = capture_result[k]
               end
            end
            EnableTrigger("info", check_nonchannel_trigger("info"))
            EnableTrigger("raidinfo", check_nonchannel_trigger("raidinfo"))
            EnableTrigger("claninfo", check_nonchannel_trigger("claninfo"))
            EnableTrigger("global_quest", check_nonchannel_trigger("global_quest"))
            EnableTrigger("remort_auction", check_nonchannel_trigger("remort_auction"))
            EnableTrigger("warfare", check_nonchannel_trigger("warfare"))
            EnableTrigger("remote_socials", check_nonchannel_trigger("remote_socials"))
            SaveState()
         end
      },
      {"<", ""},
      {">Tab Highlighting On New Messages", ""},
      {
         ((tabs_active_seen_highlight[current_tab] == 0) and "+" or "").."Always Highlight On New Message If Not Active",
         function()
            tabs_active_seen_highlight[current_tab] = 0
            SaveState()
         end
      },
      {
         ((tabs_active_seen_highlight[current_tab] == 2) and "+" or "").."Highlight If New Message Not Shown In Active Tab",
         function()
            tabs_active_seen_highlight[current_tab] = 2
            SaveState()
         end
      },
      {"<", ""},
      {
         "Clear Tab",
         function()
            tabs_rects[current_tab]:clear(true)
            CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
            SaveState()
         end
      },
      {"-", ""},
	  {">Mute List Options", ""},
	  {
			"Add player to Mute list",
			function()
			local name = utils.inputbox ("Who would you like to mute?", "Mute player")
			if not name then
				return
			else
				muteName("", "", {name})
			end
			SaveState()
			end
	  },
	  {
			"Edit Mute List",
			function()
         local muted = {}
         for _,v in ipairs(muteList) do
            table.insert(muted, v)
         end
  			local capture_result = utils.multilistbox ("Choose which players to unmute.", "Muted Players List", muted)
			if capture_result then
            for k,_ in ipairs(capture_result) do
               local player = muted[k]
               Note("Removing " .. player .. " from mute list.")
               table.remove(muteList, checkIfMuted(player))
            end
         end

			end
	  },
	  {"<", ""},
	  {"-", ""},
      {
         "Bring to Front",
         function()
            CallPlugin("462b665ecb569efbf261422f","boostMe", win)
            SaveState()
         end
      },
      {
         "Send to Back",
         function()
            CallPlugin("462b665ecb569efbf261422f","dropMe", win)
            SaveState()
         end
      },
      {
         "Show/Hide Titlebar",
         function()
            if window_title == nil then
               window_title = "Communication Log"
           else
               window_title = nil
           end
           setUpDisplay()
           SaveState()
         end
      }
   }) do
      table.insert(menu_items, v)
   end
   local menu_strings = {}
   local menu_functions = {}
   for i,v in ipairs(menu_items) do
      table.insert(menu_strings, v[1])
      if type(v[2]) == "function" then
         table.insert(menu_functions, v[2])
      end
   end

   return table.concat(menu_strings, "|"), menu_functions
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end


local charset = {
   'r', 'g', 'b', 'y', 'm', 'c', 'w', 'R', 'G', 'B', 'Y', 'M', 'C', 'W', '@', ' '
}
math.randomseed(os.time())

function string.random(Length)
   -- Length (number)
   local Result = {}
   local Range = #charset

   for Loop = 1,Length do
      Result[Loop] = charset[math.random(1, Range)]
   end

   return table.concat(Result)
end


function test(arg)
   if arg == nil then
      arg = 1000
   end
   for i = 1, math.random(arg) do
      storeFromOutside(
         string.random(math.random(200)),
         math.random(num_tabs)
      )
   end
end

function show(i)
   tabs_rects[i]:debug("show")
end
-- \\\CallPlugin("b555825a4a5700c35fa80780","test")
-- \\\CallPlugin("b555825a4a5700c35fa80780","show", 1)
]]>
</script>
</muclient>
